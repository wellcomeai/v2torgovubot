"""
Trading Bot Main Application
–ì–æ—Ç–æ–≤ –∫ –¥–µ–ø–ª–æ—é –Ω–∞ Render —Å –ø–æ–ª–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
"""

import asyncio
import signal
import sys
import logging
from datetime import datetime
from contextlib import asynccontextmanager
from typing import Dict, List, Optional

from fastapi import FastAPI, HTTPException, BackgroundTasks
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import uvicorn

# –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∏–º–ø–æ—Ä—Ç—ã
from app.config.settings import Settings, get_settings
from core.trading_engine import TradingEngine
from core.bybit_client import BybitLinearClient
from core.data_manager import DataManager
from data.database import Database

# –ò–º–ø–æ—Ä—Ç—ã —Å–µ—Ä–≤–∏—Å–æ–≤ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–¥–æ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
from services import (
    create_all_services, 
    shutdown_all_services,
    check_all_services_health,
    OpenAIService,
    TelegramService,
    NotificationService,
    BacktestEngine
)

from strategies.strategy_registry import StrategyRegistry
from data.models import Signal, BacktestResult, Base
from utils.logger import setup_logger


# ============================================================================
# –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï
# ============================================================================

settings = get_settings()
logger = setup_logger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
trading_engine: Optional[TradingEngine] = None
database: Optional[Database] = None
services: Dict[str, any] = {}
background_tasks_running = False


# ============================================================================
# PYDANTIC –ú–û–î–ï–õ–ò –î–õ–Ø API (—Ä–∞—Å—à–∏—Ä–µ–Ω—ã)
# ============================================================================

class StrategyConfig(BaseModel):
    name: str
    symbol: str
    params: Dict
    timeframe: str = "1m"
    active: bool = True

class BacktestRequest(BaseModel):
    strategy_name: str
    symbol: str
    start_date: str
    end_date: str
    params: Dict
    initial_balance: float = 10000.0

class SystemStatus(BaseModel):
    status: str
    uptime: str
    active_strategies: int
    active_symbols: List[str]
    websocket_connected: bool
    last_signal_time: Optional[str]
    services_status: Dict[str, Dict] = {}

class SignalResponse(BaseModel):
    id: int
    symbol: str
    strategy_name: str
    signal_type: str
    confidence: float
    price: float
    timestamp: str
    ai_analysis: Optional[str]

class NotificationRequest(BaseModel):
    type: str = "custom"
    title: str = ""
    message: str
    priority: str = "normal"
    channels: List[str] = ["telegram"]

class AIAnalysisRequest(BaseModel):
    analysis_type: str
    symbol: str
    timeframe: str = "5m"
    additional_context: Dict = {}

class ServiceStats(BaseModel):
    total_services: int
    healthy_services: int
    service_details: Dict[str, Dict]


# ============================================================================
# LIFECYCLE MANAGEMENT
# ============================================================================

@asynccontextmanager
async def lifespan(app: FastAPI):
    """
    –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    """
    # STARTUP
    logger.info("üöÄ Starting Trading Bot...")
    
    try:
        await startup_sequence()
        logger.info("‚úÖ Trading Bot started successfully")
        yield
    except Exception as e:
        logger.error(f"‚ùå Failed to start Trading Bot: {e}")
        raise
    finally:
        # SHUTDOWN
        logger.info("üîÑ Shutting down Trading Bot...")
        await shutdown_sequence()
        logger.info("‚úÖ Trading Bot shut down gracefully")


async def startup_sequence():
    """
    –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    """
    global trading_engine, database, background_tasks_running, services
    
    # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    logger.info("üì¶ Initializing database...")
    database = Database()
    await database.init()
    
    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π
    logger.info("üîë Validating API keys...")
    if not all([settings.BYBIT_API_KEY, settings.BYBIT_API_SECRET]):
        raise ValueError("Bybit API keys not configured")
    
    # 3. –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    logger.info("üîß Creating services...")
    services = await create_all_services(
        settings=settings,
        database=database
    )
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∫–∏–µ —Å–µ—Ä–≤–∏—Å—ã —Å–æ–∑–¥–∞–Ω—ã
    available_services = list(services.keys())
    logger.info(f"‚úÖ Created services: {available_services}")
    
    # 4. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞
    logger.info("ü§ñ Initializing Trading Engine...")
    trading_engine = TradingEngine(
        database=database,
        settings=settings
    )
    
    # 5. –ü–µ—Ä–µ–¥–∞—á–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ –≤ trading engine
    logger.info("üîó Linking services to Trading Engine...")
    if hasattr(trading_engine, 'set_services'):
        trading_engine.set_services(services)
    else:
        # Fallback - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏
        if 'notifications' in services:
            trading_engine.notification_service = services['notifications']
        if 'openai' in services:
            trading_engine.openai_service = services['openai']
        if 'telegram' in services:
            trading_engine.telegram_service = services['telegram']
        if 'backtest' in services:
            trading_engine.backtest_engine = services['backtest']
    
    # 6. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bybit
    logger.info("üîå Connecting to Bybit...")
    await trading_engine.connect()
    
    # 7. –ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
    logger.info("üìä Loading active strategies...")
    await trading_engine.load_active_strategies()
    
    # 8. –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
    logger.info("‚ö° Starting background tasks...")
    background_tasks_running = True
    asyncio.create_task(background_market_monitor())
    asyncio.create_task(background_health_monitor())
    asyncio.create_task(background_service_monitor())
    
    # 9. –ó–∞–ø—É—Å–∫ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    logger.info("üåê Starting WebSocket connections...")
    await trading_engine.start_websockets()
    
    # 10. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
    if 'notifications' in services:
        await services['notifications'].send_system_status(
            status="started",
            components={name: "initialized" for name in services.keys()},
            metrics={'startup_time': datetime.now().isoformat()}
        )


async def shutdown_sequence():
    """
    –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
    """
    global trading_engine, database, background_tasks_running, services
    
    background_tasks_running = False
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã
    if services.get('notifications'):
        try:
            await services['notifications'].send_system_status(
                status="shutting_down",
                components={name: "stopping" for name in services.keys()},
                metrics={'shutdown_time': datetime.now().isoformat()}
            )
        except:
            pass  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –µ—Å–ª–∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è
    
    if trading_engine:
        logger.info("üîå Disconnecting from Bybit...")
        await trading_engine.disconnect()
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã
    if services:
        logger.info("üîß Shutting down services...")
        await shutdown_all_services(services)
        services.clear()
    
    if database:
        logger.info("üì¶ Closing database connections...")
        await database.close()


# ============================================================================
# FASTAPI APPLICATION
# ============================================================================

app = FastAPI(
    title="Advanced Trading Bot",
    description="AI-Powered Multi-Strategy Trading Bot for Bybit USDT Perpetuals",
    version="1.0.0",
    lifespan=lifespan
)

# CORS middleware –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


# ============================================================================
# API ENDPOINTS - CORE
# ============================================================================

@app.get("/", response_model=dict)
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π endpoint"""
    return {
        "service": "Advanced Trading Bot",
        "version": "1.0.0",
        "status": "running",
        "services": list(services.keys()),
        "docs": "/docs"
    }


@app.get("/health", response_model=SystemStatus)
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
    global trading_engine, services
    
    if not trading_engine:
        raise HTTPException(status_code=503, detail="Trading engine not initialized")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞
    status = await trading_engine.get_system_status() if hasattr(trading_engine, 'get_system_status') else {}
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤
    services_health = await check_all_services_health(services) if services else {'overall_status': 'unknown', 'services': {}}
    
    return SystemStatus(
        status="healthy" if trading_engine.is_running else "unhealthy",
        uptime=str(datetime.now() - trading_engine.start_time) if hasattr(trading_engine, 'start_time') else "unknown",
        active_strategies=len(getattr(trading_engine, 'active_strategies', [])),
        active_symbols=list(getattr(trading_engine, 'active_symbols', set())),
        websocket_connected=getattr(trading_engine, 'websocket_connected', False),
        last_signal_time=status.get("last_signal_time"),
        services_status=services_health['services']
    )


# ============================================================================
# API ENDPOINTS - SERVICES
# ============================================================================

@app.get("/services/status", response_model=ServiceStats)
async def get_services_status():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
    if not services:
        raise HTTPException(status_code=503, detail="Services not initialized")
    
    health_report = await check_all_services_health(services)
    
    return ServiceStats(
        total_services=health_report['total_services'],
        healthy_services=health_report['healthy_services'],
        service_details=health_report['services']
    )


@app.get("/services/{service_name}/stats")
async def get_service_stats(service_name: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞"""
    if service_name not in services:
        raise HTTPException(status_code=404, detail=f"Service '{service_name}' not found")
    
    service = services[service_name]
    if hasattr(service, 'get_stats'):
        return service.get_stats()
    else:
        return {"message": f"Service '{service_name}' does not provide stats"}


@app.post("/notifications/send")
async def send_notification(request: NotificationRequest):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    if 'notifications' not in services:
        raise HTTPException(status_code=503, detail="Notification service not available")
    
    notification_service = services['notifications']
    
    success = await notification_service.send_notification({
        'type': request.type,
        'title': request.title,
        'message': request.message,
        'priority': request.priority,
        'channels': request.channels,
        'source': 'api'
    })
    
    return {"success": success, "message": "Notification queued" if success else "Failed to queue notification"}


@app.post("/ai/analyze")
async def ai_analyze(request: AIAnalysisRequest):
    """–ó–∞–ø—Ä–æ—Å AI –∞–Ω–∞–ª–∏–∑–∞"""
    if 'openai' not in services:
        raise HTTPException(status_code=503, detail="OpenAI service not available")
    
    openai_service = services['openai']
    
    try:
        # –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        result = await openai_service.analyze_market_data(
            symbol=request.symbol,
            timeframe=request.timeframe,
            market_data=None,  # –ú–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ data_manager
            analysis_type=request.analysis_type,
            additional_context=request.additional_context
        )
        
        if result:
            return result.to_dict()
        else:
            raise HTTPException(status_code=400, detail="Analysis failed")
            
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Analysis error: {str(e)}")


@app.post("/telegram/test")
async def test_telegram():
    """–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
    if 'telegram' not in services:
        raise HTTPException(status_code=503, detail="Telegram service not available")
    
    telegram_service = services['telegram']
    
    success = await telegram_service.send_message(
        "üß™ Test message from Trading Bot API",
        priority="normal"
    )
    
    return {"success": success, "message": "Test message sent" if success else "Failed to send test message"}


# ============================================================================
# API ENDPOINTS - EXISTING (Updated)
# ============================================================================

@app.get("/strategies", response_model=List[str])
async def list_available_strategies():
    """–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
    return StrategyRegistry.list_strategies()


@app.post("/strategies/activate")
async def activate_strategy(config: StrategyConfig):
    """–ê–∫—Ç–∏–≤–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    global trading_engine
    
    if not trading_engine:
        raise HTTPException(status_code=503, detail="Trading engine not ready")
    
    try:
        await trading_engine.activate_strategy(
            name=config.name,
            symbol=config.symbol,
            params=config.params,
            timeframe=config.timeframe
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        if 'notifications' in services:
            await services['notifications'].send_notification({
                'type': 'system_status',
                'title': f'Strategy Activated: {config.name}',
                'message': f'Strategy {config.name} activated for {config.symbol}',
                'priority': 'normal',
                'source': 'strategy_management'
            })
        
        logger.info(f"‚úÖ Strategy {config.name} activated for {config.symbol}")
        return {"message": f"Strategy {config.name} activated successfully"}
        
    except Exception as e:
        logger.error(f"‚ùå Failed to activate strategy: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        if 'notifications' in services:
            await services['notifications'].send_error_alert(
                error_message=str(e),
                component="strategy_management",
                severity="medium"
            )
        
        raise HTTPException(status_code=400, detail=str(e))


@app.post("/strategies/deactivate")
async def deactivate_strategy(strategy_name: str, symbol: str):
    """–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    global trading_engine
    
    if not trading_engine:
        raise HTTPException(status_code=503, detail="Trading engine not ready")
    
    try:
        await trading_engine.deactivate_strategy(strategy_name, symbol)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        if 'notifications' in services:
            await services['notifications'].send_notification({
                'type': 'system_status',
                'title': f'Strategy Deactivated: {strategy_name}',
                'message': f'Strategy {strategy_name} deactivated for {symbol}',
                'priority': 'normal',
                'source': 'strategy_management'
            })
        
        logger.info(f"‚èπÔ∏è Strategy {strategy_name} deactivated for {symbol}")
        return {"message": f"Strategy {strategy_name} deactivated successfully"}
        
    except Exception as e:
        logger.error(f"‚ùå Failed to deactivate strategy: {e}")
        raise HTTPException(status_code=400, detail=str(e))


@app.get("/signals", response_model=List[SignalResponse])
async def get_recent_signals(limit: int = 50):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
    global database
    
    if not database:
        raise HTTPException(status_code=503, detail="Database not ready")
    
    signals = await database.get_recent_signals(limit)
    
    return [
        SignalResponse(
            id=signal.id,
            symbol=signal.symbol,
            strategy_name=signal.strategy_name,
            signal_type=signal.signal_type,
            confidence=signal.confidence,
            price=signal.price,
            timestamp=signal.timestamp.isoformat(),
            ai_analysis=signal.ai_analysis
        )
        for signal in signals
    ]


@app.post("/backtest")
async def run_backtest(request: BacktestRequest, background_tasks: BackgroundTasks):
    """–ó–∞–ø—É—Å–∫ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞"""
    if 'backtest' not in services:
        raise HTTPException(status_code=503, detail="Backtest service not available")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±—ç–∫—Ç–µ—Å—Ç –≤ —Ñ–æ–Ω–µ
    background_tasks.add_task(
        execute_backtest_with_notifications,
        request.strategy_name,
        request.symbol,
        request.start_date,
        request.end_date,
        request.params,
        request.initial_balance
    )
    
    return {"message": "Backtest started", "status": "running"}


@app.get("/backtest/results")
async def get_backtest_results(strategy_name: Optional[str] = None, limit: int = 10):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±—ç–∫—Ç–µ—Å—Ç–æ–≤"""
    global database
    
    if not database:
        raise HTTPException(status_code=503, detail="Database not ready")
    
    results = await database.get_backtest_results(strategy_name, limit)
    return results


@app.post("/manual-signal")
async def send_manual_signal(
    symbol: str,
    signal_type: str,
    message: str = "Manual signal"
):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä—É—á–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
    global trading_engine
    
    if not trading_engine:
        raise HTTPException(status_code=503, detail="Trading engine not ready")
    
    await trading_engine.process_manual_signal(
        symbol=symbol,
        signal_type=signal_type,
        message=message
    )
    
    return {"message": "Manual signal processed"}


# ============================================================================
# –§–û–ù–û–í–´–ï –ó–ê–î–ê–ß–ò (Updated)
# ============================================================================

async def background_market_monitor():
    """
    –§–æ–Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    """
    logger.info("üìä Starting market monitor...")
    
    while background_tasks_running:
        try:
            if trading_engine and trading_engine.is_running:
                await trading_engine.process_market_data_batch()
                
            await asyncio.sleep(1)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
            
        except Exception as e:
            logger.error(f"‚ùå Market monitor error: {e}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            if services.get('notifications'):
                try:
                    await services['notifications'].send_error_alert(
                        error_message=str(e),
                        component="market_monitor",
                        severity="medium"
                    )
                except:
                    pass  # –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
                    
            await asyncio.sleep(5)  # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ


async def background_health_monitor():
    """
    –§–æ–Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
    """
    logger.info("üè• Starting health monitor...")
    
    while background_tasks_running:
        try:
            if trading_engine:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
                if not getattr(trading_engine, 'websocket_connected', True):
                    logger.warning("‚ö†Ô∏è WebSocket disconnected, attempting reconnection...")
                    if hasattr(trading_engine, 'reconnect_websockets'):
                        await trading_engine.reconnect_websockets()
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
                if hasattr(trading_engine, 'check_strategy_health'):
                    inactive_strategies = await trading_engine.check_strategy_health()
                    if inactive_strategies:
                        logger.warning(f"‚ö†Ô∏è Inactive strategies detected: {inactive_strategies}")
            
            await asyncio.sleep(30)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            
        except Exception as e:
            logger.error(f"‚ùå Health monitor error: {e}")
            await asyncio.sleep(10)


async def background_service_monitor():
    """
    –§–æ–Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ä–≤–∏—Å–æ–≤
    """
    logger.info("üîß Starting service monitor...")
    
    while background_tasks_running:
        try:
            if services:
                health_report = await check_all_services_health(services)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
                if health_report['overall_status'] == 'error':
                    logger.warning(f"‚ö†Ô∏è Services health issues detected: {health_report['services']}")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    if services.get('notifications'):
                        await services['notifications'].send_error_alert(
                            error_message="Multiple services experiencing issues",
                            component="service_monitor",
                            severity="high",
                            additional_info={'health_report': health_report}
                        )
            
            await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            
        except Exception as e:
            logger.error(f"‚ùå Service monitor error: {e}")
            await asyncio.sleep(30)


async def execute_backtest_with_notifications(
    strategy_name: str,
    symbol: str,
    start_date: str,
    end_date: str,
    params: Dict,
    initial_balance: float
):
    """
    –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞ –≤ —Ñ–æ–Ω–µ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
    """
    try:
        logger.info(f"üß™ Starting backtest: {strategy_name} on {symbol}")
        
        if 'backtest' not in services:
            raise Exception("Backtest service not available")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ
        if services.get('notifications'):
            await services['notifications'].send_notification({
                'type': 'system_status',
                'title': 'Backtest Started',
                'message': f'Started backtest of {strategy_name} on {symbol}',
                'priority': 'low',
                'source': 'backtest_engine'
            })
        
        backtest_engine = services['backtest']
        results = await backtest_engine.run_backtest(
            strategy_name=strategy_name,
            symbol=symbol,
            start_date=start_date,
            end_date=end_date,
            strategy_params=params,
            initial_balance=initial_balance
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if database:
            await database.save_backtest_result(results)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        if services.get('notifications'):
            await services['notifications'].send_notification({
                'type': 'custom',
                'title': 'Backtest Completed',
                'message': f'Backtest of {strategy_name} completed\nReturn: {results.get("total_return", 0):.2%}\nTrades: {results.get("total_trades", 0)}',
                'priority': 'normal',
                'source': 'backtest_engine'
            })
        
        logger.info(f"‚úÖ Backtest completed: {strategy_name}")
        
    except Exception as e:
        logger.error(f"‚ùå Backtest failed: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        if services.get('notifications'):
            await services['notifications'].send_error_alert(
                error_message=str(e),
                component="backtest_engine",
                severity="medium",
                additional_info={'strategy': strategy_name, 'symbol': symbol}
            )


# ============================================================================
# GRACEFUL SHUTDOWN (Unchanged)
# ============================================================================

def signal_handler(sig, frame):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
    """
    logger.info(f"üì° Received signal {sig}, initiating graceful shutdown...")
    sys.exit(0)


# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
signal.signal(signal.SIGINT, signal_handler)
signal.signal(signal.SIGTERM, signal_handler)


# ============================================================================
# MAIN ENTRY POINT (Unchanged)
# ============================================================================

if __name__ == "__main__":
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    if settings.ENVIRONMENT == "development":
        uvicorn.run(
            "app.main:app",
            host="0.0.0.0",
            port=8000,
            reload=True,
            log_level="debug"
        )
    else:
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω–∞ (Render)
        uvicorn.run(
            "app.main:app",
            host="0.0.0.0",
            port=int(settings.PORT),
            workers=1,  # –û–¥–∏–Ω–æ—á–Ω—ã–π –≤–æ—Ä–∫–µ—Ä –¥–ª—è WebSocket
            log_level="info",
            access_log=True
        )
