"""
Trading Bot Main Application
–ì–æ—Ç–æ–≤ –∫ –¥–µ–ø–ª–æ—é –Ω–∞ Render —Å –ø–æ–ª–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π
"""

import asyncio
import signal
import sys
import logging
from datetime import datetime
from contextlib import asynccontextmanager
from typing import Dict, List, Optional

from fastapi import FastAPI, HTTPException, BackgroundTasks
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import uvicorn
import sqlite3
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker

# –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∏–º–ø–æ—Ä—Ç—ã (—Å–æ–∑–¥–∞–¥–∏–º –¥–∞–ª–µ–µ)
from app.config.settings import Settings, get_settings
from core.trading_engine import TradingEngine
from core.bybit_client import BybitLinearClient
from core.data_manager import DataManager
from services.openai_service import OpenAIService
from services.telegram_service import TelegramService
from services.backtest_engine import BacktestEngine
from services.notification_service import NotificationService
from strategies.strategy_registry import StrategyRegistry
from data.database import Database, init_database
from data.models import Signal, BacktestResult, Base
from utils.logger import setup_logger


# ============================================================================
# –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï
# ============================================================================

settings = get_settings()
logger = setup_logger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
trading_engine: Optional[TradingEngine] = None
database: Optional[Database] = None
background_tasks_running = False


# ============================================================================
# PYDANTIC –ú–û–î–ï–õ–ò –î–õ–Ø API
# ============================================================================

class StrategyConfig(BaseModel):
    name: str
    symbol: str
    params: Dict
    timeframe: str = "1m"
    active: bool = True

class BacktestRequest(BaseModel):
    strategy_name: str
    symbol: str
    start_date: str
    end_date: str
    params: Dict
    initial_balance: float = 10000.0

class SystemStatus(BaseModel):
    status: str
    uptime: str
    active_strategies: int
    active_symbols: List[str]
    websocket_connected: bool
    last_signal_time: Optional[str]

class SignalResponse(BaseModel):
    id: int
    symbol: str
    strategy_name: str
    signal_type: str
    confidence: float
    price: float
    timestamp: str
    ai_analysis: Optional[str]


# ============================================================================
# LIFECYCLE MANAGEMENT
# ============================================================================

@asynccontextmanager
async def lifespan(app: FastAPI):
    """
    –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    """
    # STARTUP
    logger.info("üöÄ Starting Trading Bot...")
    
    try:
        await startup_sequence()
        logger.info("‚úÖ Trading Bot started successfully")
        yield
    except Exception as e:
        logger.error(f"‚ùå Failed to start Trading Bot: {e}")
        raise
    finally:
        # SHUTDOWN
        logger.info("üîÑ Shutting down Trading Bot...")
        await shutdown_sequence()
        logger.info("‚úÖ Trading Bot shut down gracefully")


async def startup_sequence():
    """
    –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    """
    global trading_engine, database, background_tasks_running
    
    # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    logger.info("üì¶ Initializing database...")
    database = Database()
    await database.init()
    
    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π
    logger.info("üîë Validating API keys...")
    if not all([settings.BYBIT_API_KEY, settings.BYBIT_API_SECRET]):
        raise ValueError("Bybit API keys not configured")
    
    # 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞
    logger.info("ü§ñ Initializing Trading Engine...")
    trading_engine = TradingEngine(
        database=database,
        settings=settings
    )
    
    # 4. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bybit
    logger.info("üîå Connecting to Bybit...")
    await trading_engine.connect()
    
    # 5. –ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
    logger.info("üìä Loading active strategies...")
    await trading_engine.load_active_strategies()
    
    # 6. –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
    logger.info("‚ö° Starting background tasks...")
    background_tasks_running = True
    asyncio.create_task(background_market_monitor())
    asyncio.create_task(background_health_monitor())
    
    # 7. –ó–∞–ø—É—Å–∫ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    logger.info("üåê Starting WebSocket connections...")
    await trading_engine.start_websockets()


async def shutdown_sequence():
    """
    –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
    """
    global trading_engine, database, background_tasks_running
    
    background_tasks_running = False
    
    if trading_engine:
        logger.info("üîå Disconnecting from Bybit...")
        await trading_engine.disconnect()
    
    if database:
        logger.info("üì¶ Closing database connections...")
        await database.close()


# ============================================================================
# FASTAPI APPLICATION
# ============================================================================

app = FastAPI(
    title="Advanced Trading Bot",
    description="AI-Powered Multi-Strategy Trading Bot for Bybit USDT Perpetuals",
    version="1.0.0",
    lifespan=lifespan
)

# CORS middleware –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


# ============================================================================
# API ENDPOINTS
# ============================================================================

@app.get("/", response_model=dict)
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π endpoint"""
    return {
        "service": "Advanced Trading Bot",
        "version": "1.0.0",
        "status": "running",
        "docs": "/docs"
    }


@app.get("/health", response_model=SystemStatus)
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
    global trading_engine
    
    if not trading_engine:
        raise HTTPException(status_code=503, detail="Trading engine not initialized")
    
    status = await trading_engine.get_system_status()
    
    return SystemStatus(
        status="healthy" if trading_engine.is_running else "unhealthy",
        uptime=str(datetime.now() - trading_engine.start_time),
        active_strategies=len(trading_engine.active_strategies),
        active_symbols=list(trading_engine.active_symbols),
        websocket_connected=trading_engine.websocket_connected,
        last_signal_time=status.get("last_signal_time")
    )


@app.get("/strategies", response_model=List[str])
async def list_available_strategies():
    """–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
    return StrategyRegistry.list_strategies()


@app.post("/strategies/activate")
async def activate_strategy(config: StrategyConfig):
    """–ê–∫—Ç–∏–≤–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    global trading_engine
    
    if not trading_engine:
        raise HTTPException(status_code=503, detail="Trading engine not ready")
    
    try:
        await trading_engine.activate_strategy(
            name=config.name,
            symbol=config.symbol,
            params=config.params,
            timeframe=config.timeframe
        )
        
        logger.info(f"‚úÖ Strategy {config.name} activated for {config.symbol}")
        return {"message": f"Strategy {config.name} activated successfully"}
        
    except Exception as e:
        logger.error(f"‚ùå Failed to activate strategy: {e}")
        raise HTTPException(status_code=400, detail=str(e))


@app.post("/strategies/deactivate")
async def deactivate_strategy(strategy_name: str, symbol: str):
    """–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    global trading_engine
    
    if not trading_engine:
        raise HTTPException(status_code=503, detail="Trading engine not ready")
    
    try:
        await trading_engine.deactivate_strategy(strategy_name, symbol)
        
        logger.info(f"‚èπÔ∏è Strategy {strategy_name} deactivated for {symbol}")
        return {"message": f"Strategy {strategy_name} deactivated successfully"}
        
    except Exception as e:
        logger.error(f"‚ùå Failed to deactivate strategy: {e}")
        raise HTTPException(status_code=400, detail=str(e))


@app.get("/signals", response_model=List[SignalResponse])
async def get_recent_signals(limit: int = 50):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
    global database
    
    if not database:
        raise HTTPException(status_code=503, detail="Database not ready")
    
    signals = await database.get_recent_signals(limit)
    
    return [
        SignalResponse(
            id=signal.id,
            symbol=signal.symbol,
            strategy_name=signal.strategy_name,
            signal_type=signal.signal_type,
            confidence=signal.confidence,
            price=signal.price,
            timestamp=signal.timestamp.isoformat(),
            ai_analysis=signal.ai_analysis
        )
        for signal in signals
    ]


@app.post("/backtest")
async def run_backtest(request: BacktestRequest, background_tasks: BackgroundTasks):
    """–ó–∞–ø—É—Å–∫ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞"""
    global trading_engine
    
    if not trading_engine:
        raise HTTPException(status_code=503, detail="Trading engine not ready")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±—ç–∫—Ç–µ—Å—Ç –≤ —Ñ–æ–Ω–µ
    background_tasks.add_task(
        execute_backtest,
        request.strategy_name,
        request.symbol,
        request.start_date,
        request.end_date,
        request.params,
        request.initial_balance
    )
    
    return {"message": "Backtest started", "status": "running"}


@app.get("/backtest/results")
async def get_backtest_results(strategy_name: Optional[str] = None, limit: int = 10):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±—ç–∫—Ç–µ—Å—Ç–æ–≤"""
    global database
    
    if not database:
        raise HTTPException(status_code=503, detail="Database not ready")
    
    results = await database.get_backtest_results(strategy_name, limit)
    return results


@app.post("/manual-signal")
async def send_manual_signal(
    symbol: str,
    signal_type: str,
    message: str = "Manual signal"
):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä—É—á–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
    global trading_engine
    
    if not trading_engine:
        raise HTTPException(status_code=503, detail="Trading engine not ready")
    
    await trading_engine.process_manual_signal(
        symbol=symbol,
        signal_type=signal_type,
        message=message
    )
    
    return {"message": "Manual signal processed"}


# ============================================================================
# –§–û–ù–û–í–´–ï –ó–ê–î–ê–ß–ò
# ============================================================================

async def background_market_monitor():
    """
    –§–æ–Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    """
    logger.info("üìä Starting market monitor...")
    
    while background_tasks_running:
        try:
            if trading_engine and trading_engine.is_running:
                await trading_engine.process_market_data_batch()
                
            await asyncio.sleep(1)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
            
        except Exception as e:
            logger.error(f"‚ùå Market monitor error: {e}")
            await asyncio.sleep(5)  # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ


async def background_health_monitor():
    """
    –§–æ–Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
    """
    logger.info("üè• Starting health monitor...")
    
    while background_tasks_running:
        try:
            if trading_engine:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
                if not trading_engine.websocket_connected:
                    logger.warning("‚ö†Ô∏è WebSocket disconnected, attempting reconnection...")
                    await trading_engine.reconnect_websockets()
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
                inactive_strategies = await trading_engine.check_strategy_health()
                if inactive_strategies:
                    logger.warning(f"‚ö†Ô∏è Inactive strategies detected: {inactive_strategies}")
            
            await asyncio.sleep(30)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            
        except Exception as e:
            logger.error(f"‚ùå Health monitor error: {e}")
            await asyncio.sleep(10)


async def execute_backtest(
    strategy_name: str,
    symbol: str,
    start_date: str,
    end_date: str,
    params: Dict,
    initial_balance: float
):
    """
    –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞ –≤ —Ñ–æ–Ω–µ
    """
    try:
        logger.info(f"üß™ Starting backtest: {strategy_name} on {symbol}")
        
        backtest_engine = BacktestEngine(database)
        results = await backtest_engine.run_backtest(
            strategy_name=strategy_name,
            symbol=symbol,
            start_date=start_date,
            end_date=end_date,
            params=params,
            initial_balance=initial_balance
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        await database.save_backtest_result(results)
        
        logger.info(f"‚úÖ Backtest completed: {strategy_name}")
        
    except Exception as e:
        logger.error(f"‚ùå Backtest failed: {e}")


# ============================================================================
# GRACEFUL SHUTDOWN
# ============================================================================

def signal_handler(sig, frame):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
    """
    logger.info(f"üì° Received signal {sig}, initiating graceful shutdown...")
    sys.exit(0)


# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
signal.signal(signal.SIGINT, signal_handler)
signal.signal(signal.SIGTERM, signal_handler)


# ============================================================================
# MAIN ENTRY POINT
# ============================================================================

if __name__ == "__main__":
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    if settings.ENVIRONMENT == "development":
        uvicorn.run(
            "app.main:app",
            host="0.0.0.0",
            port=8000,
            reload=True,
            log_level="debug"
        )
    else:
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω–∞ (Render)
        uvicorn.run(
            "app.main:app",
            host="0.0.0.0",
            port=int(settings.PORT),
            workers=1,  # –û–¥–∏–Ω–æ—á–Ω—ã–π –≤–æ—Ä–∫–µ—Ä –¥–ª—è WebSocket
            log_level="info",
            access_log=True
        )
