"""
Trading Bot Bybit API Client
HTTP –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Bybit REST API
"""

import asyncio
import time
import hmac
import hashlib
import json
from typing import Dict, Any, Optional, List, Union
from dataclasses import dataclass
from enum import Enum
import aiohttp
from urllib.parse import urlencode

from utils.logger import setup_logger
from utils.helpers import (
    get_current_timestamp, safe_float, safe_int,
    generate_signature, retry_async, Timer
)
from app.config.settings import Settings, get_settings


# ============================================================================
# CONSTANTS AND ENUMS
# ============================================================================

# Bybit API endpoints
BYBIT_MAINNET_BASE_URL = "https://api.bybit.com"
BYBIT_TESTNET_BASE_URL = "https://api-testnet.bybit.com"

# Rate limits (requests per minute)
BYBIT_RATE_LIMITS = {
    'default': 120,  # 120 requests per minute
    'kline': 600,    # 600 requests per minute for kline data
    'orderbook': 600, # 600 requests per minute for orderbook
    'account': 120   # 120 requests per minute for account info
}

# API categories
API_CATEGORIES = {
    'linear': 'linear',      # USDT Perpetual
    'inverse': 'inverse',    # Inverse Perpetual
    'spot': 'spot',         # Spot Trading
    'option': 'option'      # Options
}


class OrderSide(str, Enum):
    """Order sides"""
    BUY = "Buy"
    SELL = "Sell"


class OrderType(str, Enum):
    """Order types"""
    MARKET = "Market"
    LIMIT = "Limit"
    LIMIT_MAKER = "PostOnly"


class TimeInForce(str, Enum):
    """Time in force"""
    GTC = "GTC"  # Good Till Cancel
    IOC = "IOC"  # Immediate or Cancel
    FOK = "FOK"  # Fill or Kill
    POST_ONLY = "PostOnly"


@dataclass
class BybitAPIError(Exception):
    """Bybit API error"""
    ret_code: int
    ret_msg: str
    ext_code: Optional[str] = None
    ext_info: Optional[str] = None
    
    def __str__(self):
        return f"Bybit API Error {self.ret_code}: {self.ret_msg}"


# ============================================================================
# BYBIT LINEAR CLIENT
# ============================================================================

class BybitLinearClient:
    """
    –ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Bybit Linear (USDT Perpetual) API
    
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
    - –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏—è–º–∏ –∏ –æ—Ä–¥–µ—Ä–∞–º–∏
    - –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π retry –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
    - Rate limiting
    """
    
    def __init__(self, settings: Optional[Settings] = None):
        self.settings = settings or get_settings()
        self.logger = setup_logger(f"{__name__}.BybitLinearClient")
        
        # API credentials
        self.api_key = self.settings.BYBIT_API_KEY
        self.api_secret = self.settings.BYBIT_API_SECRET
        
        # Connection settings
        self.testnet = self.settings.BYBIT_TESTNET
        self.demo = self.settings.BYBIT_DEMO
        self.base_url = BYBIT_TESTNET_BASE_URL if self.testnet else BYBIT_MAINNET_BASE_URL
        
        # Request settings
        self.recv_window = self.settings.BYBIT_RECV_WINDOW
        self.timeout = self.settings.BYBIT_TIMEOUT
        self.max_retries = self.settings.BYBIT_MAX_RETRIES
        self.retry_delay = self.settings.BYBIT_RETRY_DELAY
        
        # Rate limiting
        self._rate_limiter = {}
        self._last_request_time = {}
        
        # Session
        self._session: Optional[aiohttp.ClientSession] = None
        
        # Statistics
        self.stats = {
            'total_requests': 0,
            'successful_requests': 0,
            'failed_requests': 0,
            'rate_limited_requests': 0,
            'retry_attempts': 0
        }
        
        self.logger.info(f"üîå Bybit client initialized (testnet: {self.testnet}, demo: {self.demo})")
    
    async def __aenter__(self):
        """Async context manager entry"""
        await self._create_session()
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """Async context manager exit"""
        await self.close()
    
    async def _create_session(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ HTTP —Å–µ—Å—Å–∏–∏"""
        if self._session is None:
            timeout = aiohttp.ClientTimeout(total=self.timeout)
            connector = aiohttp.TCPConnector(
                limit=20,  # Max connections
                ttl_dns_cache=300,  # DNS cache TTL
                use_dns_cache=True
            )
            
            self._session = aiohttp.ClientSession(
                timeout=timeout,
                connector=connector,
                headers={
                    'Content-Type': 'application/json',
                    'User-Agent': 'TradingBot/1.0.0'
                }
            )
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏"""
        if self._session:
            await self._session.close()
            self._session = None
            self.logger.info("üîå Bybit client session closed")
    
    def _generate_signature(self, params: Dict[str, Any], timestamp: int) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        try:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ –∫–ª—é—á—É
            sorted_params = dict(sorted(params.items()))
            
            # –î–æ–±–∞–≤–ª—è–µ–º timestamp –∏ recv_window
            sorted_params['timestamp'] = timestamp
            sorted_params['recv_window'] = self.recv_window
            
            # –°–æ–∑–¥–∞–µ–º query string
            query_string = urlencode(sorted_params)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HMAC signature
            signature = hmac.new(
                self.api_secret.encode('utf-8'),
                query_string.encode('utf-8'),
                hashlib.sha256
            ).hexdigest()
            
            return signature
            
        except Exception as e:
            self.logger.error(f"‚ùå Failed to generate signature: {e}")
            raise
    
    def _check_rate_limit(self, endpoint_type: str = 'default') -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ rate limit"""
        try:
            limit = BYBIT_RATE_LIMITS.get(endpoint_type, BYBIT_RATE_LIMITS['default'])
            current_time = time.time()
            minute_window = int(current_time // 60)
            
            if endpoint_type not in self._rate_limiter:
                self._rate_limiter[endpoint_type] = {}
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–∫–Ω–∞
            keys_to_remove = [k for k in self._rate_limiter[endpoint_type].keys() if k < minute_window - 1]
            for key in keys_to_remove:
                del self._rate_limiter[endpoint_type][key]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ –æ–∫–Ω–æ
            current_count = self._rate_limiter[endpoint_type].get(minute_window, 0)
            
            if current_count >= limit:
                self.stats['rate_limited_requests'] += 1
                return False
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
            self._rate_limiter[endpoint_type][minute_window] = current_count + 1
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå Rate limit check failed: {e}")
            return True  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å
    
    async def _wait_for_rate_limit(self, endpoint_type: str = 'default'):
        """–û–∂–∏–¥–∞–Ω–∏–µ —Å–±—Ä–æ—Å–∞ rate limit"""
        while not self._check_rate_limit(endpoint_type):
            await asyncio.sleep(1)  # –ñ–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É
    
    async def _make_request(
        self, 
        method: str, 
        endpoint: str, 
        params: Optional[Dict[str, Any]] = None,
        auth_required: bool = False,
        endpoint_type: str = 'default'
    ) -> Dict[str, Any]:
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ HTTP –∑–∞–ø—Ä–æ—Å–∞ –∫ Bybit API
        
        Args:
            method: HTTP –º–µ—Ç–æ–¥ (GET, POST, etc.)
            endpoint: API endpoint
            params: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
            auth_required: –¢—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
            endpoint_type: –¢–∏–ø endpoint –¥–ª—è rate limiting
            
        Returns:
            –û—Ç–≤–µ—Ç API –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è
        """
        try:
            if not self._session:
                await self._create_session()
            
            self.stats['total_requests'] += 1
            
            # –û–∂–∏–¥–∞–µ–º rate limit
            await self._wait_for_rate_limit(endpoint_type)
            
            url = f"{self.base_url}{endpoint}"
            params = params or {}
            headers = {}
            
            # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
            if auth_required:
                timestamp = get_current_timestamp()
                signature = self._generate_signature(params, timestamp)
                
                headers.update({
                    'X-BAPI-API-KEY': self.api_key,
                    'X-BAPI-SIGN': signature,
                    'X-BAPI-TIMESTAMP': str(timestamp),
                    'X-BAPI-RECV-WINDOW': str(self.recv_window)
                })
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —Å —Ç–∞–π–º–µ—Ä–æ–º
            with Timer(f"Bybit API {method} {endpoint}"):
                if method.upper() == 'GET':
                    async with self._session.get(url, params=params, headers=headers) as response:
                        response_data = await self._handle_response(response)
                
                elif method.upper() == 'POST':
                    async with self._session.post(url, json=params, headers=headers) as response:
                        response_data = await self._handle_response(response)
                
                else:
                    raise ValueError(f"Unsupported HTTP method: {method}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –æ—à–∏–±–∫–∏
            self._validate_response(response_data)
            
            self.stats['successful_requests'] += 1
            
            if self.settings.LOG_RESPONSES:
                self.logger.debug(f"üì§ API Response: {response_data}")
            
            return response_data
            
        except Exception as e:
            self.stats['failed_requests'] += 1
            self.logger.error(f"‚ùå API request failed: {method} {endpoint} - {e}")
            raise
    
    async def _handle_response(self, response: aiohttp.ClientResponse) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ HTTP –æ—Ç–≤–µ—Ç–∞"""
        try:
            response_text = await response.text()
            
            if response.content_type == 'application/json':
                response_data = json.loads(response_text)
            else:
                response_data = {'data': response_text}
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–¥
            response_data['_status_code'] = response.status
            
            return response_data
            
        except Exception as e:
            self.logger.error(f"‚ùå Failed to handle response: {e}")
            raise
    
    def _validate_response(self, response_data: Dict[str, Any]):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ API"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º HTTP —Å—Ç–∞—Ç—É—Å
            status_code = response_data.get('_status_code', 200)
            if status_code >= 400:
                raise BybitAPIError(
                    ret_code=status_code,
                    ret_msg=f"HTTP Error {status_code}"
                )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç Bybit API
            ret_code = response_data.get('retCode', 0)
            if ret_code != 0:
                raise BybitAPIError(
                    ret_code=ret_code,
                    ret_msg=response_data.get('retMsg', 'Unknown error'),
                    ext_code=response_data.get('retExtInfo', {}).get('code'),
                    ext_info=response_data.get('retExtInfo', {}).get('msg')
                )
            
        except BybitAPIError:
            raise
        except Exception as e:
            self.logger.error(f"‚ùå Response validation failed: {e}")
            raise BybitAPIError(ret_code=-1, ret_msg=f"Validation error: {str(e)}")
    
    # ========================================================================
    # MARKET DATA ENDPOINTS
    # ========================================================================
    
    async def get_kline(
        self,
        symbol: str,
        interval: str,
        start: Optional[int] = None,
        end: Optional[int] = None,
        limit: int = 200,
        category: str = 'linear'
    ) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π (kline)
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'BTCUSDT')
            interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª ('1m', '5m', '15m', '30m', '1h', '4h', '1d')
            start: –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ (timestamp –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö)
            end: –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è (timestamp –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö)
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 200)
            category: –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ ('linear' –¥–ª—è USDT Perpetual)
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–≤–µ—á–µ–π
        """
        params = {
            'category': category,
            'symbol': symbol,
            'interval': interval,
            'limit': min(limit, 1000)  # Bybit –º–∞–∫—Å–∏–º—É–º 1000
        }
        
        if start:
            params['start'] = start
        if end:
            params['end'] = end
        
        return await self._make_request(
            'GET', 
            '/v5/market/kline',
            params=params,
            endpoint_type='kline'
        )
    
    async def get_orderbook(
        self,
        symbol: str,
        limit: int = 50,
        category: str = 'linear'
    ) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–Ω–∏–≥–∏ –æ—Ä–¥–µ—Ä–æ–≤
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            limit: –ì–ª—É–±–∏–Ω–∞ –∫–Ω–∏–≥–∏ (1, 50, 200)
            category: –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–Ω–∏–≥–∏ –æ—Ä–¥–µ—Ä–æ–≤
        """
        params = {
            'category': category,
            'symbol': symbol,
            'limit': limit
        }
        
        return await self._make_request(
            'GET',
            '/v5/market/orderbook', 
            params=params,
            endpoint_type='orderbook'
        )
    
    async def get_tickers(
        self,
        symbol: Optional[str] = None,
        category: str = 'linear'
    ) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –µ—Å–ª–∏ None - –≤—Å–µ –ø–∞—Ä—ã)
            category: –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —Ç–∏–∫–µ—Ä–æ–≤
        """
        params = {
            'category': category
        }
        
        if symbol:
            params['symbol'] = symbol
        
        return await self._make_request(
            'GET',
            '/v5/market/tickers',
            params=params
        )
    
    async def get_instruments_info(
        self,
        symbol: Optional[str] = None,
        category: str = 'linear'
    ) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ—Ä–≥–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            category: –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö
        """
        params = {
            'category': category
        }
        
        if symbol:
            params['symbol'] = symbol
        
        return await self._make_request(
            'GET',
            '/v5/market/instruments-info',
            params=params
        )
    
    # ========================================================================
    # ACCOUNT ENDPOINTS
    # ========================================================================
    
    async def get_account_info(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
        """
        return await self._make_request(
            'GET',
            '/v5/account/info',
            auth_required=True,
            endpoint_type='account'
        )
    
    async def get_wallet_balance(self, account_type: str = 'UNIFIED') -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∫–æ—à–µ–ª—å–∫–∞
        
        Args:
            account_type: –¢–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞ ('UNIFIED', 'CONTRACT')
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –±–∞–ª–∞–Ω—Å–æ–º
        """
        params = {
            'accountType': account_type
        }
        
        return await self._make_request(
            'GET',
            '/v5/account/wallet-balance',
            params=params,
            auth_required=True,
            endpoint_type='account'
        )
    
    async def get_positions(
        self,
        symbol: Optional[str] = None,
        category: str = 'linear'
    ) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–∑–∏—Ü–∏—è—Ö
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            category: –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø–æ–∑–∏—Ü–∏—è—Ö
        """
        params = {
            'category': category
        }
        
        if symbol:
            params['symbol'] = symbol
        
        return await self._make_request(
            'GET',
            '/v5/position/list',
            params=params,
            auth_required=True,
            endpoint_type='account'
        )
    
    # ========================================================================
    # ORDER MANAGEMENT ENDPOINTS
    # ========================================================================
    
    async def place_order(
        self,
        symbol: str,
        side: Union[str, OrderSide],
        order_type: Union[str, OrderType],
        qty: str,
        price: Optional[str] = None,
        time_in_force: Union[str, TimeInForce] = TimeInForce.GTC,
        reduce_only: bool = False,
        close_on_trigger: bool = False,
        category: str = 'linear'
    ) -> Dict[str, Any]:
        """
        –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            side: –°—Ç–æ—Ä–æ–Ω–∞ –æ—Ä–¥–µ—Ä–∞ (Buy/Sell)
            order_type: –¢–∏–ø –æ—Ä–¥–µ—Ä–∞ (Market/Limit)
            qty: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
            price: –¶–µ–Ω–∞ (–¥–ª—è –ª–∏–º–∏—Ç–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤)
            time_in_force: –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –æ—Ä–¥–µ—Ä–∞
            reduce_only: –¢–æ–ª—å–∫–æ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏
            close_on_trigger: –ó–∞–∫—Ä—ã—Ç—å –ø—Ä–∏ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–∏
            category: –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–∞–∑–º–µ—â–µ–Ω–Ω–æ–º –æ—Ä–¥–µ—Ä–µ
        """
        params = {
            'category': category,
            'symbol': symbol,
            'side': side.value if isinstance(side, OrderSide) else side,
            'orderType': order_type.value if isinstance(order_type, OrderType) else order_type,
            'qty': str(qty),
            'timeInForce': time_in_force.value if isinstance(time_in_force, TimeInForce) else time_in_force
        }
        
        if price:
            params['price'] = str(price)
        
        if reduce_only:
            params['reduceOnly'] = True
            
        if close_on_trigger:
            params['closeOnTrigger'] = True
        
        return await self._make_request(
            'POST',
            '/v5/order/create',
            params=params,
            auth_required=True
        )
    
    async def cancel_order(
        self,
        symbol: str,
        order_id: Optional[str] = None,
        order_link_id: Optional[str] = None,
        category: str = 'linear'
    ) -> Dict[str, Any]:
        """
        –û—Ç–º–µ–Ω–∞ –æ—Ä–¥–µ—Ä–∞
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            order_id: ID –æ—Ä–¥–µ—Ä–∞ (–æ–¥–∏–Ω –∏–∑ order_id –∏–ª–∏ order_link_id –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω)
            order_link_id: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π ID –æ—Ä–¥–µ—Ä–∞
            category: –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ–º –æ—Ä–¥–µ—Ä–µ
        """
        if not order_id and not order_link_id:
            raise ValueError("Either order_id or order_link_id must be provided")
        
        params = {
            'category': category,
            'symbol': symbol
        }
        
        if order_id:
            params['orderId'] = order_id
        if order_link_id:
            params['orderLinkId'] = order_link_id
        
        return await self._make_request(
            'POST',
            '/v5/order/cancel',
            params=params,
            auth_required=True
        )
    
    async def get_open_orders(
        self,
        symbol: Optional[str] = None,
        category: str = 'linear',
        limit: int = 50
    ) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            category: –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ä–¥–µ—Ä–æ–≤
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –æ—Ä–¥–µ—Ä–∞–º–∏
        """
        params = {
            'category': category,
            'limit': limit
        }
        
        if symbol:
            params['symbol'] = symbol
        
        return await self._make_request(
            'GET',
            '/v5/order/realtime',
            params=params,
            auth_required=True
        )
    
    async def get_order_history(
        self,
        symbol: Optional[str] = None,
        category: str = 'linear',
        limit: int = 50
    ) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ä–¥–µ—Ä–æ–≤
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            category: –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ä–¥–µ—Ä–æ–≤
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏—Å—Ç–æ—Ä–∏–µ–π –æ—Ä–¥–µ—Ä–æ–≤
        """
        params = {
            'category': category,
            'limit': limit
        }
        
        if symbol:
            params['symbol'] = symbol
        
        return await self._make_request(
            'GET',
            '/v5/order/history',
            params=params,
            auth_required=True
        )
    
    # ========================================================================
    # UTILITY METHODS
    # ========================================================================
    
    async def test_connection(self) -> bool:
        """
        –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API
        
        Returns:
            True –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            await self.get_instruments_info(symbol='BTCUSDT')
            self.logger.info("‚úÖ Bybit API connection test successful")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå Bybit API connection test failed: {e}")
            return False
    
    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞"""
        total = self.stats['total_requests']
        if total == 0:
            success_rate = 0
        else:
            success_rate = (self.stats['successful_requests'] / total) * 100
        
        return {
            **self.stats,
            'success_rate_pct': round(success_rate, 2),
            'testnet_mode': self.testnet,
            'demo_mode': self.demo
        }
    
    def reset_stats(self):
        """–°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        self.stats = {
            'total_requests': 0,
            'successful_requests': 0,
            'failed_requests': 0,
            'rate_limited_requests': 0,
            'retry_attempts': 0
        }
        self.logger.info("üìä Client statistics reset")


# ============================================================================
# CONVENIENCE FUNCTIONS
# ============================================================================

async def create_bybit_client(settings: Optional[Settings] = None) -> BybitLinearClient:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Bybit –∫–ª–∏–µ–Ω—Ç–∞"""
    client = BybitLinearClient(settings)
    await client._create_session()
    return client


# ============================================================================
# EXAMPLE USAGE
# ============================================================================

if __name__ == "__main__":
    async def test_bybit_client():
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Bybit –∫–ª–∏–µ–Ω—Ç–∞"""
        print("üß™ Testing Bybit Linear Client")
        print("=" * 50)
        
        try:
            settings = get_settings()
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
            async with BybitLinearClient(settings) as client:
                print(f"‚úÖ Client created: testnet={client.testnet}")
                
                # –¢–µ—Å—Ç 1: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                print("\nüìù Test 1: Testing connection...")
                connection_ok = await client.test_connection()
                print(f"‚úÖ Connection test: {'PASSED' if connection_ok else 'FAILED'}")
                
                # –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö
                print("\nüìù Test 2: Getting instruments info...")
                instruments = await client.get_instruments_info(symbol='BTCUSDT')
                if 'result' in instruments and 'list' in instruments['result']:
                    print(f"‚úÖ Instruments info: {len(instruments['result']['list'])} instruments")
                else:
                    print("‚ùå No instruments data")
                
                # –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–∫–µ—Ä–æ–≤
                print("\nüìù Test 3: Getting tickers...")
                tickers = await client.get_tickers(symbol='BTCUSDT')
                if 'result' in tickers and 'list' in tickers['result']:
                    ticker_data = tickers['result']['list'][0]
                    print(f"‚úÖ BTCUSDT ticker: {ticker_data.get('lastPrice', 'N/A')}")
                else:
                    print("‚ùå No ticker data")
                
                # –¢–µ—Å—Ç 4: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π
                print("\nüìù Test 4: Getting kline data...")
                klines = await client.get_kline(
                    symbol='BTCUSDT',
                    interval='1h',
                    limit=10
                )
                if 'result' in klines and 'list' in klines['result']:
                    candles_count = len(klines['result']['list'])
                    print(f"‚úÖ Kline data: {candles_count} candles")
                    if candles_count > 0:
                        latest_candle = klines['result']['list'][0]
                        print(f"   Latest candle: {latest_candle}")
                else:
                    print("‚ùå No kline data")
                
                # –¢–µ—Å—Ç 5: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞
                print("\nüìù Test 5: Client statistics...")
                stats = client.get_stats()
                print(f"‚úÖ Client stats: {stats}")
                
                print("\n‚úÖ All Bybit client tests completed!")
                
        except Exception as e:
            print(f"‚ùå Test failed: {e}")
            import traceback
            traceback.print_exc()
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    asyncio.run(test_bybit_client())
