"""
Trading Bot Data Manager
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏, –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
from datetime import datetime, timezone, timedelta
from typing import Dict, List, Optional, Any, Callable, Union, Set
import time
from collections import defaultdict, deque
from dataclasses import dataclass, field
import threading
from concurrent.futures import ThreadPoolExecutor
import weakref

from utils.logger import setup_logger
from utils.helpers import (
    get_current_timestamp, timestamp_to_datetime, parse_timeframe_to_milliseconds,
    safe_float, validate_symbol, validate_timeframe, Timer
)
from data.historical_data import CandleData, HistoricalDataManager
from data.database import Database
from app.config.settings import Settings, get_settings


# ============================================================================
# TYPES AND CONSTANTS
# ============================================================================

logger = setup_logger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–µ—à–∞
DEFAULT_CACHE_TTL = 60  # —Å–µ–∫—É–Ω–¥—ã
MAX_CACHE_SIZE = 1000  # –º–∞–∫—Å–∏–º—É–º –∑–∞–ø–∏—Å–µ–π –≤ –∫–µ—à–µ
MAX_CANDLES_PER_SYMBOL = 2000  # –º–∞–∫—Å–∏–º—É–º —Å–≤–µ—á–µ–π –Ω–∞ —Å–∏–º–≤–æ–ª –≤ –ø–∞–º—è—Ç–∏

# –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
UPDATE_INTERVALS = {
    '1m': 60,      # 1 –º–∏–Ω—É—Ç–∞
    '5m': 300,     # 5 –º–∏–Ω—É—Ç  
    '15m': 900,    # 15 –º–∏–Ω—É—Ç
    '30m': 1800,   # 30 –º–∏–Ω—É—Ç
    '1h': 3600,    # 1 —á–∞—Å
    '4h': 14400,   # 4 —á–∞—Å–∞
    '1d': 86400,   # 1 –¥–µ–Ω—å
}


@dataclass
class MarketDataCache:
    """–ö–µ—à —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    data: List[CandleData] = field(default_factory=list)
    last_updated: int = 0
    last_price: float = 0.0
    volume_24h: float = 0.0
    price_change_24h: float = 0.0
    subscribers: Set[str] = field(default_factory=set)
    
    def is_expired(self, ttl_seconds: int = DEFAULT_CACHE_TTL) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è –∫–µ—à–∞"""
        return (get_current_timestamp() - self.last_updated) > (ttl_seconds * 1000)
    
    def add_subscriber(self, subscriber_id: str) -> None:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        self.subscribers.add(subscriber_id)
    
    def remove_subscriber(self, subscriber_id: str) -> None:
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞"""
        self.subscribers.discard(subscriber_id)
    
    def get_latest_candle(self) -> Optional[CandleData]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–∏"""
        return self.data[-1] if self.data else None
    
    def get_candles_slice(self, count: int = 100) -> List[CandleData]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ä–µ–∑–∞ —Å–≤–µ—á–µ–π"""
        return self.data[-count:] if self.data else []


@dataclass
class DataSubscription:
    """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –¥–∞–Ω–Ω—ã–µ"""
    subscriber_id: str
    symbol: str
    timeframe: str
    callback: Callable[[List[CandleData]], None]
    last_notified: int = 0
    active: bool = True


# ============================================================================
# DATA MANAGER CLASS
# ============================================================================

class DataManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    
    –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
    - –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏
    - –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
    """
    
    def __init__(
        self,
        settings: Optional[Settings] = None,
        database: Optional[Database] = None,
        bybit_client=None
    ):
        self.settings = settings or get_settings()
        self.logger = setup_logger(f"{__name__}.DataManager")
        
        # –í–Ω–µ—à–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.database = database
        self.bybit_client = bybit_client
        self.historical_manager: Optional[HistoricalDataManager] = None
        
        # –ö–µ—à –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å–∏–º–≤–æ–ª–∞–º –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º
        self._cache: Dict[str, Dict[str, MarketDataCache]] = defaultdict(lambda: defaultdict(MarketDataCache))
        self._cache_lock = threading.RLock()
        
        # –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self._subscriptions: Dict[str, DataSubscription] = {}
        self._subscription_lock = threading.RLock()
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        self._is_running = False
        self._update_tasks: Dict[str, asyncio.Task] = {}
        self._executor = ThreadPoolExecutor(max_workers=4, thread_name_prefix="DataManager")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'cache_hits': 0,
            'cache_misses': 0,
            'data_updates': 0,
            'subscriptions_notified': 0,
            'errors': 0,
            'total_symbols': 0,
            'active_subscriptions': 0
        }
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
        self.cache_ttl = self.settings.MARKET_DATA_CACHE_TTL
        self.max_cache_size = MAX_CACHE_SIZE
        
        self.logger.info("üìä Data Manager initialized")
    
    async def initialize(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        try:
            self.logger.info("üîß Initializing Data Manager...")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            self.historical_manager = HistoricalDataManager(
                bybit_client=self.bybit_client,
                database=self.database
            )
            
            # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
            self._is_running = True
            asyncio.create_task(self._background_cleanup_task())
            
            self.logger.info("‚úÖ Data Manager initialized successfully")
            
        except Exception as e:
            self.logger.error(f"‚ùå Failed to initialize Data Manager: {e}")
            raise
    
    async def shutdown(self) -> None:
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        try:
            self.logger.info("üîÑ Shutting down Data Manager...")
            
            self._is_running = False
            
            # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            for task in self._update_tasks.values():
                task.cancel()
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á
            if self._update_tasks:
                await asyncio.gather(*self._update_tasks.values(), return_exceptions=True)
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º executor
            self._executor.shutdown(wait=True)
            
            self.logger.info("‚úÖ Data Manager shutdown complete")
            
        except Exception as e:
            self.logger.error(f"‚ùå Data Manager shutdown error: {e}")
    
    # ========================================================================
    # DATA RETRIEVAL METHODS
    # ========================================================================
    
    async def get_market_data(
        self,
        symbol: str,
        timeframe: str,
        count: int = 100,
        force_refresh: bool = False
    ) -> List[CandleData]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            timeframe: –¢–∞–π–º—Ñ—Ä–µ–π–º
            count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π
            force_refresh: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–≤–µ—á–µ–π
        """
        try:
            with Timer(f"get_market_data_{symbol}_{timeframe}"):
                symbol = symbol.upper()
                timeframe = timeframe.lower()
                
                # –í–∞–ª–∏–¥–∞—Ü–∏—è
                if not validate_symbol(symbol) or not validate_timeframe(timeframe):
                    raise ValueError(f"Invalid symbol or timeframe: {symbol}, {timeframe}")
                
                cache_key = f"{symbol}_{timeframe}"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
                if not force_refresh:
                    cached_data = self._get_from_cache(symbol, timeframe, count)
                    if cached_data:
                        self.stats['cache_hits'] += 1
                        self.logger.debug(f"üì± Cache hit: {cache_key}, {len(cached_data)} candles")
                        return cached_data
                
                self.stats['cache_misses'] += 1
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
                market_data = await self._fetch_market_data(symbol, timeframe, count)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à
                self._update_cache(symbol, timeframe, market_data)
                
                self.stats['data_updates'] += 1
                self.logger.info(f"üìä Market data updated: {symbol} {timeframe}, {len(market_data)} candles")
                
                return market_data[-count:] if market_data else []
                
        except Exception as e:
            self.stats['errors'] += 1
            self.logger.error(f"‚ùå Failed to get market data {symbol} {timeframe}: {e}")
            raise
    
    async def get_latest_price(self, symbol: str) -> Optional[float]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ü–µ–Ω—ã —Å–∏–º–≤–æ–ª–∞"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫–µ—à–∞
            with self._cache_lock:
                symbol_cache = self._cache.get(symbol.upper())
                if symbol_cache:
                    # –ò—â–µ–º —Å–∞–º—ã–µ —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
                    latest_price = 0.0
                    latest_time = 0
                    
                    for timeframe_cache in symbol_cache.values():
                        if (timeframe_cache.last_updated > latest_time and 
                            timeframe_cache.last_price > 0):
                            latest_price = timeframe_cache.last_price
                            latest_time = timeframe_cache.last_updated
                    
                    if latest_price > 0:
                        return latest_price
            
            # –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫–µ—à–µ, –ø–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
            data = await self.get_market_data(symbol, "1m", 1)
            return data[-1].close_price if data else None
            
        except Exception as e:
            self.logger.error(f"‚ùå Failed to get latest price for {symbol}: {e}")
            return None
    
    async def get_price_change_24h(self, symbol: str) -> Dict[str, float]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –∑–∞ 24 —á–∞—Å–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
            data = await self.get_market_data(symbol, "1h", 25)  # 25 —á–∞—Å–æ–≤ –¥–ª—è –∑–∞–ø–∞—Å–∞
            
            if len(data) < 24:
                return {'price_change': 0.0, 'price_change_pct': 0.0}
            
            current_price = data[-1].close_price
            price_24h_ago = data[-24].close_price
            
            price_change = current_price - price_24h_ago
            price_change_pct = (price_change / price_24h_ago) * 100 if price_24h_ago > 0 else 0.0
            
            return {
                'current_price': current_price,
                'price_24h_ago': price_24h_ago,
                'price_change': price_change,
                'price_change_pct': price_change_pct
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå Failed to get 24h price change for {symbol}: {e}")
            return {'price_change': 0.0, 'price_change_pct': 0.0}
    
    async def get_volume_24h(self, symbol: str) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä–µ–º–∞ —Ç–æ—Ä–≥–æ–≤ –∑–∞ 24 —á–∞—Å–∞"""
        try:
            data = await self.get_market_data(symbol, "1h", 24)
            return sum(candle.volume for candle in data) if data else 0.0
            
        except Exception as e:
            self.logger.error(f"‚ùå Failed to get 24h volume for {symbol}: {e}")
            return 0.0
    
    # ========================================================================
    # SUBSCRIPTION METHODS  
    # ========================================================================
    
    def subscribe_to_data(
        self,
        subscriber_id: str,
        symbol: str,
        timeframe: str,
        callback: Callable[[List[CandleData]], None]
    ) -> bool:
        """
        –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            subscriber_id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø–æ–¥–ø–∏—Å—á–∏–∫–∞
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            timeframe: –¢–∞–π–º—Ñ—Ä–µ–π–º
            callback: –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
            
        Returns:
            True –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–∞
        """
        try:
            symbol = symbol.upper()
            timeframe = timeframe.lower()
            
            with self._subscription_lock:
                subscription_key = f"{subscriber_id}_{symbol}_{timeframe}"
                
                subscription = DataSubscription(
                    subscriber_id=subscriber_id,
                    symbol=symbol,
                    timeframe=timeframe,
                    callback=callback
                )
                
                self._subscriptions[subscription_key] = subscription
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ –≤ –∫–µ—à
                with self._cache_lock:
                    self._cache[symbol][timeframe].add_subscriber(subscriber_id)
                
                self.stats['active_subscriptions'] = len(self._subscriptions)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            self._ensure_update_task(symbol, timeframe)
            
            self.logger.info(f"üì° Subscription added: {subscriber_id} -> {symbol} {timeframe}")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå Failed to add subscription: {e}")
            return False
    
    def unsubscribe_from_data(
        self,
        subscriber_id: str,
        symbol: Optional[str] = None,
        timeframe: Optional[str] = None
    ) -> bool:
        """
        –û—Ç–ø–∏—Å–∫–∞ –æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            subscriber_id: ID –ø–æ–¥–ø–∏—Å—á–∏–∫–∞
            symbol: –°–∏–º–≤–æ–ª (–µ—Å–ª–∏ None, –æ—Ç–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –æ—Ç –≤—Å–µ—Ö)
            timeframe: –¢–∞–π–º—Ñ—Ä–µ–π–º (–µ—Å–ª–∏ None, –æ—Ç–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –æ—Ç –≤—Å–µ—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ —Å–∏–º–≤–æ–ª–∞)
            
        Returns:
            True –µ—Å–ª–∏ –æ—Ç–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–∞
        """
        try:
            with self._subscription_lock:
                keys_to_remove = []
                
                for key, subscription in self._subscriptions.items():
                    if subscription.subscriber_id == subscriber_id:
                        if symbol is None or subscription.symbol == symbol.upper():
                            if timeframe is None or subscription.timeframe == timeframe.lower():
                                keys_to_remove.append(key)
                                
                                # –£–¥–∞–ª—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ –∏–∑ –∫–µ—à–∞
                                with self._cache_lock:
                                    self._cache[subscription.symbol][subscription.timeframe].remove_subscriber(subscriber_id)
                
                # –£–¥–∞–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏
                for key in keys_to_remove:
                    del self._subscriptions[key]
                
                self.stats['active_subscriptions'] = len(self._subscriptions)
            
            self.logger.info(f"üì° Unsubscribed: {subscriber_id}, removed {len(keys_to_remove)} subscriptions")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå Failed to unsubscribe: {e}")
            return False
    
    async def notify_subscribers(
        self,
        symbol: str,
        timeframe: str,
        data: List[CandleData]
    ) -> None:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            notifications_sent = 0
            
            with self._subscription_lock:
                for subscription in self._subscriptions.values():
                    if (subscription.symbol == symbol and 
                        subscription.timeframe == timeframe and 
                        subscription.active):
                        
                        try:
                            # –í—ã–∑—ã–≤–∞–µ–º callback –≤ executor —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å event loop
                            await asyncio.get_event_loop().run_in_executor(
                                self._executor,
                                subscription.callback,
                                data
                            )
                            
                            subscription.last_notified = get_current_timestamp()
                            notifications_sent += 1
                            
                        except Exception as e:
                            self.logger.warning(f"‚ö†Ô∏è Callback failed for {subscription.subscriber_id}: {e}")
                            # –û—Ç–º–µ—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—É—é –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
                            subscription.active = False
            
            if notifications_sent > 0:
                self.stats['subscriptions_notified'] += notifications_sent
                self.logger.debug(f"üì¢ Notified {notifications_sent} subscribers for {symbol} {timeframe}")
                
        except Exception as e:
            self.logger.error(f"‚ùå Failed to notify subscribers: {e}")
    
    # ========================================================================
    # CACHE MANAGEMENT
    # ========================================================================
    
    def _get_from_cache(self, symbol: str, timeframe: str, count: int) -> Optional[List[CandleData]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–µ—à–∞"""
        try:
            with self._cache_lock:
                cache = self._cache[symbol][timeframe]
                
                if cache.data and not cache.is_expired(self.cache_ttl):
                    return cache.get_candles_slice(count)
                
                return None
                
        except Exception as e:
            self.logger.debug(f"Cache access error: {e}")
            return None
    
    def _update_cache(self, symbol: str, timeframe: str, data: List[CandleData]) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–µ—à–∞ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            with self._cache_lock:
                cache = self._cache[symbol][timeframe]
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                cache.data = data[-MAX_CANDLES_PER_SYMBOL:]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä
                cache.last_updated = get_current_timestamp()
                
                if data:
                    latest_candle = data[-1]
                    cache.last_price = latest_candle.close_price
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                self.stats['total_symbols'] = len(self._cache)
                
        except Exception as e:
            self.logger.error(f"‚ùå Cache update error: {e}")
    
    def clear_cache(
        self,
        symbol: Optional[str] = None,
        timeframe: Optional[str] = None
    ) -> None:
        """–û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞"""
        try:
            with self._cache_lock:
                if symbol is None:
                    # –û—á–∏—â–∞–µ–º –≤–µ—Å—å –∫–µ—à
                    self._cache.clear()
                    self.logger.info("üßπ Cleared entire cache")
                    
                elif timeframe is None:
                    # –û—á–∏—â–∞–µ–º –∫–µ—à —Å–∏–º–≤–æ–ª–∞
                    if symbol.upper() in self._cache:
                        del self._cache[symbol.upper()]
                        self.logger.info(f"üßπ Cleared cache for {symbol}")
                        
                else:
                    # –û—á–∏—â–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–µ—à
                    symbol_cache = self._cache.get(symbol.upper())
                    if symbol_cache and timeframe.lower() in symbol_cache:
                        del symbol_cache[timeframe.lower()]
                        self.logger.info(f"üßπ Cleared cache for {symbol} {timeframe}")
                
                self.stats['total_symbols'] = len(self._cache)
                
        except Exception as e:
            self.logger.error(f"‚ùå Cache clear error: {e}")
    
    # ========================================================================
    # DATA FETCHING
    # ========================================================================
    
    async def _fetch_market_data(
        self,
        symbol: str,
        timeframe: str,
        count: int
    ) -> List[CandleData]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            if self.historical_manager:
                data = await self.historical_manager.get_recent_candles(symbol, timeframe, count)
                if data:
                    return data
            
            # –ï—Å–ª–∏ –Ω–µ—Ç historical manager –∏–ª–∏ –¥–∞–Ω–Ω—ã—Ö, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–ø—Ä—è–º—É—é —Å API
            if self.bybit_client:
                response = await self.bybit_client.get_kline(
                    symbol=symbol,
                    interval=timeframe,
                    limit=count
                )
                
                if response and 'result' in response and 'list' in response['result']:
                    candles = []
                    for kline_data in response['result']['list']:
                        try:
                            candle = CandleData.from_bybit_response(kline_data, symbol, timeframe)
                            candles.append(candle)
                        except Exception as e:
                            self.logger.warning(f"‚ö†Ô∏è Failed to parse candle: {e}")
                            continue
                    
                    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
                    candles.sort(key=lambda x: x.open_time)
                    return candles
            
            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
            self.logger.warning(f"‚ö†Ô∏è No data sources available for {symbol} {timeframe}")
            return []
            
        except Exception as e:
            self.logger.error(f"‚ùå Failed to fetch market data: {e}")
            return []
    
    # ========================================================================
    # BACKGROUND TASKS
    # ========================================================================
    
    def _ensure_update_task(self, symbol: str, timeframe: str) -> None:
        """–û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
        task_key = f"{symbol}_{timeframe}"
        
        if task_key not in self._update_tasks or self._update_tasks[task_key].done():
            task = asyncio.create_task(
                self._auto_update_data(symbol, timeframe),
                name=f"update_{task_key}"
            )
            self._update_tasks[task_key] = task
            
            self.logger.debug(f"üîÑ Started auto-update task for {symbol} {timeframe}")
    
    async def _auto_update_data(self, symbol: str, timeframe: str) -> None:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
        update_interval = UPDATE_INTERVALS.get(timeframe, 60)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 –º–∏–Ω—É—Ç–∞
        
        while self._is_running:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏
                has_subscribers = False
                with self._cache_lock:
                    cache = self._cache[symbol][timeframe]
                    has_subscribers = len(cache.subscribers) > 0
                
                if not has_subscribers:
                    self.logger.debug(f"üìâ No subscribers for {symbol} {timeframe}, stopping updates")
                    break
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
                data = await self._fetch_market_data(symbol, timeframe, 100)
                
                if data:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à
                    self._update_cache(symbol, timeframe, data)
                    
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
                    await self.notify_subscribers(symbol, timeframe, data)
                
                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                await asyncio.sleep(update_interval)
                
            except asyncio.CancelledError:
                self.logger.debug(f"üîÑ Update task cancelled for {symbol} {timeframe}")
                break
            except Exception as e:
                self.logger.error(f"‚ùå Auto-update error for {symbol} {timeframe}: {e}")
                await asyncio.sleep(min(update_interval, 60))  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º –º–µ–Ω—å—à–µ
        
        # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö
        task_key = f"{symbol}_{timeframe}"
        if task_key in self._update_tasks:
            del self._update_tasks[task_key]
    
    async def _background_cleanup_task(self) -> None:
        """–§–æ–Ω–æ–≤–∞—è –æ—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–¥–ø–∏—Å–æ–∫"""
        while self._is_running:
            try:
                await asyncio.sleep(300)  # –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                
                # –û—á–∏—â–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
                with self._subscription_lock:
                    inactive_keys = []
                    for key, subscription in self._subscriptions.items():
                        if not subscription.active:
                            inactive_keys.append(key)
                    
                    for key in inactive_keys:
                        del self._subscriptions[key]
                    
                    if inactive_keys:
                        self.logger.info(f"üßπ Removed {len(inactive_keys)} inactive subscriptions")
                
                # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–µ—à–∏ –±–µ–∑ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
                with self._cache_lock:
                    empty_caches = []
                    for symbol, timeframes in self._cache.items():
                        for timeframe, cache in timeframes.items():
                            if (len(cache.subscribers) == 0 and 
                                cache.is_expired(self.cache_ttl * 10)):  # –î–µ—Ä–∂–∏–º 10x TTL –±–µ–∑ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
                                empty_caches.append((symbol, timeframe))
                    
                    for symbol, timeframe in empty_caches:
                        del self._cache[symbol][timeframe]
                        if not self._cache[symbol]:
                            del self._cache[symbol]
                    
                    if empty_caches:
                        self.logger.info(f"üßπ Removed {len(empty_caches)} empty caches")
                
            except asyncio.CancelledError:
                break
            except Exception as e:
                self.logger.error(f"‚ùå Background cleanup error: {e}")
    
    # ========================================================================
    # UTILITY METHODS
    # ========================================================================
    
    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        with self._cache_lock, self._subscription_lock:
            cache_memory_usage = sum(
                len(tf_cache.data) for symbol_cache in self._cache.values()
                for tf_cache in symbol_cache.values()
            )
            
            hit_rate = 0
            total_requests = self.stats['cache_hits'] + self.stats['cache_misses']
            if total_requests > 0:
                hit_rate = (self.stats['cache_hits'] / total_requests) * 100
            
            return {
                **self.stats,
                'cache_hit_rate_pct': round(hit_rate, 2),
                'cache_memory_usage': cache_memory_usage,
                'active_update_tasks': len(self._update_tasks),
                'total_cached_symbols': len(self._cache),
                'is_running': self._is_running
            }
    
    def get_cache_info(self) -> Dict[str, Any]:
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–µ—à–µ"""
        with self._cache_lock:
            cache_info = {}
            
            for symbol, timeframes in self._cache.items():
                cache_info[symbol] = {}
                for timeframe, cache in timeframes.items():
                    cache_info[symbol][timeframe] = {
                        'data_points': len(cache.data),
                        'last_updated': cache.last_updated,
                        'last_price': cache.last_price,
                        'subscribers': len(cache.subscribers),
                        'is_expired': cache.is_expired(self.cache_ttl)
                    }
            
            return cache_info
    
    async def health_check(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        try:
            # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö
            test_symbol = "BTCUSDT"
            test_data = await self.get_market_data(test_symbol, "1m", 1)
            
            health = {
                'status': 'healthy' if test_data else 'warning',
                'is_running': self._is_running,
                'active_subscriptions': len(self._subscriptions),
                'active_update_tasks': len(self._update_tasks),
                'cache_symbols': len(self._cache),
                'last_test_data_time': test_data[-1].open_time if test_data else None,
                'stats': self.get_stats()
            }
            
            return health
            
        except Exception as e:
            return {
                'status': 'unhealthy',
                'error': str(e),
                'is_running': self._is_running
            }


# ============================================================================
# CONVENIENCE FUNCTIONS
# ============================================================================

def create_data_manager(
    settings: Optional[Settings] = None,
    database: Optional[Database] = None,
    bybit_client=None
) -> DataManager:
    """–°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ DataManager"""
    return DataManager(
        settings=settings,
        database=database,
        bybit_client=bybit_client
    )


# ============================================================================
# EXAMPLE USAGE
# ============================================================================

if __name__ == "__main__":
    import asyncio
    
    async def test_data_manager():
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Data Manager"""
        print("üß™ Testing Data Manager")
        print("=" * 50)
        
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
        manager = create_data_manager()
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
            await manager.initialize()
            print("‚úÖ Manager initialized")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            def test_callback(data: List[CandleData]):
                print(f"üìä Received {len(data)} candles, latest price: {data[-1].close_price}")
            
            success = manager.subscribe_to_data("test_subscriber", "BTCUSDT", "5m", test_callback)
            print(f"‚úÖ Subscription: {success}")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            data = await manager.get_market_data("BTCUSDT", "5m", 10)
            print(f"‚úÖ Got {len(data)} candles")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            stats = manager.get_stats()
            print(f"üìä Stats: {stats}")
            
            # Health check
            health = await manager.health_check()
            print(f"üè• Health: {health['status']}")
            
            await asyncio.sleep(2)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            
        except Exception as e:
            print(f"‚ùå Test failed: {e}")
        finally:
            await manager.shutdown()
            print("‚úÖ Manager shutdown complete")
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
    asyncio.run(test_data_manager())
