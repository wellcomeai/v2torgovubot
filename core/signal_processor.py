"""
Trading Bot Signal Processor
–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π, –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∏ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
"""

import asyncio
from datetime import datetime, timezone, timedelta
from typing import Dict, List, Any, Optional, Callable, Set, Union, Tuple
from dataclasses import dataclass, field
from enum import Enum
from collections import deque, defaultdict
import threading
from concurrent.futures import ThreadPoolExecutor
import uuid

from utils.logger import setup_logger, log_trading_event
from utils.helpers import (
    get_current_timestamp, safe_float, validate_symbol, Timer,
    round_price, round_quantity, calculate_percentage_change
)
from app.config.settings import Settings, get_settings
from data.database import Database
from data.models import SignalType as DBSignalType
from strategies.base_strategy import BaseStrategy, StrategyResult, SignalType, SignalStrength
from data.historical_data import CandleData


# ============================================================================
# TYPES AND CONSTANTS
# ============================================================================

logger = setup_logger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
DEFAULT_MAX_SIGNALS_PER_HOUR = 10
DEFAULT_MIN_CONFIDENCE = 0.7
DEFAULT_COOLDOWN_MINUTES = 5
DEFAULT_MAX_QUEUE_SIZE = 1000

# –¢–∞–π–º–∞—É—Ç—ã
SIGNAL_PROCESSING_TIMEOUT = 10  # —Å–µ–∫—É–Ω–¥—ã
AI_ANALYSIS_TIMEOUT = 30  # —Å–µ–∫—É–Ω–¥—ã
NOTIFICATION_TIMEOUT = 5  # —Å–µ–∫—É–Ω–¥—ã


class ProcessingStatus(str, Enum):
    """–°—Ç–∞—Ç—É—Å—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    PENDING = "pending"
    PROCESSING = "processing"
    VALIDATED = "validated"
    FILTERED = "filtered"
    ENRICHED = "enriched"
    STORED = "stored"
    NOTIFIED = "notified"
    COMPLETED = "completed"
    REJECTED = "rejected"
    FAILED = "failed"


class FilterReason(str, Enum):
    """–ü—Ä–∏—á–∏–Ω—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    LOW_CONFIDENCE = "low_confidence"
    COOLDOWN_ACTIVE = "cooldown_active"
    HOURLY_LIMIT = "hourly_limit"
    DUPLICATE_SIGNAL = "duplicate_signal"
    INVALID_PRICE = "invalid_price"
    INSUFFICIENT_VOLUME = "insufficient_volume"
    RISK_LIMIT = "risk_limit"
    MARKET_CLOSED = "market_closed"


@dataclass
class ProcessedSignal:
    """–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª"""
    id: str
    original_signal: StrategyResult
    status: ProcessingStatus
    
    # –û–±–æ–≥–∞—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    market_price: Optional[float] = None
    spread: Optional[float] = None
    volume_24h: Optional[float] = None
    price_change_24h: Optional[float] = None
    
    # AI –∞–Ω–∞–ª–∏–∑
    ai_analysis: Optional[str] = None
    ai_confidence: Optional[float] = None
    ai_processed_at: Optional[int] = None
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processed_at: int = field(default_factory=get_current_timestamp)
    processing_time_ms: Optional[float] = None
    filter_reason: Optional[FilterReason] = None
    notifications_sent: List[str] = field(default_factory=list)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    risk_score: Optional[float] = None
    execution_priority: int = 1  # 1=–Ω–∏–∑–∫–∏–π, 5=–≤—ã—Å–æ–∫–∏–π
    
    def to_dict(self) -> Dict[str, Any]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å"""
        return {
            'id': self.id,
            'status': self.status.value,
            'signal_type': self.original_signal.signal_type.value,
            'confidence': self.original_signal.confidence,
            'entry_price': self.original_signal.entry_price,
            'stop_loss': self.original_signal.stop_loss,
            'take_profit': self.original_signal.take_profit,
            'reasoning': self.original_signal.reasoning,
            'market_price': self.market_price,
            'spread': self.spread,
            'volume_24h': self.volume_24h,
            'price_change_24h': self.price_change_24h,
            'ai_analysis': self.ai_analysis,
            'ai_confidence': self.ai_confidence,
            'processed_at': self.processed_at,
            'processing_time_ms': self.processing_time_ms,
            'risk_score': self.risk_score,
            'execution_priority': self.execution_priority,
            'filter_reason': self.filter_reason.value if self.filter_reason else None
        }


@dataclass
class SignalProcessingConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    max_signals_per_hour: int = DEFAULT_MAX_SIGNALS_PER_HOUR
    min_confidence: float = DEFAULT_MIN_CONFIDENCE
    cooldown_minutes: int = DEFAULT_COOLDOWN_MINUTES
    max_queue_size: int = DEFAULT_MAX_QUEUE_SIZE
    
    # –§–∏–ª—å—Ç—Ä—ã
    enable_confidence_filter: bool = True
    enable_cooldown_filter: bool = True
    enable_hourly_limit_filter: bool = True
    enable_duplicate_filter: bool = True
    enable_market_data_enrichment: bool = True
    enable_ai_analysis: bool = True
    enable_risk_scoring: bool = True
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    enable_telegram_notifications: bool = True
    enable_email_notifications: bool = False
    enable_webhook_notifications: bool = False
    
    # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    max_concurrent_processing: int = 5
    processing_timeout: int = SIGNAL_PROCESSING_TIMEOUT


# ============================================================================
# SIGNAL PROCESSOR CLASS
# ============================================================================

class SignalProcessor:
    """
    –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
    
    –§—É–Ω–∫—Ü–∏–∏:
    - –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥—è—â–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
    - –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º
    - –û–±–æ–≥–∞—â–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    - AI –∞–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–æ–≤
    - –†–∞—Å—á–µ—Ç —Ä–∏—Å–∫-—Å–∫–æ—Ä–∞
    - –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    """
    
    def __init__(
        self,
        config: Optional[SignalProcessingConfig] = None,
        settings: Optional[Settings] = None,
        database: Optional[Database] = None
    ):
        self.config = config or SignalProcessingConfig()
        self.settings = settings or get_settings()
        self.database = database
        self.logger = setup_logger(f"{__name__}.SignalProcessor")
        
        # –û—á–µ—Ä–µ–¥–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        self._incoming_queue: asyncio.Queue = asyncio.Queue(maxsize=self.config.max_queue_size)
        self._processing_queue: asyncio.Queue = asyncio.Queue(maxsize=100)
        self._completed_signals: deque = deque(maxlen=1000)
        
        # –ö–µ—à–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        self._recent_signals: Dict[str, List[int]] = defaultdict(list)  # symbol -> timestamps
        self._signal_history: Dict[str, deque] = defaultdict(lambda: deque(maxlen=100))
        self._cooldown_tracker: Dict[str, int] = {}  # strategy_symbol -> last_signal_time
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
        self._is_running = False
        self._processing_tasks: Set[asyncio.Task] = set()
        self._executor = ThreadPoolExecutor(max_workers=4, thread_name_prefix="SignalProcessor")
        
        # Callbacks
        self._signal_callbacks: List[Callable[[ProcessedSignal], None]] = []
        self._error_callbacks: List[Callable[[Exception, ProcessedSignal], None]] = []
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'total_received': 0,
            'total_processed': 0,
            'total_rejected': 0,
            'total_filtered': 0,
            'processing_errors': 0,
            'avg_processing_time_ms': 0.0,
            'filters_applied': defaultdict(int),
            'signals_by_type': defaultdict(int),
            'signals_by_strategy': defaultdict(int)
        }
        
        # –í–Ω–µ—à–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã (–±—É–¥—É—Ç –∏–Ω–∂–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω—ã)
        self.market_data_provider = None
        self.ai_service = None
        self.notification_service = None
        
        self.logger.info("üéØ Signal Processor initialized")
    
    # ========================================================================
    # LIFECYCLE MANAGEMENT
    # ========================================================================
    
    async def start(self) -> None:
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        if self._is_running:
            return
        
        try:
            self.logger.info("üöÄ Starting Signal Processor...")
            self._is_running = True
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
            self._start_background_tasks()
            
            self.logger.info("‚úÖ Signal Processor started successfully")
            
        except Exception as e:
            self.logger.error(f"‚ùå Failed to start Signal Processor: {e}")
            await self.stop()
            raise
    
    async def stop(self) -> None:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞"""
        if not self._is_running:
            return
        
        try:
            self.logger.info("üîÑ Stopping Signal Processor...")
            self._is_running = False
            
            # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
            for task in self._processing_tasks:
                if not task.done():
                    task.cancel()
            
            if self._processing_tasks:
                await asyncio.gather(*self._processing_tasks, return_exceptions=True)
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º executor
            self._executor.shutdown(wait=True)
            
            self.logger.info("‚úÖ Signal Processor stopped")
            
        except Exception as e:
            self.logger.error(f"‚ùå Error stopping Signal Processor: {e}")
    
    def _start_background_tasks(self) -> None:
        """–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á"""
        # –û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        for i in range(self.config.max_concurrent_processing):
            task = asyncio.create_task(
                self._signal_processing_worker(f"worker-{i}"),
                name=f"signal_processor_worker_{i}"
            )
            self._processing_tasks.add(task)
        
        # –ó–∞–¥–∞—á–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—á–µ—Ä–µ–¥–µ–π
        task = asyncio.create_task(
            self._queue_monitor_task(),
            name="signal_processor_monitor"
        )
        self._processing_tasks.add(task)
        
        # –ó–∞–¥–∞—á–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        task = asyncio.create_task(
            self._cleanup_task(),
            name="signal_processor_cleanup"
        )
        self._processing_tasks.add(task)
    
    # ========================================================================
    # SIGNAL PROCESSING PIPELINE
    # ========================================================================
    
    async def process_signal(
        self,
        signal: StrategyResult,
        strategy_name: str,
        symbol: str,
        timeframe: str
    ) -> Optional[ProcessedSignal]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
        
        Args:
            signal: –†–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            strategy_name: –ò–º—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            timeframe: –¢–∞–π–º—Ñ—Ä–µ–π–º
            
        Returns:
            –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª –∏–ª–∏ None –µ—Å–ª–∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω
        """
        try:
            if not self._is_running:
                self.logger.warning("‚ö†Ô∏è Signal processor is not running")
                return None
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
            processed_signal = ProcessedSignal(
                id=str(uuid.uuid4()),
                original_signal=signal,
                status=ProcessingStatus.PENDING
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            signal.metadata.update({
                'strategy_name': strategy_name,
                'symbol': symbol,
                'timeframe': timeframe,
                'received_at': get_current_timestamp()
            })
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            try:
                await asyncio.wait_for(
                    self._incoming_queue.put(processed_signal),
                    timeout=1.0
                )
                
                self.stats['total_received'] += 1
                self.stats['signals_by_strategy'][strategy_name] += 1
                self.stats['signals_by_type'][signal.signal_type.value] += 1
                
                log_trading_event(
                    event_type="SIGNAL_RECEIVED",
                    symbol=symbol,
                    strategy=strategy_name,
                    message=f"üéØ {signal.signal_type.value} signal received (confidence: {signal.confidence:.2f})",
                    confidence=signal.confidence,
                    entry_price=signal.entry_price
                )
                
                return processed_signal
                
            except asyncio.TimeoutError:
                self.logger.warning(f"‚ö†Ô∏è Signal queue is full, dropping signal for {symbol}")
                return None
                
        except Exception as e:
            self.logger.error(f"‚ùå Failed to process signal: {e}")
            self.stats['processing_errors'] += 1
            return None
    
    async def _signal_processing_worker(self, worker_name: str) -> None:
        """–í–æ—Ä–∫–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        while self._is_running:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å–∏–≥–Ω–∞–ª –∏–∑ –æ—á–µ—Ä–µ–¥–∏
                try:
                    processed_signal = await asyncio.wait_for(
                        self._incoming_queue.get(),
                        timeout=1.0
                    )
                except asyncio.TimeoutError:
                    continue
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª
                start_time = asyncio.get_event_loop().time()
                
                try:
                    await self._process_single_signal(processed_signal)
                    processing_time = (asyncio.get_event_loop().time() - start_time) * 1000
                    processed_signal.processing_time_ms = processing_time
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    self.stats['total_processed'] += 1
                    self._update_avg_processing_time(processing_time)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                    self._completed_signals.append(processed_signal)
                    
                    # –í—ã–∑—ã–≤–∞–µ–º callbacks
                    await self._call_signal_callbacks(processed_signal)
                    
                    self.logger.debug(f"‚úÖ Signal processed by {worker_name}: {processed_signal.id}")
                    
                except Exception as e:
                    processed_signal.status = ProcessingStatus.FAILED
                    self.stats['processing_errors'] += 1
                    
                    await self._call_error_callbacks(e, processed_signal)
                    self.logger.error(f"‚ùå Signal processing failed in {worker_name}: {e}")
                
                finally:
                    self._incoming_queue.task_done()
                
            except asyncio.CancelledError:
                break
            except Exception as e:
                self.logger.error(f"‚ùå Worker {worker_name} error: {e}")
                await asyncio.sleep(1)
    
    async def _process_single_signal(self, processed_signal: ProcessedSignal) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ pipeline"""
        signal = processed_signal.original_signal
        symbol = signal.metadata.get('symbol')
        strategy_name = signal.metadata.get('strategy_name')
        
        try:
            with Timer(f"process_signal_{symbol}"):
                processed_signal.status = ProcessingStatus.PROCESSING
                
                # 1. –í–∞–ª–∏–¥–∞—Ü–∏—è
                if not await self._validate_signal(processed_signal):
                    processed_signal.status = ProcessingStatus.REJECTED
                    self.stats['total_rejected'] += 1
                    return
                
                processed_signal.status = ProcessingStatus.VALIDATED
                
                # 2. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
                filter_result = await self._apply_filters(processed_signal)
                if filter_result:
                    processed_signal.status = ProcessingStatus.FILTERED
                    processed_signal.filter_reason = filter_result
                    self.stats['total_filtered'] += 1
                    self.stats['filters_applied'][filter_result.value] += 1
                    
                    self.logger.debug(f"üö´ Signal filtered: {filter_result.value} for {symbol}")
                    return
                
                # 3. –û–±–æ–≥–∞—â–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                if self.config.enable_market_data_enrichment:
                    await self._enrich_with_market_data(processed_signal)
                
                processed_signal.status = ProcessingStatus.ENRICHED
                
                # 4. AI –∞–Ω–∞–ª–∏–∑
                if self.config.enable_ai_analysis and self.ai_service:
                    await self._perform_ai_analysis(processed_signal)
                
                # 5. –†–∞—Å—á–µ—Ç —Ä–∏—Å–∫-—Å–∫–æ—Ä–∞
                if self.config.enable_risk_scoring:
                    await self._calculate_risk_score(processed_signal)
                
                # 6. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
                if self.database:
                    await self._save_to_database(processed_signal)
                
                processed_signal.status = ProcessingStatus.STORED
                
                # 7. –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                await self._send_notifications(processed_signal)
                
                processed_signal.status = ProcessingStatus.COMPLETED
                
                log_trading_event(
                    event_type="SIGNAL_PROCESSED",
                    symbol=symbol,
                    strategy=strategy_name,
                    message=f"‚úÖ {signal.signal_type.value} signal processed successfully",
                    processing_time_ms=processed_signal.processing_time_ms,
                    risk_score=processed_signal.risk_score
                )
                
        except Exception as e:
            processed_signal.status = ProcessingStatus.FAILED
            self.logger.error(f"‚ùå Signal processing pipeline failed: {e}")
            raise
    
    # ========================================================================
    # VALIDATION
    # ========================================================================
    
    async def _validate_signal(self, processed_signal: ProcessedSignal) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞"""
        try:
            signal = processed_signal.original_signal
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            if not signal.signal_type or not isinstance(signal.signal_type, SignalType):
                self.logger.error("‚ùå Invalid signal type")
                return False
            
            if not (0 <= signal.confidence <= 1):
                self.logger.error(f"‚ùå Invalid confidence: {signal.confidence}")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–Ω—ã
            if signal.entry_price is not None:
                if not isinstance(signal.entry_price, (int, float)) or signal.entry_price <= 0:
                    self.logger.error(f"‚ùå Invalid entry price: {signal.entry_price}")
                    return False
            
            if signal.stop_loss is not None:
                if not isinstance(signal.stop_loss, (int, float)) or signal.stop_loss <= 0:
                    self.logger.error(f"‚ùå Invalid stop loss: {signal.stop_loss}")
                    return False
            
            if signal.take_profit is not None:
                if not isinstance(signal.take_profit, (int, float)) or signal.take_profit <= 0:
                    self.logger.error(f"‚ùå Invalid take profit: {signal.take_profit}")
                    return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É —Ü–µ–Ω
            if (signal.signal_type in [SignalType.BUY, SignalType.STRONG_BUY] and 
                signal.entry_price and signal.stop_loss):
                if signal.stop_loss >= signal.entry_price:
                    self.logger.error("‚ùå Stop loss should be below entry price for BUY signals")
                    return False
            
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå Signal validation error: {e}")
            return False
    
    # ========================================================================
    # FILTERING
    # ========================================================================
    
    async def _apply_filters(self, processed_signal: ProcessedSignal) -> Optional[FilterReason]:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∫ —Å–∏–≥–Ω–∞–ª—É"""
        try:
            signal = processed_signal.original_signal
            symbol = signal.metadata.get('symbol')
            strategy_name = signal.metadata.get('strategy_name')
            
            # –§–∏–ª—å—Ç—Ä –ø–æ confidence
            if (self.config.enable_confidence_filter and 
                signal.confidence < self.config.min_confidence):
                return FilterReason.LOW_CONFIDENCE
            
            # –§–∏–ª—å—Ç—Ä cooldown
            if self.config.enable_cooldown_filter:
                cooldown_key = f"{strategy_name}_{symbol}"
                last_signal = self._cooldown_tracker.get(cooldown_key, 0)
                cooldown_ms = self.config.cooldown_minutes * 60 * 1000
                
                if get_current_timestamp() - last_signal < cooldown_ms:
                    return FilterReason.COOLDOWN_ACTIVE
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
                self._cooldown_tracker[cooldown_key] = get_current_timestamp()
            
            # –§–∏–ª—å—Ç—Ä –ª–∏–º–∏—Ç–∞ –≤ —á–∞—Å
            if self.config.enable_hourly_limit_filter:
                if not self._check_hourly_limit(symbol):
                    return FilterReason.HOURLY_LIMIT
            
            # –§–∏–ª—å—Ç—Ä –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            if self.config.enable_duplicate_filter:
                if self._is_duplicate_signal(processed_signal):
                    return FilterReason.DUPLICATE_SIGNAL
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –≤ –∏—Å—Ç–æ—Ä–∏—é
            self._add_to_signal_history(processed_signal)
            
            return None  # –ù–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω
            
        except Exception as e:
            self.logger.error(f"‚ùå Filter application error: {e}")
            return FilterReason.LOW_CONFIDENCE  # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    def _check_hourly_limit(self, symbol: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ —á–∞—Å"""
        try:
            current_time = get_current_timestamp()
            hour_ago = current_time - (60 * 60 * 1000)  # —á–∞—Å –Ω–∞–∑–∞–¥
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
            recent_signals = self._recent_signals[symbol]
            self._recent_signals[symbol] = [
                ts for ts in recent_signals if ts > hour_ago
            ]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
            if len(self._recent_signals[symbol]) >= self.config.max_signals_per_hour:
                return False
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Å–∏–≥–Ω–∞–ª
            self._recent_signals[symbol].append(current_time)
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå Hourly limit check error: {e}")
            return True  # –ü—Ä–∏ –æ—à–∏–±–∫–µ —Ä–∞–∑—Ä–µ—à–∞–µ–º —Å–∏–≥–Ω–∞–ª
    
    def _is_duplicate_signal(self, processed_signal: ProcessedSignal) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç —Å–∏–≥–Ω–∞–ª–∞"""
        try:
            signal = processed_signal.original_signal
            symbol = signal.metadata.get('symbol')
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–¥–∞–≤–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è —Å–∏–º–≤–æ–ª–∞
            recent_signals = list(self._signal_history[symbol])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–∏–≥–Ω–∞–ª–æ–≤
            for recent_signal in recent_signals[-5:]:
                if (recent_signal.original_signal.signal_type == signal.signal_type and
                    abs(recent_signal.original_signal.confidence - signal.confidence) < 0.05 and
                    recent_signal.original_signal.entry_price and signal.entry_price and
                    abs(recent_signal.original_signal.entry_price - signal.entry_price) / signal.entry_price < 0.001):  # 0.1% —Ä–∞–∑–Ω–∏—Ü–∞
                    return True
            
            return False
            
        except Exception as e:
            self.logger.error(f"‚ùå Duplicate check error: {e}")
            return False
    
    def _add_to_signal_history(self, processed_signal: ProcessedSignal) -> None:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        try:
            symbol = processed_signal.original_signal.metadata.get('symbol')
            self._signal_history[symbol].append(processed_signal)
        except Exception as e:
            self.logger.error(f"‚ùå Add to history error: {e}")
    
    # ========================================================================
    # MARKET DATA ENRICHMENT
    # ========================================================================
    
    async def _enrich_with_market_data(self, processed_signal: ProcessedSignal) -> None:
        """–û–±–æ–≥–∞—â–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ —Ä—ã–Ω–æ—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        try:
            if not self.market_data_provider:
                return
            
            symbol = processed_signal.original_signal.metadata.get('symbol')
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ä—ã–Ω–æ—á–Ω—É—é —Ü–µ–Ω—É
            current_price = await self._get_current_price(symbol)
            if current_price:
                processed_signal.market_price = current_price
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–ø—Ä–µ–¥ –µ—Å–ª–∏ –µ—Å—Ç—å entry_price
                if processed_signal.original_signal.entry_price:
                    spread = abs(current_price - processed_signal.original_signal.entry_price)
                    processed_signal.spread = spread
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–º –∑–∞ 24 —á–∞—Å–∞
            volume_24h = await self._get_24h_volume(symbol)
            if volume_24h:
                processed_signal.volume_24h = volume_24h
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ 24 —á–∞—Å–∞
            price_change = await self._get_24h_price_change(symbol)
            if price_change is not None:
                processed_signal.price_change_24h = price_change
            
            self.logger.debug(f"üìä Enriched signal for {symbol}: price={current_price}, volume={volume_24h}")
            
        except Exception as e:
            self.logger.error(f"‚ùå Market data enrichment error: {e}")
    
    async def _get_current_price(self, symbol: str) -> Optional[float]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã"""
        try:
            if hasattr(self.market_data_provider, 'get_latest_price'):
                return await self.market_data_provider.get_latest_price(symbol)
        except Exception as e:
            self.logger.error(f"‚ùå Get current price error: {e}")
        return None
    
    async def _get_24h_volume(self, symbol: str) -> Optional[float]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä–µ–º–∞ –∑–∞ 24 —á–∞—Å–∞"""
        try:
            if hasattr(self.market_data_provider, 'get_volume_24h'):
                return await self.market_data_provider.get_volume_24h(symbol)
        except Exception as e:
            self.logger.error(f"‚ùå Get 24h volume error: {e}")
        return None
    
    async def _get_24h_price_change(self, symbol: str) -> Optional[float]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –∑–∞ 24 —á–∞—Å–∞"""
        try:
            if hasattr(self.market_data_provider, 'get_price_change_24h'):
                change_data = await self.market_data_provider.get_price_change_24h(symbol)
                return change_data.get('price_change_pct', 0.0)
        except Exception as e:
            self.logger.error(f"‚ùå Get 24h price change error: {e}")
        return None
    
    # ========================================================================
    # AI ANALYSIS
    # ========================================================================
    
    async def _perform_ai_analysis(self, processed_signal: ProcessedSignal) -> None:
        """AI –∞–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–∞"""
        try:
            if not self.ai_service:
                return
            
            signal = processed_signal.original_signal
            symbol = signal.metadata.get('symbol')
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è AI
            ai_prompt = self._prepare_ai_prompt(processed_signal)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∞–Ω–∞–ª–∏–∑ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            try:
                ai_result = await asyncio.wait_for(
                    self.ai_service.analyze_signal(ai_prompt),
                    timeout=AI_ANALYSIS_TIMEOUT
                )
                
                if ai_result:
                    processed_signal.ai_analysis = ai_result.get('analysis', '')
                    processed_signal.ai_confidence = ai_result.get('confidence', 0.5)
                    processed_signal.ai_processed_at = get_current_timestamp()
                    
                    self.logger.debug(f"üß† AI analysis completed for {symbol}")
                
            except asyncio.TimeoutError:
                self.logger.warning(f"‚è∞ AI analysis timeout for {symbol}")
            
        except Exception as e:
            self.logger.error(f"‚ùå AI analysis error: {e}")
    
    def _prepare_ai_prompt(self, processed_signal: ProcessedSignal) -> str:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            signal = processed_signal.original_signal
            
            prompt_parts = [
                f"Signal Type: {signal.signal_type.value}",
                f"Confidence: {signal.confidence:.2f}",
                f"Entry Price: {signal.entry_price}",
                f"Stop Loss: {signal.stop_loss}",
                f"Take Profit: {signal.take_profit}",
                f"Strategy Reasoning: {signal.reasoning}",
            ]
            
            if processed_signal.market_price:
                prompt_parts.append(f"Current Market Price: {processed_signal.market_price}")
            
            if processed_signal.volume_24h:
                prompt_parts.append(f"24h Volume: {processed_signal.volume_24h}")
            
            if processed_signal.price_change_24h is not None:
                prompt_parts.append(f"24h Price Change: {processed_signal.price_change_24h:.2f}%")
            
            prompt_parts.append("Please analyze this trading signal and provide your assessment.")
            
            return "\n".join(prompt_parts)
            
        except Exception as e:
            self.logger.error(f"‚ùå AI prompt preparation error: {e}")
            return "Signal analysis requested"
    
    # ========================================================================
    # RISK SCORING
    # ========================================================================
    
    async def _calculate_risk_score(self, processed_signal: ProcessedSignal) -> None:
        """–†–∞—Å—á–µ—Ç —Ä–∏—Å–∫-—Å–∫–æ—Ä–∞"""
        try:
            signal = processed_signal.original_signal
            risk_factors = []
            
            # –ë–∞–∑–æ–≤—ã–π —Ä–∏—Å–∫ –ø–æ confidence
            confidence_risk = 1.0 - signal.confidence  # –ß–µ–º –º–µ–Ω—å—à–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å, —Ç–µ–º –≤—ã—à–µ —Ä–∏—Å–∫
            risk_factors.append(confidence_risk * 0.4)  # 40% –≤–µ—Å–∞
            
            # –†–∏—Å–∫ –ø–æ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ (–Ω–∞ –æ—Å–Ω–æ–≤–µ 24h –∏–∑–º–µ–Ω–µ–Ω–∏—è)
            if processed_signal.price_change_24h is not None:
                volatility_risk = min(abs(processed_signal.price_change_24h) / 10.0, 1.0)  # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ 10%
                risk_factors.append(volatility_risk * 0.3)  # 30% –≤–µ—Å–∞
            
            # –†–∏—Å–∫ –ø–æ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ (–Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—ä–µ–º–∞)
            if processed_signal.volume_24h is not None:
                # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞: –º–µ–Ω—å—à–µ –æ–±—ä–µ–º = –±–æ–ª—å—à–µ —Ä–∏—Å–∫
                volume_risk = max(0, 1.0 - (processed_signal.volume_24h / 1000000))  # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ 1M
                risk_factors.append(volume_risk * 0.2)  # 20% –≤–µ—Å–∞
            
            # –†–∏—Å–∫ –ø–æ —Ä–∞–∑–º–µ—Ä—É —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
            if signal.entry_price and signal.stop_loss:
                stop_loss_pct = abs(signal.entry_price - signal.stop_loss) / signal.entry_price
                stop_loss_risk = min(stop_loss_pct / 0.05, 1.0)  # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ 5%
                risk_factors.append(stop_loss_risk * 0.1)  # 10% –≤–µ—Å–∞
            
            # –†–∞—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫-—Å–∫–æ—Ä
            if risk_factors:
                processed_signal.risk_score = sum(risk_factors) / len(risk_factors)
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∏—Å–∫–∞
                if processed_signal.risk_score < 0.3:
                    processed_signal.execution_priority = 5  # –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
                elif processed_signal.risk_score < 0.6:
                    processed_signal.execution_priority = 3  # –°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
                else:
                    processed_signal.execution_priority = 1  # –ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            
            self.logger.debug(f"‚öñÔ∏è Risk score calculated: {processed_signal.risk_score:.3f}")
            
        except Exception as e:
            self.logger.error(f"‚ùå Risk scoring error: {e}")
            processed_signal.risk_score = 0.5  # –°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    # ========================================================================
    # DATABASE OPERATIONS
    # ========================================================================
    
    async def _save_to_database(self, processed_signal: ProcessedSignal) -> None:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            if not self.database:
                return
            
            signal = processed_signal.original_signal
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            signal_data = {
                'symbol': signal.metadata.get('symbol'),
                'strategy_name': signal.metadata.get('strategy_name'),
                'signal_type': signal.signal_type.value,
                'confidence': signal.confidence,
                'entry_price': signal.entry_price,
                'stop_loss': signal.stop_loss,
                'take_profit': signal.take_profit,
                'timeframe': signal.metadata.get('timeframe'),
                'indicators_data': signal.indicators_data,
                'ai_analysis': processed_signal.ai_analysis,
                'ai_confidence': processed_signal.ai_confidence
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            signal_id = await self.database.save_signal(signal_data)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º AI –∞–Ω–∞–ª–∏–∑ –µ—Å–ª–∏ –µ—Å—Ç—å
            if processed_signal.ai_analysis and processed_signal.ai_confidence:
                await self.database.update_signal_ai_analysis(
                    signal_id,
                    processed_signal.ai_analysis,
                    processed_signal.ai_confidence
                )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–∏–≥–Ω–∞–ª–∞ –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            signal.metadata['database_id'] = signal_id
            
            self.logger.debug(f"üíæ Signal saved to database: ID {signal_id}")
            
        except Exception as e:
            self.logger.error(f"‚ùå Database save error: {e}")
    
    # ========================================================================
    # NOTIFICATIONS
    # ========================================================================
    
    async def _send_notifications(self, processed_signal: ProcessedSignal) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–∏–≥–Ω–∞–ª–µ"""
        try:
            if not self.notification_service:
                return
            
            signal = processed_signal.original_signal
            symbol = signal.metadata.get('symbol')
            strategy = signal.metadata.get('strategy_name')
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            message = self._format_notification_message(processed_signal)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            notifications_sent = []
            
            # Telegram
            if self.config.enable_telegram_notifications:
                try:
                    success = await asyncio.wait_for(
                        self.notification_service.send_telegram(message),
                        timeout=NOTIFICATION_TIMEOUT
                    )
                    if success:
                        notifications_sent.append('telegram')
                except Exception as e:
                    self.logger.error(f"‚ùå Telegram notification failed: {e}")
            
            # Email (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω)
            if self.config.enable_email_notifications:
                try:
                    success = await asyncio.wait_for(
                        self.notification_service.send_email(
                            subject=f"Trading Signal: {signal.signal_type.value} {symbol}",
                            message=message
                        ),
                        timeout=NOTIFICATION_TIMEOUT
                    )
                    if success:
                        notifications_sent.append('email')
                except Exception as e:
                    self.logger.error(f"‚ùå Email notification failed: {e}")
            
            processed_signal.notifications_sent = notifications_sent
            processed_signal.status = ProcessingStatus.NOTIFIED
            
            if notifications_sent:
                self.logger.info(f"üì¢ Notifications sent for {symbol}: {', '.join(notifications_sent)}")
            
        except Exception as e:
            self.logger.error(f"‚ùå Notification error: {e}")
    
    def _format_notification_message(self, processed_signal: ProcessedSignal) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            signal = processed_signal.original_signal
            symbol = signal.metadata.get('symbol', 'Unknown')
            strategy = signal.metadata.get('strategy_name', 'Unknown')
            
            # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ç–∏–ø–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
            signal_emoji = {
                'BUY': 'üü¢',
                'SELL': 'üî¥', 
                'STRONG_BUY': 'üíö',
                'STRONG_SELL': '‚ù§Ô∏è',
                'HOLD': 'üü°'
            }
            
            emoji = signal_emoji.get(signal.signal_type.value, 'üéØ')
            
            lines = [
                f"{emoji} **{signal.signal_type.value} SIGNAL**",
                f"Symbol: **{symbol}**",
                f"Strategy: {strategy}",
                f"Confidence: **{signal.confidence:.2f}** ({signal.strength.value})",
                ""
            ]
            
            if signal.entry_price:
                lines.append(f"Entry Price: **${signal.entry_price:.4f}**")
            
            if processed_signal.market_price:
                lines.append(f"Current Price: ${processed_signal.market_price:.4f}")
            
            if signal.stop_loss:
                lines.append(f"Stop Loss: ${signal.stop_loss:.4f}")
            
            if signal.take_profit:
                lines.append(f"Take Profit: ${signal.take_profit:.4f}")
            
            if processed_signal.risk_score is not None:
                risk_level = "Low" if processed_signal.risk_score < 0.3 else "Medium" if processed_signal.risk_score < 0.7 else "High"
                lines.append(f"Risk: **{risk_level}** ({processed_signal.risk_score:.2f})")
            
            if signal.reasoning:
                lines.extend(["", f"Reasoning: _{signal.reasoning}_"])
            
            if processed_signal.ai_analysis:
                lines.extend(["", f"AI Analysis: _{processed_signal.ai_analysis[:200]}..._"])
            
            return "\n".join(lines)
            
        except Exception as e:
            self.logger.error(f"‚ùå Message formatting error: {e}")
            return f"Trading signal for {signal.metadata.get('symbol', 'Unknown')}"
    
    # ========================================================================
    # BACKGROUND TASKS
    # ========================================================================
    
    async def _queue_monitor_task(self) -> None:
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—á–µ—Ä–µ–¥–µ–π"""
        while self._is_running:
            try:
                incoming_size = self._incoming_queue.qsize()
                processing_size = self._processing_queue.qsize()
                
                # –õ–æ–≥–∏—Ä—É–µ–º –µ—Å–ª–∏ –æ—á–µ—Ä–µ–¥–∏ –ø–µ—Ä–µ–ø–æ–ª–Ω—è—é—Ç—Å—è
                if incoming_size > self.config.max_queue_size * 0.8:
                    self.logger.warning(f"‚ö†Ô∏è Incoming queue nearly full: {incoming_size}")
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥
                await asyncio.sleep(60)
                
                if self.stats['total_received'] > 0:
                    self.logger.info(f"üìä Signal Processor Stats: {self.get_stats()}")
                
            except asyncio.CancelledError:
                break
            except Exception as e:
                self.logger.error(f"‚ùå Queue monitor error: {e}")
                await asyncio.sleep(30)
    
    async def _cleanup_task(self) -> None:
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        while self._is_running:
            try:
                await asyncio.sleep(300)  # –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                
                current_time = get_current_timestamp()
                hour_ago = current_time - (60 * 60 * 1000)
                
                # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –æ –Ω–µ–¥–∞–≤–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª–∞—Ö
                for symbol in list(self._recent_signals.keys()):
                    self._recent_signals[symbol] = [
                        ts for ts in self._recent_signals[symbol] if ts > hour_ago
                    ]
                    if not self._recent_signals[symbol]:
                        del self._recent_signals[symbol]
                
                # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ cooldown –∑–∞–ø–∏—Å–∏
                minute_ago = current_time - (60 * 1000)
                keys_to_remove = [
                    key for key, timestamp in self._cooldown_tracker.items()
                    if timestamp < minute_ago
                ]
                for key in keys_to_remove:
                    del self._cooldown_tracker[key]
                
            except asyncio.CancelledError:
                break
            except Exception as e:
                self.logger.error(f"‚ùå Cleanup task error: {e}")
                await asyncio.sleep(60)
    
    # ========================================================================
    # CALLBACKS AND EVENTS
    # ========================================================================
    
    def add_signal_callback(self, callback: Callable[[ProcessedSignal], None]) -> None:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        self._signal_callbacks.append(callback)
        self.logger.debug("üì° Signal callback added")
    
    def remove_signal_callback(self, callback: Callable[[ProcessedSignal], None]) -> None:
        """–£–¥–∞–ª–µ–Ω–∏–µ callback"""
        if callback in self._signal_callbacks:
            self._signal_callbacks.remove(callback)
            self.logger.debug("üì° Signal callback removed")
    
    def add_error_callback(self, callback: Callable[[Exception, ProcessedSignal], None]) -> None:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ callback –¥–ª—è –æ—à–∏–±–æ–∫"""
        self._error_callbacks.append(callback)
        self.logger.debug("üì° Error callback added")
    
    async def _call_signal_callbacks(self, processed_signal: ProcessedSignal) -> None:
        """–í—ã–∑–æ–≤ callbacks –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤"""
        for callback in self._signal_callbacks:
            try:
                if asyncio.iscoroutinefunction(callback):
                    await callback(processed_signal)
                else:
                    callback(processed_signal)
            except Exception as e:
                self.logger.error(f"‚ùå Signal callback error: {e}")
    
    async def _call_error_callbacks(self, error: Exception, processed_signal: ProcessedSignal) -> None:
        """–í—ã–∑–æ–≤ callbacks –¥–ª—è –æ—à–∏–±–æ–∫"""
        for callback in self._error_callbacks:
            try:
                if asyncio.iscoroutinefunction(callback):
                    await callback(error, processed_signal)
                else:
                    callback(error, processed_signal)
            except Exception as e:
                self.logger.error(f"‚ùå Error callback error: {e}")
    
    # ========================================================================
    # UTILITY METHODS
    # ========================================================================
    
    def _update_avg_processing_time(self, processing_time_ms: float) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        current_avg = self.stats['avg_processing_time_ms']
        total_processed = self.stats['total_processed']
        
        if total_processed == 1:
            self.stats['avg_processing_time_ms'] = processing_time_ms
        else:
            # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ
            alpha = 0.1
            self.stats['avg_processing_time_ms'] = (1 - alpha) * current_avg + alpha * processing_time_ms
    
    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞"""
        return {
            **self.stats,
            'incoming_queue_size': self._incoming_queue.qsize(),
            'completed_signals_count': len(self._completed_signals),
            'active_workers': len([t for t in self._processing_tasks if not t.done()]),
            'is_running': self._is_running
        }
    
    def get_recent_signals(self, limit: int = 10) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        recent = list(self._completed_signals)[-limit:]
        return [signal.to_dict() for signal in recent]
    
    async def health_check(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞"""
        try:
            health = {
                'status': 'healthy' if self._is_running else 'stopped',
                'is_running': self._is_running,
                'queue_size': self._incoming_queue.qsize(),
                'active_workers': len([t for t in self._processing_tasks if not t.done()]),
                'total_processed': self.stats['total_processed'],
                'error_rate': self.stats['processing_errors'] / max(self.stats['total_received'], 1),
                'avg_processing_time_ms': self.stats['avg_processing_time_ms']
            }
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è
            if not self._is_running:
                health['status'] = 'stopped'
            elif health['error_rate'] > 0.1:  # –ë–æ–ª–µ–µ 10% –æ—à–∏–±–æ–∫
                health['status'] = 'unhealthy'
            elif health['queue_size'] > self.config.max_queue_size * 0.9:
                health['status'] = 'overloaded'
            else:
                health['status'] = 'healthy'
            
            return health
            
        except Exception as e:
            return {'status': 'error', 'error': str(e)}
    
    # Dependency injection
    def set_market_data_provider(self, provider) -> None:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        self.market_data_provider = provider
        self.logger.info("üìä Market data provider set")
    
    def set_ai_service(self, service) -> None:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ AI —Å–µ—Ä–≤–∏—Å–∞"""
        self.ai_service = service
        self.logger.info("üß† AI service set")
    
    def set_notification_service(self, service) -> None:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        self.notification_service = service
        self.logger.info("üì¢ Notification service set")


# ============================================================================
# CONVENIENCE FUNCTIONS
# ============================================================================

def create_signal_processor(
    config: Optional[SignalProcessingConfig] = None,
    settings: Optional[Settings] = None,
    database: Optional[Database] = None
) -> SignalProcessor:
    """–°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ Signal Processor"""
    return SignalProcessor(config, settings, database)


# ============================================================================
# EXAMPLE USAGE
# ============================================================================

if __name__ == "__main__":
    async def test_signal_processor():
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Signal Processor"""
        print("üß™ Testing Signal Processor")
        print("=" * 50)
        
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
            processor = create_signal_processor()
            
            # Callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
            def signal_callback(processed_signal: ProcessedSignal):
                print(f"‚úÖ Signal processed: {processed_signal.original_signal.signal_type.value} "
                      f"(confidence: {processed_signal.original_signal.confidence:.2f})")
            
            processor.add_signal_callback(signal_callback)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
            await processor.start()
            print("‚úÖ Signal Processor started")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
            from strategies.base_strategy import StrategyResult, SignalType
            
            test_signal = StrategyResult(
                signal_type=SignalType.BUY,
                confidence=0.85,
                entry_price=50000.0,
                stop_loss=49000.0,
                take_profit=52000.0,
                reasoning="Test signal for demonstration"
            )
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª
            processed = await processor.process_signal(
                signal=test_signal,
                strategy_name="test_strategy",
                symbol="BTCUSDT",
                timeframe="5m"
            )
            
            if processed:
                print(f"‚úÖ Signal submitted for processing: {processed.id}")
            
            # –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
            await asyncio.sleep(2)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            stats = processor.get_stats()
            print(f"üìä Stats: {stats}")
            
            # Health check
            health = await processor.health_check()
            print(f"üè• Health: {health['status']}")
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã
            recent = processor.get_recent_signals(5)
            print(f"üìä Recent signals: {len(recent)}")
            
        except Exception as e:
            print(f"‚ùå Test failed: {e}")
        finally:
            if 'processor' in locals():
                await processor.stop()
                print("‚úÖ Signal Processor stopped")
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
    asyncio.run(test_signal_processor())
