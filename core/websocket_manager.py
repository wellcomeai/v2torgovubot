"""
Trading Bot WebSocket Manager
–ú–µ–Ω–µ–¥–∂–µ—Ä WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å Bybit –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è real-time –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
import json
import time
from datetime import datetime, timezone
from typing import Dict, List, Any, Optional, Callable, Set, Union
from dataclasses import dataclass
from enum import Enum
import weakref
from contextlib import asynccontextmanager

import websockets
from websockets.exceptions import ConnectionClosedError, InvalidStatusCode, InvalidMessage
import aiohttp

from utils.logger import setup_logger, get_websocket_logger
from utils.helpers import (
    get_current_timestamp, retry_async, generate_signature, 
    safe_json_loads, safe_json_dumps, Timer
)
from app.config.settings import Settings, get_settings
from data.historical_data import CandleData


# ============================================================================
# CONSTANTS AND ENUMS
# ============================================================================

# Bybit WebSocket URLs
BYBIT_WS_MAINNET_PUBLIC = "wss://stream.bybit.com/v5/public/linear"
BYBIT_WS_MAINNET_PRIVATE = "wss://stream.bybit.com/v5/private"
BYBIT_WS_TESTNET_PUBLIC = "wss://stream-testnet.bybit.com/v5/public/linear"
BYBIT_WS_TESTNET_PRIVATE = "wss://stream-testnet.bybit.com/v5/private"

# WebSocket –æ–ø–µ—Ä–∞—Ü–∏–∏
WS_OPERATIONS = {
    'SUBSCRIBE': 'subscribe',
    'UNSUBSCRIBE': 'unsubscribe',
    'AUTH': 'auth'
}

# –¢–æ–ø–∏–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫
BYBIT_TOPICS = {
    'KLINE': 'kline',
    'TICKER': 'tickers',
    'ORDERBOOK': 'orderbook',
    'TRADE': 'publicTrade',
    'POSITION': 'position',
    'ORDER': 'order',
    'EXECUTION': 'execution',
    'WALLET': 'wallet'
}

# –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –¥–ª—è kline
KLINE_INTERVALS = ['1', '3', '5', '15', '30', '60', '120', '240', '360', '720', 'D', 'W', 'M']


class WSConnectionStatus(str, Enum):
    """–°—Ç–∞—Ç—É—Å—ã WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
    DISCONNECTED = "disconnected"
    CONNECTING = "connecting" 
    CONNECTED = "connected"
    RECONNECTING = "reconnecting"
    FAILED = "failed"
    CLOSED = "closed"


@dataclass
class WSSubscription:
    """–ü–æ–¥–ø–∏—Å–∫–∞ WebSocket"""
    topic: str
    symbol: Optional[str] = None
    interval: Optional[str] = None
    callback: Optional[Callable] = None
    active: bool = True
    subscribed_at: int = None
    
    def __post_init__(self):
        if self.subscribed_at is None:
            self.subscribed_at = get_current_timestamp()
    
    @property
    def subscription_key(self) -> str:
        """–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –ø–æ–¥–ø–∏—Å–∫–∏"""
        parts = [self.topic]
        if self.interval:
            parts.append(self.interval)
        if self.symbol:
            parts.append(self.symbol)
        return '.'.join(parts)


@dataclass 
class WSMessage:
    """WebSocket —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    topic: str
    data: Any
    timestamp: int
    success: bool = True
    error_message: Optional[str] = None
    
    @classmethod
    def from_bybit_message(cls, raw_message: Dict[str, Any]) -> 'WSMessage':
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–∑ —Å—ã—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è Bybit"""
        try:
            topic = raw_message.get('topic', 'unknown')
            data = raw_message.get('data', [])
            timestamp = raw_message.get('ts', get_current_timestamp())
            
            return cls(
                topic=topic,
                data=data,
                timestamp=timestamp,
                success=True
            )
        except Exception as e:
            return cls(
                topic='error',
                data=None,
                timestamp=get_current_timestamp(),
                success=False,
                error_message=str(e)
            )


# ============================================================================
# WEBSOCKET MANAGER CLASS
# ============================================================================

class WebSocketManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å Bybit
    
    –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
    - –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø—É–±–ª–∏—á–Ω—ã–º –∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–º –ø–æ—Ç–æ–∫–∞–º
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
    - –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
    - Rate limiting –∏ error handling
    """
    
    def __init__(self, settings: Optional[Settings] = None):
        self.settings = settings or get_settings()
        self.logger = get_websocket_logger()
        
        # WebSocket connections
        self.public_ws: Optional[websockets.WebSocketServerProtocol] = None
        self.private_ws: Optional[websockets.WebSocketServerProtocol] = None
        
        # Connection status
        self.public_status = WSConnectionStatus.DISCONNECTED
        self.private_status = WSConnectionStatus.DISCONNECTED
        
        # URLs based on testnet setting
        self.public_url = BYBIT_WS_TESTNET_PUBLIC if self.settings.BYBIT_TESTNET else BYBIT_WS_MAINNET_PUBLIC
        self.private_url = BYBIT_WS_TESTNET_PRIVATE if self.settings.BYBIT_TESTNET else BYBIT_WS_MAINNET_PRIVATE
        
        # Subscriptions
        self.subscriptions: Dict[str, WSSubscription] = {}
        self.callbacks: Dict[str, List[Callable]] = {}
        
        # Connection management
        self._running = False
        self._reconnect_attempts = {}
        self._last_ping = {}
        self._ping_interval = self.settings.WS_PING_INTERVAL
        self._ping_timeout = self.settings.WS_PING_TIMEOUT
        
        # Message queues
        self._message_queues: Dict[str, asyncio.Queue] = {
            'public': asyncio.Queue(maxsize=1000),
            'private': asyncio.Queue(maxsize=1000)
        }
        
        # Statistics
        self.stats = {
            'messages_received': 0,
            'messages_processed': 0,
            'subscription_count': 0,
            'reconnect_count': 0,
            'errors': 0,
            'uptime_start': None
        }
        
        # Tasks
        self._tasks: Set[asyncio.Task] = set()
        
        self.logger.info(f"üåê WebSocket Manager initialized (testnet: {self.settings.BYBIT_TESTNET})")
    
    # ========================================================================
    # CONNECTION MANAGEMENT
    # ========================================================================
    
    async def start(self) -> None:
        """–ó–∞–ø—É—Å–∫ WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        if self._running:
            return
        
        try:
            self.logger.info("üöÄ Starting WebSocket Manager...")
            self._running = True
            self.stats['uptime_start'] = get_current_timestamp()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
            self._start_background_tasks()
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ø—É–±–ª–∏—á–Ω–æ–º—É –ø–æ—Ç–æ–∫—É
            await self._connect_public()
            
            self.logger.info("‚úÖ WebSocket Manager started successfully")
            
        except Exception as e:
            self.logger.error(f"‚ùå Failed to start WebSocket Manager: {e}")
            await self.stop()
            raise
    
    async def stop(self) -> None:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        if not self._running:
            return
        
        try:
            self.logger.info("üîÑ Stopping WebSocket Manager...")
            self._running = False
            
            # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
            for task in self._tasks:
                if not task.done():
                    task.cancel()
            
            if self._tasks:
                await asyncio.gather(*self._tasks, return_exceptions=True)
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            await self._disconnect_all()
            
            self.logger.info("‚úÖ WebSocket Manager stopped")
            
        except Exception as e:
            self.logger.error(f"‚ùå Error stopping WebSocket Manager: {e}")
    
    def _start_background_tasks(self) -> None:
        """–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á"""
        # –ó–∞–¥–∞—á–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        task = asyncio.create_task(
            self._message_processor(),
            name="ws_message_processor"
        )
        self._tasks.add(task)
        
        # –ó–∞–¥–∞—á–∞ ping/pong
        task = asyncio.create_task(
            self._heartbeat_task(),
            name="ws_heartbeat"
        )
        self._tasks.add(task)
        
        # –ó–∞–¥–∞—á–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        task = asyncio.create_task(
            self._connection_monitor(),
            name="ws_connection_monitor"
        )
        self._tasks.add(task)
    
    async def _connect_public(self) -> None:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø—É–±–ª–∏—á–Ω–æ–º—É –ø–æ—Ç–æ–∫—É"""
        try:
            self.public_status = WSConnectionStatus.CONNECTING
            self.logger.info(f"üîå Connecting to public WebSocket: {self.public_url}")
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            async with asyncio.timeout(30):
                self.public_ws = await websockets.connect(
                    self.public_url,
                    ping_interval=self._ping_interval,
                    ping_timeout=self._ping_timeout,
                    max_size=2**20,  # 1MB max message size
                    compression=None  # –û—Ç–∫–ª—é—á–∞–µ–º –∫–æ–º–ø—Ä–µ—Å—Å–∏—é –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                )
            
            self.public_status = WSConnectionStatus.CONNECTED
            self.logger.info("‚úÖ Connected to public WebSocket")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
            task = asyncio.create_task(
                self._handle_public_messages(),
                name="public_ws_handler"
            )
            self._tasks.add(task)
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏
            await self._restore_subscriptions('public')
            
        except Exception as e:
            self.public_status = WSConnectionStatus.FAILED
            self.logger.error(f"‚ùå Failed to connect to public WebSocket: {e}")
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            asyncio.create_task(self._schedule_reconnect('public'))
    
    async def _connect_private(self) -> None:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É –ø–æ—Ç–æ–∫—É"""
        try:
            self.private_status = WSConnectionStatus.CONNECTING
            self.logger.info(f"üîê Connecting to private WebSocket: {self.private_url}")
            
            async with asyncio.timeout(30):
                self.private_ws = await websockets.connect(
                    self.private_url,
                    ping_interval=self._ping_interval,
                    ping_timeout=self._ping_timeout,
                    max_size=2**20,
                    compression=None
                )
            
            # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
            await self._authenticate_private()
            
            self.private_status = WSConnectionStatus.CONNECTED
            self.logger.info("‚úÖ Connected and authenticated to private WebSocket")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
            task = asyncio.create_task(
                self._handle_private_messages(),
                name="private_ws_handler"
            )
            self._tasks.add(task)
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
            await self._restore_subscriptions('private')
            
        except Exception as e:
            self.private_status = WSConnectionStatus.FAILED
            self.logger.error(f"‚ùå Failed to connect to private WebSocket: {e}")
            asyncio.create_task(self._schedule_reconnect('private'))
    
    async def _authenticate_private(self) -> None:
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞"""
        try:
            expires = int((time.time() + 10) * 1000)  # 10 —Å–µ–∫—É–Ω–¥ –Ω–∞ –±—É–¥—É—â–µ–µ
            signature_payload = f"GET/realtime{expires}"
            
            signature = generate_signature(
                self.settings.BYBIT_API_SECRET,
                signature_payload
            )
            
            auth_message = {
                "op": "auth",
                "args": [
                    self.settings.BYBIT_API_KEY,
                    expires,
                    signature
                ]
            }
            
            await self.private_ws.send(safe_json_dumps(auth_message))
            self.logger.debug("üîê Authentication message sent")
            
        except Exception as e:
            self.logger.error(f"‚ùå Private WebSocket authentication failed: {e}")
            raise
    
    async def _disconnect_all(self) -> None:
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        disconnect_tasks = []
        
        if self.public_ws and not self.public_ws.closed:
            disconnect_tasks.append(self._close_connection(self.public_ws, 'public'))
        
        if self.private_ws and not self.private_ws.closed:
            disconnect_tasks.append(self._close_connection(self.private_ws, 'private'))
        
        if disconnect_tasks:
            await asyncio.gather(*disconnect_tasks, return_exceptions=True)
        
        self.public_status = WSConnectionStatus.DISCONNECTED
        self.private_status = WSConnectionStatus.DISCONNECTED
    
    async def _close_connection(self, ws: websockets.WebSocketServerProtocol, connection_type: str) -> None:
        """–ó–∞–∫—Ä—ã—Ç–∏–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        try:
            if not ws.closed:
                await ws.close()
            self.logger.debug(f"üîå {connection_type.title()} WebSocket connection closed")
        except Exception as e:
            self.logger.error(f"‚ùå Error closing {connection_type} WebSocket: {e}")
    
    # ========================================================================
    # MESSAGE HANDLING
    # ========================================================================
    
    async def _handle_public_messages(self) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø—É–±–ª–∏—á–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞"""
        try:
            async for message in self.public_ws:
                try:
                    if isinstance(message, str):
                        data = safe_json_loads(message, {})
                        if data:
                            await self._message_queues['public'].put(data)
                            self.stats['messages_received'] += 1
                            
                except Exception as e:
                    self.logger.error(f"‚ùå Error processing public message: {e}")
                    self.stats['errors'] += 1
                    
        except ConnectionClosedError:
            self.logger.warning("‚ö†Ô∏è Public WebSocket connection closed")
            self.public_status = WSConnectionStatus.DISCONNECTED
            asyncio.create_task(self._schedule_reconnect('public'))
            
        except Exception as e:
            self.logger.error(f"‚ùå Public message handler error: {e}")
            self.public_status = WSConnectionStatus.FAILED
            asyncio.create_task(self._schedule_reconnect('public'))
    
    async def _handle_private_messages(self) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞"""
        try:
            async for message in self.private_ws:
                try:
                    if isinstance(message, str):
                        data = safe_json_loads(message, {})
                        if data:
                            await self._message_queues['private'].put(data)
                            self.stats['messages_received'] += 1
                            
                except Exception as e:
                    self.logger.error(f"‚ùå Error processing private message: {e}")
                    self.stats['errors'] += 1
                    
        except ConnectionClosedError:
            self.logger.warning("‚ö†Ô∏è Private WebSocket connection closed")
            self.private_status = WSConnectionStatus.DISCONNECTED
            asyncio.create_task(self._schedule_reconnect('private'))
            
        except Exception as e:
            self.logger.error(f"‚ùå Private message handler error: {e}")
            self.private_status = WSConnectionStatus.FAILED
            asyncio.create_task(self._schedule_reconnect('private'))
    
    async def _message_processor(self) -> None:
        """–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π"""
        while self._running:
            try:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                await self._process_queue_messages('public')
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                await self._process_queue_messages('private')
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
                await asyncio.sleep(0.001)
                
            except asyncio.CancelledError:
                break
            except Exception as e:
                self.logger.error(f"‚ùå Message processor error: {e}")
                await asyncio.sleep(1)
    
    async def _process_queue_messages(self, queue_type: str) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏"""
        queue = self._message_queues[queue_type]
        
        try:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ 50 —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ —Ä–∞–∑
            for _ in range(50):
                try:
                    message_data = queue.get_nowait()
                    await self._process_message(message_data, queue_type)
                    self.stats['messages_processed'] += 1
                    queue.task_done()
                except asyncio.QueueEmpty:
                    break
        except Exception as e:
            self.logger.error(f"‚ùå Error processing {queue_type} queue: {e}")
    
    async def _process_message(self, message_data: Dict[str, Any], source: str) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
            if 'success' in message_data:
                # –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
                await self._handle_operation_response(message_data)
                return
            
            if 'topic' not in message_data:
                return
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            ws_message = WSMessage.from_bybit_message(message_data)
            
            if not ws_message.success:
                self.logger.error(f"‚ùå Failed to parse message: {ws_message.error_message}")
                return
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ —Ç–∏–ø—É —Ç–æ–ø–∏–∫–∞
            await self._dispatch_message(ws_message)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            if self.settings.LOG_WEBSOCKET_MESSAGES:
                self.logger.debug(f"üì® {source} message: {ws_message.topic}")
            
        except Exception as e:
            self.logger.error(f"‚ùå Message processing error: {e}")
            self.stats['errors'] += 1
    
    async def _dispatch_message(self, message: WSMessage) -> None:
        """–î–∏—Å–ø–µ—Ç—á–µ—Ä–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —Ç–æ–ø–∏–∫—É"""
        try:
            topic = message.topic
            
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ callbacks
            matching_callbacks = []
            
            for sub_key, subscription in self.subscriptions.items():
                if subscription.active and topic.startswith(subscription.topic):
                    if subscription.callback:
                        matching_callbacks.append(subscription.callback)
            
            # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ callbacks
            for pattern, callbacks in self.callbacks.items():
                if pattern in topic or pattern == '*':
                    matching_callbacks.extend(callbacks)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º callbacks
            if matching_callbacks:
                for callback in matching_callbacks:
                    try:
                        if asyncio.iscoroutinefunction(callback):
                            await callback(message)
                        else:
                            callback(message)
                    except Exception as e:
                        self.logger.error(f"‚ùå Callback error for {topic}: {e}")
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è kline –¥–∞–Ω–Ω—ã—Ö
            if topic.startswith('kline'):
                await self._handle_kline_message(message)
            
        except Exception as e:
            self.logger.error(f"‚ùå Message dispatch error: {e}")
    
    async def _handle_operation_response(self, response: Dict[str, Any]) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        try:
            success = response.get('success', False)
            op = response.get('op', 'unknown')
            
            if success:
                self.logger.debug(f"‚úÖ Operation successful: {op}")
            else:
                ret_msg = response.get('ret_msg', 'Unknown error')
                self.logger.error(f"‚ùå Operation failed: {op} - {ret_msg}")
                
        except Exception as e:
            self.logger.error(f"‚ùå Operation response handling error: {e}")
    
    async def _handle_kline_message(self, message: WSMessage) -> None:
        """–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ kline –¥–∞–Ω–Ω—ã—Ö"""
        try:
            if not message.data:
                return
            
            for kline_data in message.data:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏–º–≤–æ–ª–µ –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ –∏–∑ —Ç–æ–ø–∏–∫–∞
                # –§–æ—Ä–º–∞—Ç —Ç–æ–ø–∏–∫–∞: kline.1.BTCUSDT
                topic_parts = message.topic.split('.')
                if len(topic_parts) >= 3:
                    interval = topic_parts[1]
                    symbol = topic_parts[2]
                    
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –Ω–∞—à —Ñ–æ—Ä–º–∞—Ç CandleData
                    candle = self._convert_kline_to_candle(kline_data, symbol, interval)
                    
                    if candle:
                        # –ú–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∫–µ—à –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
                        self.logger.debug(f"üìä Kline update: {symbol} {interval} - Price: {candle.close_price}")
                        
        except Exception as e:
            self.logger.error(f"‚ùå Kline message handling error: {e}")
    
    def _convert_kline_to_candle(self, kline_data: Dict[str, Any], symbol: str, interval: str) -> Optional[CandleData]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è kline –¥–∞–Ω–Ω—ã—Ö –≤ CandleData"""
        try:
            return CandleData(
                symbol=symbol,
                timeframe=f"{interval}m",  # Bybit –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–∏–Ω—É—Ç—ã
                open_time=int(kline_data['start']),
                close_time=int(kline_data['end']),
                open_price=float(kline_data['open']),
                high_price=float(kline_data['high']),
                low_price=float(kline_data['low']),
                close_price=float(kline_data['close']),
                volume=float(kline_data['volume']),
                quote_volume=float(kline_data.get('turnover', 0))
            )
        except (KeyError, ValueError) as e:
            self.logger.error(f"‚ùå Kline conversion error: {e}")
            return None
    
    # ========================================================================
    # SUBSCRIPTION MANAGEMENT
    # ========================================================================
    
    async def subscribe(
        self,
        topic: str,
        symbol: Optional[str] = None,
        interval: Optional[str] = None,
        callback: Optional[Callable] = None
    ) -> bool:
        """
        –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–æ–ø–∏–∫
        
        Args:
            topic: –¢–æ–ø–∏–∫ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ (kline, tickers, etc.)
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è kline
            callback: –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
            
        Returns:
            True –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–∞
        """
        try:
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–¥–ø–∏—Å–∫–∏
            subscription = WSSubscription(
                topic=topic,
                symbol=symbol,
                interval=interval,
                callback=callback
            )
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            connection_type = self._get_connection_type_for_topic(topic)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
            subscribe_message = self._build_subscribe_message(topic, symbol, interval)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            success = await self._send_subscription(subscribe_message, connection_type)
            
            if success:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
                sub_key = subscription.subscription_key
                self.subscriptions[sub_key] = subscription
                self.stats['subscription_count'] = len(self.subscriptions)
                
                self.logger.info(f"üì° Subscribed to {sub_key}")
                return True
            else:
                self.logger.error(f"‚ùå Failed to subscribe to {topic}")
                return False
                
        except Exception as e:
            self.logger.error(f"‚ùå Subscription error: {e}")
            return False
    
    async def unsubscribe(self, topic: str, symbol: Optional[str] = None, interval: Optional[str] = None) -> bool:
        """–û—Ç–ø–∏—Å–∫–∞ –æ—Ç —Ç–æ–ø–∏–∫–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–∞
            temp_subscription = WSSubscription(topic=topic, symbol=symbol, interval=interval)
            sub_key = temp_subscription.subscription_key
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–¥–ø–∏—Å–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if sub_key not in self.subscriptions:
                self.logger.warning(f"‚ö†Ô∏è Subscription {sub_key} not found")
                return False
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            connection_type = self._get_connection_type_for_topic(topic)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø–∏—Å–∫–∏
            unsubscribe_message = self._build_unsubscribe_message(topic, symbol, interval)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–ø–∏—Å–∫—É
            success = await self._send_subscription(unsubscribe_message, connection_type)
            
            if success:
                # –£–¥–∞–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
                del self.subscriptions[sub_key]
                self.stats['subscription_count'] = len(self.subscriptions)
                
                self.logger.info(f"üì° Unsubscribed from {sub_key}")
                return True
            else:
                self.logger.error(f"‚ùå Failed to unsubscribe from {topic}")
                return False
                
        except Exception as e:
            self.logger.error(f"‚ùå Unsubscription error: {e}")
            return False
    
    def _get_connection_type_for_topic(self, topic: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è —Ç–æ–ø–∏–∫–∞"""
        private_topics = ['position', 'order', 'execution', 'wallet']
        
        if any(topic.startswith(pt) for pt in private_topics):
            return 'private'
        else:
            return 'public'
    
    def _build_subscribe_message(self, topic: str, symbol: Optional[str], interval: Optional[str]) -> Dict[str, Any]:
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"""
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–æ–ø–∏–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        if topic == 'kline' and symbol and interval:
            full_topic = f"kline.{interval}.{symbol}"
        elif topic == 'tickers' and symbol:
            full_topic = f"tickers.{symbol}"
        elif topic == 'orderbook' and symbol:
            full_topic = f"orderbook.1.{symbol}"  # –ì–ª—É–±–∏–Ω–∞ 1
        elif topic in ['position', 'order', 'execution', 'wallet']:
            full_topic = topic
        else:
            full_topic = f"{topic}.{symbol}" if symbol else topic
        
        return {
            "op": "subscribe",
            "args": [full_topic]
        }
    
    def _build_unsubscribe_message(self, topic: str, symbol: Optional[str], interval: Optional[str]) -> Dict[str, Any]:
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø–∏—Å–∫–∏"""
        subscribe_msg = self._build_subscribe_message(topic, symbol, interval)
        subscribe_msg['op'] = 'unsubscribe'
        return subscribe_msg
    
    async def _send_subscription(self, message: Dict[str, Any], connection_type: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"""
        try:
            if connection_type == 'public':
                if not self.public_ws or self.public_ws.closed:
                    await self._connect_public()
                
                if self.public_ws and not self.public_ws.closed:
                    await self.public_ws.send(safe_json_dumps(message))
                    return True
                    
            elif connection_type == 'private':
                if not self.private_ws or self.private_ws.closed:
                    await self._connect_private()
                
                if self.private_ws and not self.private_ws.closed:
                    await self.private_ws.send(safe_json_dumps(message))
                    return True
            
            return False
            
        except Exception as e:
            self.logger.error(f"‚ùå Failed to send subscription message: {e}")
            return False
    
    async def _restore_subscriptions(self, connection_type: str) -> None:
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        try:
            restored = 0
            
            for subscription in self.subscriptions.values():
                if subscription.active:
                    expected_type = self._get_connection_type_for_topic(subscription.topic)
                    
                    if expected_type == connection_type:
                        message = self._build_subscribe_message(
                            subscription.topic,
                            subscription.symbol,
                            subscription.interval
                        )
                        
                        success = await self._send_subscription(message, connection_type)
                        if success:
                            restored += 1
                        
                        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
                        await asyncio.sleep(0.1)
            
            if restored > 0:
                self.logger.info(f"üîÑ Restored {restored} {connection_type} subscriptions")
                
        except Exception as e:
            self.logger.error(f"‚ùå Failed to restore {connection_type} subscriptions: {e}")
    
    # ========================================================================
    # RECONNECTION MANAGEMENT
    # ========================================================================
    
    async def _schedule_reconnect(self, connection_type: str) -> None:
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        if not self._running:
            return
        
        try:
            retry_count = self._reconnect_attempts.get(connection_type, 0)
            max_retries = self.settings.WS_RETRIES or 10
            
            if retry_count >= max_retries > 0:
                self.logger.error(f"‚ùå Max reconnection attempts reached for {connection_type}")
                return
            
            # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: 1, 2, 4, 8, 16, 32 —Å–µ–∫—É–Ω–¥—ã (–º–∞–∫—Å)
            delay = min(2 ** retry_count, 32)
            
            self.logger.info(f"üîÑ Scheduling {connection_type} reconnection in {delay}s (attempt {retry_count + 1})")
            
            await asyncio.sleep(delay)
            
            if self._running:
                self._reconnect_attempts[connection_type] = retry_count + 1
                
                if connection_type == 'public':
                    await self._connect_public()
                elif connection_type == 'private':
                    await self._connect_private()
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
                if ((connection_type == 'public' and self.public_status == WSConnectionStatus.CONNECTED) or
                    (connection_type == 'private' and self.private_status == WSConnectionStatus.CONNECTED)):
                    self._reconnect_attempts[connection_type] = 0
                    self.stats['reconnect_count'] += 1
                
        except Exception as e:
            self.logger.error(f"‚ùå Reconnection error for {connection_type}: {e}")
    
    # ========================================================================
    # BACKGROUND TASKS
    # ========================================================================
    
    async def _heartbeat_task(self) -> None:
        """–ó–∞–¥–∞—á–∞ heartbeat –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        while self._running:
            try:
                current_time = get_current_timestamp()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ping –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                for connection_type in ['public', 'private']:
                    last_ping = self._last_ping.get(connection_type, 0)
                    
                    if current_time - last_ping > (self._ping_interval * 1000):
                        await self._send_ping(connection_type)
                        self._last_ping[connection_type] = current_time
                
                await asyncio.sleep(self._ping_interval)
                
            except asyncio.CancelledError:
                break
            except Exception as e:
                self.logger.error(f"‚ùå Heartbeat task error: {e}")
                await asyncio.sleep(5)
    
    async def _send_ping(self, connection_type: str) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ ping —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            ping_message = {"op": "ping"}
            
            if connection_type == 'public' and self.public_ws and not self.public_ws.closed:
                await self.public_ws.send(safe_json_dumps(ping_message))
                self.logger.debug("üèì Sent public ping")
                
            elif connection_type == 'private' and self.private_ws and not self.private_ws.closed:
                await self.private_ws.send(safe_json_dumps(ping_message))
                self.logger.debug("üèì Sent private ping")
                
        except Exception as e:
            self.logger.error(f"‚ùå Failed to send {connection_type} ping: {e}")
    
    async def _connection_monitor(self) -> None:
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        while self._running:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
                await self._check_connections_health()
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏
                if self.stats['messages_received'] % 1000 == 0 and self.stats['messages_received'] > 0:
                    self.logger.info(f"üìä WebSocket Stats: {self.get_stats()}")
                
                await asyncio.sleep(30)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                
            except asyncio.CancelledError:
                break
            except Exception as e:
                self.logger.error(f"‚ùå Connection monitor error: {e}")
                await asyncio.sleep(10)
    
    async def _check_connections_health(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É–±–ª–∏—á–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            if (self.public_status == WSConnectionStatus.CONNECTED and 
                self.public_ws and self.public_ws.closed):
                self.logger.warning("‚ö†Ô∏è Public WebSocket unexpectedly closed")
                self.public_status = WSConnectionStatus.DISCONNECTED
                asyncio.create_task(self._schedule_reconnect('public'))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            if (self.private_status == WSConnectionStatus.CONNECTED and 
                self.private_ws and self.private_ws.closed):
                self.logger.warning("‚ö†Ô∏è Private WebSocket unexpectedly closed")
                self.private_status = WSConnectionStatus.DISCONNECTED
                asyncio.create_task(self._schedule_reconnect('private'))
                
        except Exception as e:
            self.logger.error(f"‚ùå Connection health check error: {e}")
    
    # ========================================================================
    # CONVENIENCE METHODS
    # ========================================================================
    
    async def subscribe_kline(self, symbol: str, interval: str, callback: Optional[Callable] = None) -> bool:
        """–ë—ã—Å—Ç—Ä–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ kline –¥–∞–Ω–Ω—ã–µ"""
        return await self.subscribe('kline', symbol=symbol, interval=interval, callback=callback)
    
    async def subscribe_ticker(self, symbol: str, callback: Optional[Callable] = None) -> bool:
        """–ë—ã—Å—Ç—Ä–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ticker –¥–∞–Ω–Ω—ã–µ"""
        return await self.subscribe('tickers', symbol=symbol, callback=callback)
    
    async def subscribe_orderbook(self, symbol: str, callback: Optional[Callable] = None) -> bool:
        """–ë—ã—Å—Ç—Ä–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ orderbook"""
        return await self.subscribe('orderbook', symbol=symbol, callback=callback)
    
    async def subscribe_positions(self, callback: Optional[Callable] = None) -> bool:
        """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π (–ø—Ä–∏–≤–∞—Ç–Ω—ã–π –ø–æ—Ç–æ–∫)"""
        return await self.subscribe('position', callback=callback)
    
    async def subscribe_orders(self, callback: Optional[Callable] = None) -> bool:
        """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤ (–ø—Ä–∏–≤–∞—Ç–Ω—ã–π –ø–æ—Ç–æ–∫)"""
        return await self.subscribe('order', callback=callback)
    
    def add_global_callback(self, pattern: str, callback: Callable) -> None:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ callback –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if pattern not in self.callbacks:
            self.callbacks[pattern] = []
        self.callbacks[pattern].append(callback)
        self.logger.debug(f"üì° Added global callback for pattern: {pattern}")
    
    def remove_global_callback(self, pattern: str, callback: Callable) -> None:
        """–£–¥–∞–ª–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ callback"""
        if pattern in self.callbacks and callback in self.callbacks[pattern]:
            self.callbacks[pattern].remove(callback)
            if not self.callbacks[pattern]:
                del self.callbacks[pattern]
            self.logger.debug(f"üì° Removed global callback for pattern: {pattern}")
    
    # ========================================================================
    # STATUS AND MONITORING
    # ========================================================================
    
    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        current_time = get_current_timestamp()
        uptime = (current_time - self.stats['uptime_start']) // 1000 if self.stats['uptime_start'] else 0
        
        return {
            **self.stats,
            'uptime_seconds': uptime,
            'public_status': self.public_status.value,
            'private_status': self.private_status.value,
            'active_subscriptions': len([s for s in self.subscriptions.values() if s.active]),
            'queue_sizes': {
                'public': self._message_queues['public'].qsize(),
                'private': self._message_queues['private'].qsize()
            },
            'reconnect_attempts': self._reconnect_attempts.copy()
        }
    
    def get_subscriptions_info(self) -> Dict[str, Any]:
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö"""
        return {
            sub_key: {
                'topic': sub.topic,
                'symbol': sub.symbol,
                'interval': sub.interval,
                'active': sub.active,
                'subscribed_at': sub.subscribed_at,
                'has_callback': sub.callback is not None
            }
            for sub_key, sub in self.subscriptions.items()
        }
    
    async def health_check(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        try:
            health = {
                'status': 'healthy' if self._running else 'stopped',
                'public_connected': self.public_status == WSConnectionStatus.CONNECTED,
                'private_connected': self.private_status == WSConnectionStatus.CONNECTED,
                'subscriptions_count': len(self.subscriptions),
                'messages_received': self.stats['messages_received'],
                'error_count': self.stats['errors'],
                'uptime_seconds': (get_current_timestamp() - self.stats['uptime_start']) // 1000 if self.stats['uptime_start'] else 0
            }
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
            if not self._running:
                health['status'] = 'stopped'
            elif self.stats['errors'] > self.stats['messages_received'] * 0.1:  # –ë–æ–ª–µ–µ 10% –æ—à–∏–±–æ–∫
                health['status'] = 'unhealthy'
            elif self.public_status == WSConnectionStatus.CONNECTED:
                health['status'] = 'healthy'
            else:
                health['status'] = 'degraded'
            
            return health
            
        except Exception as e:
            return {
                'status': 'error',
                'error': str(e)
            }
    
    def is_connected(self, connection_type: str = 'public') -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        if connection_type == 'public':
            return self.public_status == WSConnectionStatus.CONNECTED
        elif connection_type == 'private':
            return self.private_status == WSConnectionStatus.CONNECTED
        else:
            return False
    
    def __str__(self) -> str:
        return f"WebSocketManager(public: {self.public_status.value}, private: {self.private_status.value})"
    
    def __repr__(self) -> str:
        return (f"WebSocketManager(running={self._running}, "
                f"public_status='{self.public_status.value}', "
                f"private_status='{self.private_status.value}', "
                f"subscriptions={len(self.subscriptions)})")


# ============================================================================
# CONVENIENCE FUNCTIONS
# ============================================================================

def create_websocket_manager(settings: Optional[Settings] = None) -> WebSocketManager:
    """–°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    return WebSocketManager(settings)


# ============================================================================
# EXAMPLE USAGE
# ============================================================================

if __name__ == "__main__":
    async def test_websocket_manager():
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        print("üß™ Testing WebSocket Manager")
        print("=" * 50)
        
        # Callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        def message_callback(message: WSMessage):
            print(f"üì® Received: {message.topic} at {message.timestamp}")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
            manager = create_websocket_manager()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π callback
            manager.add_global_callback('*', message_callback)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
            await manager.start()
            print("‚úÖ WebSocket Manager started")
            
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –¥–∞–Ω–Ω—ã–µ
            success = await manager.subscribe_kline('BTCUSDT', '1', message_callback)
            print(f"‚úÖ Kline subscription: {success}")
            
            success = await manager.subscribe_ticker('BTCUSDT', message_callback)
            print(f"‚úÖ Ticker subscription: {success}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = manager.get_stats()
            print(f"üìä Stats: {stats}")
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö
            subs_info = manager.get_subscriptions_info()
            print(f"üì° Subscriptions: {len(subs_info)}")
            
            # Health check
            health = await manager.health_check()
            print(f"üè• Health: {health['status']}")
            
            # –ñ–¥–µ–º –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
            print("‚è≥ Waiting for messages (10 seconds)...")
            await asyncio.sleep(10)
            
            # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            final_stats = manager.get_stats()
            print(f"üìä Final stats: messages_received={final_stats['messages_received']}")
            
        except Exception as e:
            print(f"‚ùå Test failed: {e}")
        finally:
            if 'manager' in locals():
                await manager.stop()
                print("‚úÖ WebSocket Manager stopped")
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
    asyncio.run(test_websocket_manager())
