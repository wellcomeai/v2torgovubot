"""
Trading Bot Historical Data Manager
–ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å Bybit
"""

import asyncio
from datetime import datetime, timezone, timedelta
from typing import List, Dict, Any, Optional, Tuple, Union
import time
from dataclasses import dataclass
import pandas as pd
import numpy as np
from pathlib import Path
import json
import sqlite3

from utils.logger import setup_logger
from utils.helpers import (
    get_current_timestamp, timestamp_to_datetime, datetime_to_timestamp,
    parse_timeframe_to_milliseconds, get_candle_open_time,
    safe_float, validate_symbol, validate_timeframe,
    Timer, retry_async
)
from app.config.settings import get_settings


# ============================================================================
# –ö–û–ù–°–¢–ê–ù–¢–´ –ò –¢–ò–ü–´
# ============================================================================

logger = setup_logger(__name__)

# –õ–∏–º–∏—Ç—ã –¥–ª—è Bybit API
BYBIT_MAX_CANDLES_PER_REQUEST = 200
BYBIT_RATE_LIMIT_DELAY = 0.1  # 100ms –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏

# –¢–∞–π–º—Ñ—Ä–µ–π–º—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ Bybit
BYBIT_TIMEFRAMES = ['1m', '3m', '5m', '15m', '30m', '1h', '2h', '4h', '6h', '12h', '1d', '1w']

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
MAX_HISTORY_DAYS = {
    '1m': 30,
    '5m': 60,
    '15m': 90,
    '30m': 180,
    '1h': 365,
    '4h': 730,
    '1d': 1095,  # 3 –≥–æ–¥–∞
    '1w': 2190   # 6 –ª–µ—Ç
}


@dataclass
class CandleData:
    """–î–∞–Ω–Ω—ã–µ –æ–¥–Ω–æ–π —Å–≤–µ—á–∏"""
    symbol: str
    timeframe: str
    open_time: int  # Unix timestamp –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    close_time: int
    open_price: float
    high_price: float
    low_price: float
    close_price: float
    volume: float
    quote_volume: Optional[float] = None
    trades_count: Optional[int] = None
    
    def to_dict(self) -> Dict[str, Any]:
        return {
            'symbol': self.symbol,
            'timeframe': self.timeframe,
            'open_time': self.open_time,
            'close_time': self.close_time,
            'open_price': self.open_price,
            'high_price': self.high_price,
            'low_price': self.low_price,
            'close_price': self.close_price,
            'volume': self.volume,
            'quote_volume': self.quote_volume,
            'trades_count': self.trades_count
        }
    
    @classmethod
    def from_bybit_response(cls, data: List, symbol: str, timeframe: str) -> 'CandleData':
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞ Bybit API"""
        try:
            return cls(
                symbol=symbol,
                timeframe=timeframe,
                open_time=int(data[0]),
                close_time=int(data[0]) + parse_timeframe_to_milliseconds(timeframe) - 1,
                open_price=float(data[1]),
                high_price=float(data[2]),
                low_price=float(data[3]),
                close_price=float(data[4]),
                volume=float(data[5]),
                quote_volume=safe_float(data[6]) if len(data) > 6 else None,
                trades_count=int(data[7]) if len(data) > 7 else None
            )
        except (IndexError, ValueError) as e:
            logger.error(f"‚ùå Failed to parse Bybit candle data: {e}")
            raise ValueError(f"Invalid candle data format: {data}")


@dataclass
class HistoricalDataRequest:
    """–ó–∞–ø—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
    symbol: str
    timeframe: str
    start_time: Optional[int] = None  # Unix timestamp –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    end_time: Optional[int] = None
    limit: int = BYBIT_MAX_CANDLES_PER_REQUEST
    
    def __post_init__(self):
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        if not validate_symbol(self.symbol):
            raise ValueError(f"Invalid symbol: {self.symbol}")
        
        if not validate_timeframe(self.timeframe):
            raise ValueError(f"Invalid timeframe: {self.timeframe}")
        
        if self.limit > BYBIT_MAX_CANDLES_PER_REQUEST:
            self.limit = BYBIT_MAX_CANDLES_PER_REQUEST
        
        # –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã –≤—Ä–µ–º–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ
        if self.end_time is None:
            self.end_time = get_current_timestamp()
        
        if self.start_time is None:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –±–µ—Ä–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –ª–∏–º–∏—Ç–∞–º
            max_days = MAX_HISTORY_DAYS.get(self.timeframe, 30)
            self.start_time = self.end_time - (max_days * 24 * 60 * 60 * 1000)


# ============================================================================
# –û–°–ù–û–í–ù–û–ô –ö–õ–ê–°–° –î–õ–Ø –ò–°–¢–û–†–ò–ß–ï–°–ö–ò–• –î–ê–ù–ù–´–•
# ============================================================================

class HistoricalDataManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å Bybit –∏ –∫–µ—à–∏—Ä—É–µ—Ç –∏—Ö –ª–æ–∫–∞–ª—å–Ω–æ
    """
    
    def __init__(self, bybit_client=None, database=None):
        self.settings = get_settings()
        self.logger = setup_logger(f"{__name__}.HistoricalDataManager")
        
        # –ö–ª–∏–µ–Ω—Ç—ã (–±—É–¥—É—Ç –ø–µ—Ä–µ–¥–∞–Ω—ã –∏–∑–≤–Ω–µ)
        self.bybit_client = bybit_client
        self.database = database
        
        # –ö–µ—à –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏
        self._memory_cache: Dict[str, List[CandleData]] = {}
        self._cache_timestamps: Dict[str, int] = {}
        self._cache_ttl = 60000  # 1 –º–∏–Ω—É—Ç–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'requests_made': 0,
            'cache_hits': 0,
            'cache_misses': 0,
            'data_points_fetched': 0,
            'errors': 0
        }
        
        # –§–∞–π–ª–æ–≤—ã–π –∫–µ—à (–¥–ª—è –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–∞–±–æ—Ç—ã)
        self.cache_dir = Path("data/cache/historical")
        self.cache_dir.mkdir(parents=True, exist_ok=True)
    
    def _get_cache_key(self, symbol: str, timeframe: str, start_time: int = None, end_time: int = None) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –¥–ª—è –∫–µ—à–∞"""
        key_parts = [symbol.upper(), timeframe.lower()]
        
        if start_time:
            key_parts.append(f"start_{start_time}")
        if end_time:
            key_parts.append(f"end_{end_time}")
        
        return "_".join(key_parts)
    
    def _is_cache_valid(self, cache_key: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–µ—à–∞"""
        if cache_key not in self._cache_timestamps:
            return False
        
        cache_time = self._cache_timestamps[cache_key]
        current_time = get_current_timestamp()
        
        return (current_time - cache_time) < self._cache_ttl
    
    async def get_historical_data(
        self,
        symbol: str,
        timeframe: str,
        start_time: Optional[Union[int, str, datetime]] = None,
        end_time: Optional[Union[int, str, datetime]] = None,
        limit: Optional[int] = None,
        use_cache: bool = True
    ) -> List[CandleData]:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'BTCUSDT')
            timeframe: –¢–∞–π–º—Ñ—Ä–µ–π–º ('1m', '5m', '1h', etc.)
            start_time: –ù–∞—á–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è (timestamp, datetime –∏–ª–∏ ISO string)
            end_time: –ö–æ–Ω–µ—á–Ω–æ–µ –≤—Ä–µ–º—è
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π
            use_cache: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–µ—à
        
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–≤–µ—á–µ–π CandleData
        """
        try:
            with Timer(f"get_historical_data_{symbol}_{timeframe}"):
                # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                symbol = symbol.upper()
                timeframe = timeframe.lower()
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–∞ –≤ timestamp
                start_ts = self._convert_to_timestamp(start_time) if start_time else None
                end_ts = self._convert_to_timestamp(end_time) if end_time else None
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å
                request = HistoricalDataRequest(
                    symbol=symbol,
                    timeframe=timeframe,
                    start_time=start_ts,
                    end_time=end_ts,
                    limit=limit or BYBIT_MAX_CANDLES_PER_REQUEST
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
                cache_key = self._get_cache_key(symbol, timeframe, start_ts, end_ts)
                
                if use_cache and self._is_cache_valid(cache_key):
                    self.stats['cache_hits'] += 1
                    self.logger.debug(f"üì± Cache hit for {cache_key}")
                    return self._memory_cache[cache_key]
                
                self.stats['cache_misses'] += 1
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                candles = await self._fetch_data_from_source(request)
                
                # –ö–µ—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if use_cache:
                    self._memory_cache[cache_key] = candles
                    self._cache_timestamps[cache_key] = get_current_timestamp()
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                if self.database and candles:
                    await self._save_to_database(candles)
                
                self.stats['data_points_fetched'] += len(candles)
                self.logger.info(f"‚úÖ Fetched {len(candles)} candles for {symbol} {timeframe}")
                
                return candles
                
        except Exception as e:
            self.stats['errors'] += 1
            self.logger.error(f"‚ùå Failed to get historical data for {symbol} {timeframe}: {e}")
            
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫–µ—à–∞ –∏–ª–∏ –ë–î –∫–∞–∫ fallback
            if use_cache:
                fallback_data = await self._get_fallback_data(symbol, timeframe, start_ts, end_ts)
                if fallback_data:
                    self.logger.warning(f"‚ö†Ô∏è Using fallback data: {len(fallback_data)} candles")
                    return fallback_data
            
            raise
    
    async def _fetch_data_from_source(self, request: HistoricalDataRequest) -> List[CandleData]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (Bybit API –∏–ª–∏ —Ñ–∞–π–ª–æ–≤—ã–π –∫–µ—à)"""
        candles = []
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å Bybit –∫–ª–∏–µ–Ω—Ç, –ø–æ–ª—É—á–∞–µ–º —Å API
        if self.bybit_client:
            candles = await self._fetch_from_bybit_api(request)
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å API, –ø—Ä–æ–±—É–µ–º —Ñ–∞–π–ª–æ–≤—ã–π –∫–µ—à
        if not candles:
            candles = await self._load_from_file_cache(request)
        
        # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, —Å–æ–∑–¥–∞–µ–º mock –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        if not candles and self.settings.ENVIRONMENT == "development":
            self.logger.warning("‚ö†Ô∏è No data available, generating mock data for development")
            candles = await self._generate_mock_data(request)
        
        return candles
    
    async def _fetch_from_bybit_api(self, request: HistoricalDataRequest) -> List[CandleData]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å Bybit API"""
        try:
            all_candles = []
            current_end_time = request.end_time
            remaining_limit = request.limit
            
            # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö —á–µ–º –º–∞–∫—Å–∏–º—É–º –∑–∞ –∑–∞–ø—Ä–æ—Å, –¥–µ–ª–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤
            while remaining_limit > 0 and current_end_time > request.start_time:
                batch_limit = min(remaining_limit, BYBIT_MAX_CANDLES_PER_REQUEST)
                
                self.logger.debug(
                    f"üîÑ Fetching batch: {request.symbol} {request.timeframe} "
                    f"limit={batch_limit} end_time={current_end_time}"
                )
                
                # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ –∫ Bybit
                api_params = {
                    'category': 'linear',
                    'symbol': request.symbol,
                    'interval': request.timeframe,
                    'limit': batch_limit,
                    'end': current_end_time
                }
                
                if request.start_time:
                    api_params['start'] = max(request.start_time, 
                                            current_end_time - (batch_limit * parse_timeframe_to_milliseconds(request.timeframe)))
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —Å retry –ª–æ–≥–∏–∫–æ–π
                response = await retry_async(
                    lambda: self.bybit_client.get_kline(**api_params),
                    max_retries=3,
                    delay=1.0,
                    exceptions=(Exception,)
                )
                
                self.stats['requests_made'] += 1
                
                # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
                if response and 'result' in response and 'list' in response['result']:
                    batch_data = response['result']['list']
                    
                    batch_candles = []
                    for candle_data in batch_data:
                        try:
                            candle = CandleData.from_bybit_response(
                                candle_data, request.symbol, request.timeframe
                            )
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–≤–µ—á–∞ –≤ –Ω—É–∂–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
                            if request.start_time <= candle.open_time <= request.end_time:
                                batch_candles.append(candle)
                        except Exception as e:
                            self.logger.warning(f"‚ö†Ô∏è Skipping invalid candle data: {e}")
                            continue
                    
                    if not batch_candles:
                        self.logger.debug("üìä No more data available from API")
                        break
                    
                    all_candles.extend(batch_candles)
                    remaining_limit -= len(batch_candles)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                    oldest_candle_time = min(c.open_time for c in batch_candles)
                    current_end_time = oldest_candle_time - 1
                    
                    self.logger.debug(f"üìä Fetched {len(batch_candles)} candles in batch")
                    
                    # Rate limiting
                    await asyncio.sleep(BYBIT_RATE_LIMIT_DELAY)
                    
                else:
                    self.logger.warning(f"‚ö†Ô∏è Invalid API response format: {response}")
                    break
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º)
            all_candles.sort(key=lambda x: x.open_time)
            
            self.logger.info(f"‚úÖ Fetched {len(all_candles)} candles from Bybit API")
            return all_candles
            
        except Exception as e:
            self.logger.error(f"‚ùå Bybit API fetch failed: {e}")
            return []
    
    async def _save_to_database(self, candles: List[CandleData]) -> None:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            if not candles:
                return
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            market_data_list = []
            
            for candle in candles:
                market_data = {
                    'symbol': candle.symbol,
                    'timeframe': candle.timeframe,
                    'open_time': candle.open_time,
                    'close_time': candle.close_time,
                    'open_price': candle.open_price,
                    'high_price': candle.high_price,
                    'low_price': candle.low_price,
                    'close_price': candle.close_price,
                    'volume': candle.volume,
                    'quote_volume': candle.quote_volume,
                    'trades_count': candle.trades_count
                }
                market_data_list.append(market_data)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            await self.database.save_market_data(market_data_list)
            self.logger.debug(f"üíæ Saved {len(market_data_list)} candles to database")
            
        except Exception as e:
            self.logger.error(f"‚ùå Failed to save to database: {e}")
    
    async def _load_from_file_cache(self, request: HistoricalDataRequest) -> List[CandleData]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –∫–µ—à–∞"""
        try:
            cache_filename = f"{request.symbol}_{request.timeframe}.json"
            cache_file = self.cache_dir / cache_filename
            
            if not cache_file.exists():
                return []
            
            with open(cache_file, 'r') as f:
                cached_data = json.load(f)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ CandleData –æ–±—ä–µ–∫—Ç—ã
            candles = []
            for data in cached_data:
                candle = CandleData(**data)
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if (request.start_time <= candle.open_time <= request.end_time):
                    candles.append(candle)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            if len(candles) > request.limit:
                candles = candles[-request.limit:]  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ
            
            self.logger.debug(f"üìÇ Loaded {len(candles)} candles from file cache")
            return candles
            
        except Exception as e:
            self.logger.error(f"‚ùå Failed to load from file cache: {e}")
            return []
    
    async def _save_to_file_cache(self, candles: List[CandleData], symbol: str, timeframe: str) -> None:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª–æ–≤—ã–π –∫–µ—à"""
        try:
            if not candles:
                return
            
            cache_filename = f"{symbol}_{timeframe}.json"
            cache_file = self.cache_dir / cache_filename
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            existing_data = []
            if cache_file.exists():
                try:
                    with open(cache_file, 'r') as f:
                        existing_data = json.load(f)
                except:
                    pass
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            new_data = [candle.to_dict() for candle in candles]
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            all_data = existing_data + new_data
            
            # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ open_time
            unique_data = {}
            for item in all_data:
                key = item['open_time']
                unique_data[key] = item
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            sorted_data = sorted(unique_data.values(), key=lambda x: x['open_time'])
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–µ—à–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10000 —Å–≤–µ—á–µ–π)
            if len(sorted_data) > 10000:
                sorted_data = sorted_data[-10000:]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            with open(cache_file, 'w') as f:
                json.dump(sorted_data, f, indent=2)
            
            self.logger.debug(f"üíæ Saved {len(sorted_data)} candles to file cache")
            
        except Exception as e:
            self.logger.error(f"‚ùå Failed to save to file cache: {e}")
    
    async def _get_fallback_data(
        self, 
        symbol: str, 
        timeframe: str, 
        start_time: int = None, 
        end_time: int = None
    ) -> List[CandleData]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ fallback –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ø—Ä–∏ –æ—à–∏–±–∫–µ"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            if self.database:
                db_data = await self.database.get_historical_data(symbol, timeframe, 1000)
                if db_data:
                    candles = []
                    for db_candle in db_data:
                        candle = CandleData(
                            symbol=db_candle.symbol,
                            timeframe=db_candle.timeframe,
                            open_time=db_candle.open_time,
                            close_time=db_candle.close_time,
                            open_price=float(db_candle.open_price),
                            high_price=float(db_candle.high_price),
                            low_price=float(db_candle.low_price),
                            close_price=float(db_candle.close_price),
                            volume=float(db_candle.volume),
                            quote_volume=float(db_candle.quote_volume) if db_candle.quote_volume else None,
                            trades_count=db_candle.trades_count
                        )
                        candles.append(candle)
                    
                    self.logger.debug(f"üìä Loaded {len(candles)} candles from database fallback")
                    return candles
            
            # –ó–∞—Ç–µ–º –ø—Ä–æ–±—É–µ–º —Ñ–∞–π–ª–æ–≤—ã–π –∫–µ—à
            request = HistoricalDataRequest(symbol, timeframe, start_time, end_time)
            file_data = await self._load_from_file_cache(request)
            if file_data:
                return file_data
            
            return []
            
        except Exception as e:
            self.logger.error(f"‚ùå Fallback data retrieval failed: {e}")
            return []
    
    async def _generate_mock_data(self, request: HistoricalDataRequest) -> List[CandleData]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è mock –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"""
        try:
            self.logger.warning(f"üîß Generating mock data for {request.symbol} {request.timeframe}")
            
            candles = []
            timeframe_ms = parse_timeframe_to_milliseconds(request.timeframe)
            
            # –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–∏–º–≤–æ–ª–∞
            base_prices = {
                'BTCUSDT': 45000.0,
                'ETHUSDT': 3000.0,
                'ADAUSDT': 0.5,
                'SOLUSDT': 100.0,
                'DOTUSDT': 15.0
            }
            
            base_price = base_prices.get(request.symbol, 1000.0)
            current_price = base_price
            current_time = request.start_time or (request.end_time - (request.limit * timeframe_ms))
            
            for i in range(request.limit):
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
                price_change = np.random.normal(0, 0.02)  # 2% –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
                new_price = current_price * (1 + price_change)
                
                # OHLC –¥–∞–Ω–Ω—ã–µ
                open_price = current_price
                close_price = new_price
                high_price = max(open_price, close_price) * (1 + abs(np.random.normal(0, 0.01)))
                low_price = min(open_price, close_price) * (1 - abs(np.random.normal(0, 0.01)))
                volume = np.random.uniform(100, 10000)
                
                candle = CandleData(
                    symbol=request.symbol,
                    timeframe=request.timeframe,
                    open_time=current_time,
                    close_time=current_time + timeframe_ms - 1,
                    open_price=open_price,
                    high_price=high_price,
                    low_price=low_price,
                    close_price=close_price,
                    volume=volume,
                    quote_volume=volume * ((open_price + close_price) / 2)
                )
                
                candles.append(candle)
                current_price = new_price
                current_time += timeframe_ms
                
                # –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –µ—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ end_time
                if current_time > request.end_time:
                    break
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º mock –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª–æ–≤—ã–π –∫–µ—à –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
            await self._save_to_file_cache(candles, request.symbol, request.timeframe)
            
            self.logger.info(f"üîß Generated {len(candles)} mock candles")
            return candles
            
        except Exception as e:
            self.logger.error(f"‚ùå Mock data generation failed: {e}")
            return []
    
    def _convert_to_timestamp(self, time_input: Union[int, str, datetime]) -> int:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–∏ –≤ timestamp –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã"""
        if isinstance(time_input, int):
            # –ï—Å–ª–∏ —É–∂–µ timestamp, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç (—Å–µ–∫—É–Ω–¥—ã vs –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã)
            if time_input < 1e10:  # –í–µ—Ä–æ—è—Ç–Ω–æ —Å–µ–∫—É–Ω–¥—ã
                return int(time_input * 1000)
            else:  # –í–µ—Ä–æ—è—Ç–Ω–æ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
                return time_input
                
        elif isinstance(time_input, str):
            # ISO —Å—Ç—Ä–æ–∫–∞
            try:
                dt = pd.to_datetime(time_input)
                return int(dt.timestamp() * 1000)
            except:
                raise ValueError(f"Invalid time string format: {time_input}")
                
        elif isinstance(time_input, datetime):
            # datetime –æ–±—ä–µ–∫—Ç
            return datetime_to_timestamp(time_input, milliseconds=True)
        
        else:
            raise ValueError(f"Unsupported time format: {type(time_input)}")
    
    # ========================================================================
    # PUBLIC CONVENIENCE METHODS
    # ========================================================================
    
    async def get_recent_candles(
        self,
        symbol: str,
        timeframe: str,
        count: int = 100
    ) -> List[CandleData]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö N —Å–≤–µ—á–µ–π"""
        return await self.get_historical_data(
            symbol=symbol,
            timeframe=timeframe,
            limit=count
        )
    
    async def get_candles_for_period(
        self,
        symbol: str,
        timeframe: str,
        days: int = 30
    ) -> List[CandleData]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–µ—á–µ–π –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π"""
        end_time = get_current_timestamp()
        start_time = end_time - (days * 24 * 60 * 60 * 1000)
        
        return await self.get_historical_data(
            symbol=symbol,
            timeframe=timeframe,
            start_time=start_time,
            end_time=end_time,
            limit=10000  # –ë–æ–ª—å—à–æ–π –ª–∏–º–∏—Ç –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤
        )
    
    async def get_candles_between_dates(
        self,
        symbol: str,
        timeframe: str,
        start_date: Union[str, datetime],
        end_date: Union[str, datetime]
    ) -> List[CandleData]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–µ—á–µ–π –º–µ–∂–¥—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏"""
        start_ts = self._convert_to_timestamp(start_date)
        end_ts = self._convert_to_timestamp(end_date)
        
        return await self.get_historical_data(
            symbol=symbol,
            timeframe=timeframe,
            start_time=start_ts,
            end_time=end_ts,
            limit=10000
        )
    
    def clear_cache(self, symbol: str = None, timeframe: str = None) -> None:
        """–û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞"""
        if symbol and timeframe:
            # –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–µ—à–∞
            keys_to_remove = [k for k in self._memory_cache.keys() 
                             if k.startswith(f"{symbol.upper()}_{timeframe.lower()}")]
        else:
            # –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
            keys_to_remove = list(self._memory_cache.keys())
        
        for key in keys_to_remove:
            self._memory_cache.pop(key, None)
            self._cache_timestamps.pop(key, None)
        
        self.logger.info(f"üßπ Cleared {len(keys_to_remove)} cache entries")
    
    def get_cache_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–µ—à–∞"""
        return {
            'memory_cache_entries': len(self._memory_cache),
            'cache_hit_rate': (self.stats['cache_hits'] / max(self.stats['cache_hits'] + self.stats['cache_misses'], 1)) * 100,
            'total_requests': self.stats['requests_made'],
            'total_data_points': self.stats['data_points_fetched'],
            'total_errors': self.stats['errors'],
            **self.stats
        }
    
    def to_dataframe(self, candles: List[CandleData]) -> pd.DataFrame:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å–≤–µ—á–µ–π –≤ pandas DataFrame"""
        if not candles:
            return pd.DataFrame()
        
        data = []
        for candle in candles:
            data.append({
                'timestamp': candle.open_time,
                'datetime': timestamp_to_datetime(candle.open_time),
                'open': candle.open_price,
                'high': candle.high_price,
                'low': candle.low_price,
                'close': candle.close_price,
                'volume': candle.volume,
                'quote_volume': candle.quote_volume,
                'trades_count': candle.trades_count
            })
        
        df = pd.DataFrame(data)
        df.set_index('datetime', inplace=True)
        df.sort_index(inplace=True)
        
        return df
    
    async def cleanup_old_cache_files(self, max_age_days: int = 7) -> None:
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ –∫–µ—à–∞"""
        try:
            cutoff_time = time.time() - (max_age_days * 24 * 60 * 60)
            
            cleaned_files = 0
            for cache_file in self.cache_dir.glob("*.json"):
                if cache_file.stat().st_mtime < cutoff_time:
                    cache_file.unlink()
                    cleaned_files += 1
            
            self.logger.info(f"üßπ Cleaned {cleaned_files} old cache files")
            
        except Exception as e:
            self.logger.error(f"‚ùå Failed to cleanup old cache files: {e}")


# ============================================================================
# CONVENIENCE FUNCTIONS
# ============================================================================

async def get_historical_candles(
    symbol: str,
    timeframe: str,
    limit: int = 100,
    bybit_client=None,
    database=None
) -> List[CandleData]:
    """–ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
    manager = HistoricalDataManager(bybit_client, database)
    return await manager.get_historical_data(symbol, timeframe, limit=limit)


async def get_ohlcv_dataframe(
    symbol: str,
    timeframe: str,
    days: int = 30,
    bybit_client=None,
    database=None
) -> pd.DataFrame:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ DataFrame"""
    manager = HistoricalDataManager(bybit_client, database)
    candles = await manager.get_candles_for_period(symbol, timeframe, days)
    return manager.to_dataframe(candles)


# ============================================================================
# EXAMPLE USAGE AND TESTING
# ============================================================================

if __name__ == "__main__":
    async def test_historical_data():
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        print("üß™ Testing Historical Data Manager")
        print("=" * 50)
        
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        manager = HistoricalDataManager()
        
        try:
            # –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–¥–∞–≤–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö (–±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å mock)
            print("üìä Test 1: Getting recent candles...")
            candles = await manager.get_recent_candles('BTCUSDT', '5m', 50)
            print(f"‚úÖ Got {len(candles)} candles")
            
            if candles:
                print(f"First candle: {candles[0].open_time} - Price: {candles[0].close_price}")
                print(f"Last candle: {candles[-1].open_time} - Price: {candles[-1].close_price}")
            
            # –¢–µ—Å—Ç 2: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ DataFrame
            print("\nüìä Test 2: Converting to DataFrame...")
            df = manager.to_dataframe(candles)
            print(f"‚úÖ DataFrame shape: {df.shape}")
            print(df.head())
            
            # –¢–µ—Å—Ç 3: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à–∞
            print("\nüìä Test 3: Cache statistics...")
            stats = manager.get_cache_stats()
            print(f"‚úÖ Cache stats: {stats}")
            
            # –¢–µ—Å—Ç 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –∫–µ—à–∞
            print("\nüìä Test 4: File cache test...")
            await manager._save_to_file_cache(candles, 'BTCUSDT', '5m')
            print("‚úÖ Data saved to file cache")
            
            # –¢–µ—Å—Ç 5: –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –∫–µ—à–∞
            request = HistoricalDataRequest('BTCUSDT', '5m')
            cached_candles = await manager._load_from_file_cache(request)
            print(f"‚úÖ Loaded {len(cached_candles)} candles from file cache")
            
            print("\n‚úÖ All historical data tests completed!")
            
        except Exception as e:
            print(f"‚ùå Test failed: {e}")
            import traceback
            traceback.print_exc()
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    asyncio.run(test_historical_data())
