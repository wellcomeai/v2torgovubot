"""
Trading Bot Backtest Engine
–î–≤–∏–∂–æ–∫ –¥–ª—è –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π
"""

import asyncio
from datetime import datetime, timezone, timedelta
from typing import Dict, List, Any, Optional, Tuple, Union
from dataclasses import dataclass, field
from enum import Enum
import math
import numpy as np
from concurrent.futures import ThreadPoolExecutor, as_completed
import uuid

from utils.logger import setup_logger
from utils.helpers import (
    get_current_timestamp, safe_float, timestamp_to_datetime,
    parse_timeframe_to_milliseconds, Timer
)
from app.config.settings import Settings, get_settings
from data.database import Database
from data.models import BacktestResult, BacktestTrade, BacktestStatus
from data.historical_data import CandleData
from strategies.base_strategy import BaseStrategy, StrategyResult, SignalType, StrategyConfig
from strategies.strategy_registry import StrategyRegistry


# ============================================================================
# CONSTANTS AND ENUMS
# ============================================================================

logger = setup_logger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞
DEFAULT_INITIAL_BALANCE = 10000.0
DEFAULT_COMMISSION = 0.001  # 0.1%
DEFAULT_SLIPPAGE = 0.0001  # 0.01%
MIN_TRADE_SIZE = 0.001  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Å–¥–µ–ª–∫–∏

# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
MAX_CONCURRENT_BACKTESTS = 3
MAX_BACKTEST_DURATION_DAYS = 365 * 2  # 2 –≥–æ–¥–∞
MAX_CANDLES_PER_BACKTEST = 100000

# –ü–µ—Ä–∏–æ–¥—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –º–µ—Ç—Ä–∏–∫
TRADING_DAYS_PER_YEAR = 252


class BacktestError(Exception):
    """–û—à–∏–±–∫–∏ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞"""
    pass


class OrderType(str, Enum):
    """–¢–∏–ø—ã –æ—Ä–¥–µ—Ä–æ–≤ –≤ –±—ç–∫—Ç–µ—Å—Ç–µ"""
    MARKET = "market"
    LIMIT = "limit"
    STOP = "stop"
    STOP_LIMIT = "stop_limit"


@dataclass
class BacktestPosition:
    """–ü–æ–∑–∏—Ü–∏—è –≤ –±—ç–∫—Ç–µ—Å—Ç–µ"""
    symbol: str
    side: str  # "long" / "short"
    size: float
    entry_price: float
    entry_time: int
    stop_loss: Optional[float] = None
    take_profit: Optional[float] = None
    unrealized_pnl: float = 0.0
    
    def update_pnl(self, current_price: float) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ PnL"""
        if self.side == "long":
            self.unrealized_pnl = (current_price - self.entry_price) * self.size
        else:
            self.unrealized_pnl = (self.entry_price - current_price) * self.size


@dataclass
class BacktestTrade:
    """–°–¥–µ–ª–∫–∞ –≤ –±—ç–∫—Ç–µ—Å—Ç–µ"""
    symbol: str
    side: str  # "buy" / "sell"
    size: float
    price: float
    timestamp: int
    commission: float
    signal_type: Optional[str] = None
    strategy_confidence: Optional[float] = None
    
    @property
    def notional(self) -> float:
        """–ù–æ–º–∏–Ω–∞–ª —Å–¥–µ–ª–∫–∏"""
        return self.size * self.price


@dataclass
class BacktestOrder:
    """–û—Ä–¥–µ—Ä –≤ –±—ç–∫—Ç–µ—Å—Ç–µ"""
    id: str
    symbol: str
    side: str
    size: float
    order_type: OrderType
    price: Optional[float] = None  # None –¥–ª—è market orders
    stop_price: Optional[float] = None
    timestamp: int = field(default_factory=get_current_timestamp)
    filled: bool = False
    fill_price: Optional[float] = None
    fill_time: Optional[int] = None


@dataclass
class BacktestPortfolio:
    """–ü–æ—Ä—Ç—Ñ–µ–ª—å –≤ –±—ç–∫—Ç–µ—Å—Ç–µ"""
    initial_balance: float
    current_balance: float
    positions: Dict[str, BacktestPosition] = field(default_factory=dict)
    open_orders: Dict[str, BacktestOrder] = field(default_factory=dict)
    
    # –ò—Å—Ç–æ—Ä–∏—è
    trades: List[BacktestTrade] = field(default_factory=list)
    balance_history: List[Tuple[int, float]] = field(default_factory=list)
    
    @property
    def total_exposure(self) -> float:
        """–û–±—â–∞—è —ç–∫—Å–ø–æ–∑–∏—Ü–∏—è"""
        return sum(abs(pos.size * pos.entry_price) for pos in self.positions.values())
    
    @property
    def unrealized_pnl(self) -> float:
        """–û–±—â–∏–π –Ω–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π PnL"""
        return sum(pos.unrealized_pnl for pos in self.positions.values())
    
    @property
    def total_equity(self) -> float:
        """–û–±—â–∏–π –∫–∞–ø–∏—Ç–∞–ª"""
        return self.current_balance + self.unrealized_pnl
    
    def add_balance_snapshot(self, timestamp: int) -> None:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–Ω–∏–º–∫–∞ –±–∞–ª–∞–Ω—Å–∞"""
        self.balance_history.append((timestamp, self.total_equity))


@dataclass
class BacktestMetrics:
    """–ú–µ—Ç—Ä–∏–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –±—ç–∫—Ç–µ—Å—Ç–∞"""
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    total_return: float = 0.0
    annualized_return: float = 0.0
    total_trades: int = 0
    winning_trades: int = 0
    losing_trades: int = 0
    win_rate: float = 0.0
    
    # PnL –º–µ—Ç—Ä–∏–∫–∏
    gross_profit: float = 0.0
    gross_loss: float = 0.0
    net_profit: float = 0.0
    profit_factor: float = 0.0
    
    # –†–∏—Å–∫-–º–µ—Ç—Ä–∏–∫–∏
    max_drawdown: float = 0.0
    max_drawdown_duration: int = 0  # –¥–Ω–∏
    volatility: float = 0.0
    sharpe_ratio: float = 0.0
    calmar_ratio: float = 0.0
    
    # –¢–æ—Ä–≥–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    avg_trade: float = 0.0
    avg_winning_trade: float = 0.0
    avg_losing_trade: float = 0.0
    largest_winning_trade: float = 0.0
    largest_losing_trade: float = 0.0
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    total_fees: float = 0.0
    max_consecutive_wins: int = 0
    max_consecutive_losses: int = 0
    avg_trade_duration: float = 0.0  # —á–∞—Å—ã
    
    def to_dict(self) -> Dict[str, Any]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å"""
        return {
            'total_return': round(self.total_return, 4),
            'annualized_return': round(self.annualized_return, 4),
            'total_trades': self.total_trades,
            'winning_trades': self.winning_trades,
            'losing_trades': self.losing_trades,
            'win_rate': round(self.win_rate, 4),
            'gross_profit': round(self.gross_profit, 2),
            'gross_loss': round(self.gross_loss, 2),
            'net_profit': round(self.net_profit, 2),
            'profit_factor': round(self.profit_factor, 4),
            'max_drawdown': round(self.max_drawdown, 4),
            'max_drawdown_duration': self.max_drawdown_duration,
            'volatility': round(self.volatility, 4),
            'sharpe_ratio': round(self.sharpe_ratio, 4),
            'calmar_ratio': round(self.calmar_ratio, 4),
            'avg_trade': round(self.avg_trade, 2),
            'avg_winning_trade': round(self.avg_winning_trade, 2),
            'avg_losing_trade': round(self.avg_losing_trade, 2),
            'largest_winning_trade': round(self.largest_winning_trade, 2),
            'largest_losing_trade': round(self.largest_losing_trade, 2),
            'total_fees': round(self.total_fees, 2),
            'max_consecutive_wins': self.max_consecutive_wins,
            'max_consecutive_losses': self.max_consecutive_losses,
            'avg_trade_duration': round(self.avg_trade_duration, 2)
        }


# ============================================================================
# BACKTEST ENGINE CLASS
# ============================================================================

class BacktestEngine:
    """
    –î–≤–∏–∂–æ–∫ –¥–ª—è –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
    
    –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
    - –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤
    - –£—á–µ—Ç –∫–æ–º–∏—Å—Å–∏–π –∏ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏—è
    - –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
    - –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±—ç–∫—Ç–µ—Å—Ç–æ–≤
    """
    
    def __init__(
        self,
        database: Optional[Database] = None,
        bybit_client=None,
        data_manager=None,
        settings: Optional[Settings] = None
    ):
        self.database = database
        self.bybit_client = bybit_client
        self.data_manager = data_manager
        self.settings = settings or get_settings()
        self.logger = setup_logger(f"{__name__}.BacktestEngine")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞
        self.max_concurrent = min(
            self.settings.BACKTEST_MAX_CONCURRENT,
            MAX_CONCURRENT_BACKTESTS
        )
        self.timeout = self.settings.BACKTEST_TIMEOUT
        
        # Executor –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
        self._executor = ThreadPoolExecutor(
            max_workers=self.max_concurrent,
            thread_name_prefix="BacktestEngine"
        )
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –±—ç–∫—Ç–µ—Å—Ç—ã
        self._active_backtests: Dict[str, asyncio.Task] = {}
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'total_backtests': 0,
            'successful_backtests': 0,
            'failed_backtests': 0,
            'avg_execution_time': 0.0
        }
        
        self.logger.info("üß™ Backtest Engine initialized")
    
    # ========================================================================
    # PUBLIC API METHODS
    # ========================================================================
    
    async def run_backtest(
        self,
        strategy_name: str,
        symbol: str,
        start_date: Union[str, datetime],
        end_date: Union[str, datetime],
        timeframe: str = "5m",
        strategy_params: Optional[Dict[str, Any]] = None,
        initial_balance: float = DEFAULT_INITIAL_BALANCE,
        commission: float = DEFAULT_COMMISSION,
        slippage: float = DEFAULT_SLIPPAGE,
        save_to_db: bool = True
    ) -> Dict[str, Any]:
        """
        –ó–∞–ø—É—Å–∫ –±—ç–∫—Ç–µ—Å—Ç–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        
        Args:
            strategy_name: –ò–º—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            start_date: –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞
            end_date: –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è
            timeframe: –¢–∞–π–º—Ñ—Ä–µ–π–º
            strategy_params: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            initial_balance: –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
            commission: –ö–æ–º–∏—Å—Å–∏—è –∑–∞ —Å–¥–µ–ª–∫—É
            slippage: –ü—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ
            save_to_db: –°–æ—Ö—Ä–∞–Ω—è—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –ë–î
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—ç–∫—Ç–µ—Å—Ç–∞
        """
        backtest_id = str(uuid.uuid4())
        
        try:
            self.logger.info(f"üß™ Starting backtest: {strategy_name} on {symbol} ({start_date} - {end_date})")
            
            with Timer(f"backtest_{strategy_name}_{symbol}"):
                # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                self._validate_backtest_params(
                    strategy_name, symbol, start_date, end_date, timeframe, initial_balance
                )
                
                # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞—Ç—ã
                start_ts, end_ts = self._normalize_dates(start_date, end_date)
                
                # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
                historical_data = await self._get_historical_data(symbol, timeframe, start_ts, end_ts)
                
                if len(historical_data) < 20:
                    raise BacktestError(f"Insufficient historical data: {len(historical_data)} candles")
                
                # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
                strategy = self._create_strategy(strategy_name, symbol, timeframe, strategy_params or {})
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –±—ç–∫—Ç–µ—Å—Ç
                result = await self._execute_backtest(
                    backtest_id=backtest_id,
                    strategy=strategy,
                    symbol=symbol,
                    timeframe=timeframe,
                    historical_data=historical_data,
                    start_ts=start_ts,
                    end_ts=end_ts,
                    initial_balance=initial_balance,
                    commission=commission,
                    slippage=slippage
                )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                if save_to_db and self.database:
                    await self._save_backtest_results(result)
                
                self.stats['total_backtests'] += 1
                self.stats['successful_backtests'] += 1
                
                self.logger.info(f"‚úÖ Backtest completed: return={result['total_return']:.2%}, trades={result['total_trades']}")
                
                return result
                
        except Exception as e:
            self.stats['failed_backtests'] += 1
            self.logger.error(f"‚ùå Backtest failed: {e}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—à–∏–±–∫—É –≤ –ë–î
            if save_to_db and self.database:
                await self._save_failed_backtest(backtest_id, strategy_name, symbol, str(e))
            
            raise BacktestError(f"Backtest failed: {e}") from e
        
        finally:
            # –û—á–∏—â–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –±—ç–∫—Ç–µ—Å—Ç—ã
            if backtest_id in self._active_backtests:
                del self._active_backtests[backtest_id]
    
    async def run_multiple_backtests(
        self,
        backtest_configs: List[Dict[str, Any]],
        max_concurrent: Optional[int] = None
    ) -> List[Dict[str, Any]]:
        """
        –ó–∞–ø—É—Å–∫ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –±—ç–∫—Ç–µ—Å—Ç–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        
        Args:
            backtest_configs: –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –±—ç–∫—Ç–µ—Å—Ç–æ–≤
            max_concurrent: –ú–∞–∫—Å–∏–º—É–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –±—ç–∫—Ç–µ—Å—Ç–æ–≤
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        """
        max_concurrent = min(max_concurrent or self.max_concurrent, len(backtest_configs))
        
        self.logger.info(f"üß™ Running {len(backtest_configs)} backtests (max_concurrent={max_concurrent})")
        
        results = []
        semaphore = asyncio.Semaphore(max_concurrent)
        
        async def run_single_backtest(config: Dict[str, Any]) -> Dict[str, Any]:
            async with semaphore:
                try:
                    return await self.run_backtest(**config)
                except Exception as e:
                    self.logger.error(f"‚ùå Parallel backtest failed: {e}")
                    return {'error': str(e), 'config': config}
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏
        tasks = [run_single_backtest(config) for config in backtest_configs]
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        try:
            results = await asyncio.wait_for(
                asyncio.gather(*tasks, return_exceptions=True),
                timeout=self.timeout * len(backtest_configs)
            )
        except asyncio.TimeoutError:
            self.logger.error(f"‚ùå Multiple backtests timeout: {self.timeout * len(backtest_configs)}s")
            results = [{'error': 'Timeout'} for _ in backtest_configs]
        
        successful = sum(1 for r in results if isinstance(r, dict) and 'error' not in r)
        self.logger.info(f"‚úÖ Multiple backtests completed: {successful}/{len(backtest_configs)} successful")
        
        return results
    
    async def optimize_strategy(
        self,
        strategy_name: str,
        symbol: str,
        start_date: Union[str, datetime],
        end_date: Union[str, datetime],
        parameter_ranges: Dict[str, List[Any]],
        timeframe: str = "5m",
        optimization_metric: str = "total_return",
        max_combinations: int = 100
    ) -> Dict[str, Any]:
        """
        –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        
        Args:
            strategy_name: –ò–º—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            start_date: –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞
            end_date: –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è
            parameter_ranges: –î–∏–∞–ø–∞–∑–æ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            timeframe: –¢–∞–π–º—Ñ—Ä–µ–π–º
            optimization_metric: –ú–µ—Ç—Ä–∏–∫–∞ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            max_combinations: –ú–∞–∫—Å–∏–º—É–º –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        """
        self.logger.info(f"üîß Starting strategy optimization: {strategy_name}")
        
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            param_combinations = self._generate_parameter_combinations(
                parameter_ranges, max_combinations
            )
            
            self.logger.info(f"üîß Generated {len(param_combinations)} parameter combinations")
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±—ç–∫—Ç–µ—Å—Ç–æ–≤
            backtest_configs = []
            for i, params in enumerate(param_combinations):
                config = {
                    'strategy_name': strategy_name,
                    'symbol': symbol,
                    'start_date': start_date,
                    'end_date': end_date,
                    'timeframe': timeframe,
                    'strategy_params': params,
                    'save_to_db': False  # –ù–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                }
                backtest_configs.append(config)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –±—ç–∫—Ç–µ—Å—Ç—ã
            results = await self.run_multiple_backtests(backtest_configs)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            optimization_results = self._analyze_optimization_results(
                results, param_combinations, optimization_metric
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if optimization_results['best_result'] and self.database:
                best_result = optimization_results['best_result']
                best_result['strategy_parameters']['_optimized'] = True
                await self._save_backtest_results(best_result)
            
            self.logger.info(f"‚úÖ Optimization completed: best {optimization_metric}={optimization_results['best_metric']:.4f}")
            
            return optimization_results
            
        except Exception as e:
            self.logger.error(f"‚ùå Strategy optimization failed: {e}")
            raise BacktestError(f"Optimization failed: {e}") from e
    
    # ========================================================================
    # CORE BACKTEST EXECUTION
    # ========================================================================
    
    async def _execute_backtest(
        self,
        backtest_id: str,
        strategy: BaseStrategy,
        symbol: str,
        timeframe: str,
        historical_data: List[CandleData],
        start_ts: int,
        end_ts: int,
        initial_balance: float,
        commission: float,
        slippage: float
    ) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–∏–∫–∏ –±—ç–∫—Ç–µ—Å—Ç–∞"""
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è
        portfolio = BacktestPortfolio(
            initial_balance=initial_balance,
            current_balance=initial_balance
        )
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        required_history = strategy.get_required_history_length()
        
        # –ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        equity_curve = []
        drawdown_periods = []
        trade_results = []
        
        self.logger.debug(f"üß™ Processing {len(historical_data)} candles with strategy {strategy.name}")
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞
        for i in range(required_history, len(historical_data)):
            current_candle = historical_data[i]
            current_time = current_candle.open_time
            current_price = current_candle.close_price
            
            # –ò—Å—Ç–æ—Ä–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            data_slice = historical_data[max(0, i - required_history + 1):i + 1]
            
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ —Ç–µ–∫—É—â–∏–º–∏ —Ü–µ–Ω–∞–º–∏
                self._update_positions(portfolio, {symbol: current_price})
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å—ã –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç—ã
                self._check_position_exits(portfolio, symbol, current_price, current_time, trade_results, commission)
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–∏–≥–Ω–∞–ª –æ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                signal = await strategy.process_market_data(data_slice)
                
                if signal and signal.signal_type != SignalType.HOLD:
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
                    await self._process_trading_signal(
                        portfolio, signal, symbol, current_price, current_time,
                        trade_results, commission, slippage
                    )
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è
                portfolio.add_balance_snapshot(current_time)
                equity_curve.append((current_time, portfolio.total_equity))
                
            except Exception as e:
                self.logger.warning(f"‚ö†Ô∏è Error processing candle at {current_time}: {e}")
                continue
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ –∫–æ–Ω—Ü–µ
        await self._close_all_positions(portfolio, symbol, historical_data[-1].close_price, 
                                       historical_data[-1].open_time, trade_results, commission)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        metrics = self._calculate_metrics(
            portfolio, equity_curve, trade_results, 
            start_ts, end_ts, initial_balance
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = {
            'backtest_id': backtest_id,
            'strategy_name': strategy.name,
            'symbol': symbol,
            'timeframe': timeframe,
            'start_date': timestamp_to_datetime(start_ts),
            'end_date': timestamp_to_datetime(end_ts),
            'strategy_parameters': strategy.parameters,
            'initial_balance': initial_balance,
            'final_balance': portfolio.current_balance,
            'commission': commission,
            'slippage': slippage,
            'total_trades': len(trade_results),
            'equity_curve': equity_curve,
            'trade_history': trade_results,
            'execution_time': None,  # –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –≤ Timer
            **metrics.to_dict()
        }
        
        return result
    
    async def _process_trading_signal(
        self,
        portfolio: BacktestPortfolio,
        signal: StrategyResult,
        symbol: str,
        current_price: float,
        current_time: int,
        trade_results: List[Dict[str, Any]],
        commission: float,
        slippage: float
    ) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–∑–∏—Ü–∏—è
        if symbol in portfolio.positions:
            # –õ–æ–≥–∏–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è/—Ä–∞–∑–≤–æ—Ä–æ—Ç–∞ –ø–æ–∑–∏—Ü–∏–∏
            existing_position = portfolio.positions[symbol]
            
            # –ï—Å–ª–∏ —Å–∏–≥–Ω–∞–ª –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–π - –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
            if ((existing_position.side == "long" and signal.signal_type in [SignalType.SELL, SignalType.STRONG_SELL]) or
                (existing_position.side == "short" and signal.signal_type in [SignalType.BUY, SignalType.STRONG_BUY])):
                
                await self._close_position(portfolio, symbol, current_price, current_time, 
                                         trade_results, commission, slippage, "signal_reversal")
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
        if signal.signal_type in [SignalType.BUY, SignalType.STRONG_BUY, SignalType.SELL, SignalType.STRONG_SELL]:
            await self._open_position(portfolio, signal, symbol, current_price, current_time, 
                                    trade_results, commission, slippage)
    
    async def _open_position(
        self,
        portfolio: BacktestPortfolio,
        signal: StrategyResult,
        symbol: str,
        current_price: float,
        current_time: int,
        trade_results: List[Dict[str, Any]],
        commission: float,
        slippage: float
    ) -> None:
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏"""
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ—Ä–æ–Ω—É –ø–æ–∑–∏—Ü–∏–∏
        is_long = signal.signal_type in [SignalType.BUY, SignalType.STRONG_BUY]
        side = "long" if is_long else "short"
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
        position_size = self._calculate_position_size(portfolio, signal, current_price)
        
        if position_size < MIN_TRADE_SIZE:
            return
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º slippage
        execution_price = self._apply_slippage(current_price, is_long, slippage)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é
        trade_commission = position_size * execution_price * commission
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å –±–∞–ª–∞–Ω—Å–∞
        required_balance = trade_commission
        if not is_long:  # –î–ª—è —à–æ—Ä—Ç–∞ –Ω—É–∂–µ–Ω –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ª–æ–≥
            required_balance += position_size * execution_price * 0.1  # 10% –º–∞—Ä–∂–∞
        
        if portfolio.current_balance < required_balance:
            self.logger.debug(f"‚ö†Ô∏è Insufficient balance for position: {portfolio.current_balance} < {required_balance}")
            return
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
        position = BacktestPosition(
            symbol=symbol,
            side=side,
            size=position_size,
            entry_price=execution_price,
            entry_time=current_time,
            stop_loss=signal.stop_loss,
            take_profit=signal.take_profit
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä—Ç—Ñ–µ–ª—å
        portfolio.positions[symbol] = position
        portfolio.current_balance -= trade_commission
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–¥–µ–ª–∫—É
        trade = {
            'symbol': symbol,
            'side': 'buy' if is_long else 'sell',
            'size': position_size,
            'price': execution_price,
            'timestamp': current_time,
            'commission': trade_commission,
            'signal_type': signal.signal_type.value,
            'confidence': signal.confidence,
            'trade_type': 'open_position'
        }
        
        trade_results.append(trade)
        
        self.logger.debug(f"üìä Opened {side} position: {symbol} size={position_size:.6f} @ {execution_price:.4f}")
    
    async def _close_position(
        self,
        portfolio: BacktestPortfolio,
        symbol: str,
        current_price: float,
        current_time: int,
        trade_results: List[Dict[str, Any]],
        commission: float,
        slippage: float,
        reason: str = "manual"
    ) -> None:
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏"""
        
        if symbol not in portfolio.positions:
            return
        
        position = portfolio.positions[symbol]
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º slippage
        is_closing_long = position.side == "long"
        execution_price = self._apply_slippage(current_price, not is_closing_long, slippage)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º PnL
        if position.side == "long":
            pnl = (execution_price - position.entry_price) * position.size
        else:
            pnl = (position.entry_price - execution_price) * position.size
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é
        trade_commission = position.size * execution_price * commission
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        portfolio.current_balance += pnl - trade_commission
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–¥–µ–ª–∫—É
        trade = {
            'symbol': symbol,
            'side': 'sell' if is_closing_long else 'buy',
            'size': position.size,
            'price': execution_price,
            'timestamp': current_time,
            'commission': trade_commission,
            'pnl': pnl,
            'duration_minutes': (current_time - position.entry_time) // (60 * 1000),
            'reason': reason,
            'trade_type': 'close_position'
        }
        
        trade_results.append(trade)
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
        del portfolio.positions[symbol]
        
        self.logger.debug(f"üìä Closed {position.side} position: {symbol} PnL={pnl:.2f} reason={reason}")
    
    async def _close_all_positions(
        self,
        portfolio: BacktestPortfolio,
        symbol: str,
        final_price: float,
        final_time: int,
        trade_results: List[Dict[str, Any]],
        commission: float
    ) -> None:
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –≤ –∫–æ–Ω—Ü–µ –±—ç–∫—Ç–µ—Å—Ç–∞"""
        
        for symbol in list(portfolio.positions.keys()):
            await self._close_position(
                portfolio, symbol, final_price, final_time,
                trade_results, commission, 0.0, "backtest_end"
            )
    
    # ========================================================================
    # HELPER METHODS
    # ========================================================================
    
    def _validate_backtest_params(
        self,
        strategy_name: str,
        symbol: str,
        start_date: Union[str, datetime],
        end_date: Union[str, datetime],
        timeframe: str,
        initial_balance: float
    ) -> None:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –±—ç–∫—Ç–µ—Å—Ç–∞"""
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        if not StrategyRegistry.get_strategy_class(strategy_name):
            raise BacktestError(f"Strategy '{strategy_name}' not found in registry")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–º–≤–æ–ª–∞
        if not symbol or len(symbol) < 3:
            raise BacktestError(f"Invalid symbol: {symbol}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç
        start_ts, end_ts = self._normalize_dates(start_date, end_date)
        
        if start_ts >= end_ts:
            raise BacktestError("Start date must be before end date")
        
        duration_days = (end_ts - start_ts) // (24 * 60 * 60 * 1000)
        if duration_days > MAX_BACKTEST_DURATION_DAYS:
            raise BacktestError(f"Backtest duration too long: {duration_days} > {MAX_BACKTEST_DURATION_DAYS} days")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
        if initial_balance <= 0:
            raise BacktestError(f"Initial balance must be positive: {initial_balance}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
        if timeframe not in ['1m', '5m', '15m', '30m', '1h', '4h', '1d']:
            raise BacktestError(f"Unsupported timeframe: {timeframe}")
    
    def _normalize_dates(self, start_date: Union[str, datetime], end_date: Union[str, datetime]) -> Tuple[int, int]:
        """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞—Ç –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–Ω—ã–µ timestamps"""
        
        def to_timestamp(date_val: Union[str, datetime]) -> int:
            if isinstance(date_val, str):
                try:
                    if 'T' in date_val:
                        dt = datetime.fromisoformat(date_val.replace('Z', '+00:00'))
                    else:
                        dt = datetime.strptime(date_val, '%Y-%m-%d')
                        dt = dt.replace(tzinfo=timezone.utc)
                except ValueError as e:
                    raise BacktestError(f"Invalid date format: {date_val}") from e
            else:
                dt = date_val
                if dt.tzinfo is None:
                    dt = dt.replace(tzinfo=timezone.utc)
            
            return int(dt.timestamp() * 1000)
        
        return to_timestamp(start_date), to_timestamp(end_date)
    
    async def _get_historical_data(
        self, 
        symbol: str, 
        timeframe: str, 
        start_ts: int, 
        end_ts: int
    ) -> List[CandleData]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ data_manager
            if self.data_manager:
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π
                timeframe_ms = parse_timeframe_to_milliseconds(timeframe)
                estimated_candles = int((end_ts - start_ts) / timeframe_ms) + 100  # +100 –¥–ª—è –∑–∞–ø–∞—Å–∞
                
                data = await self.data_manager.get_market_data(
                    symbol=symbol,
                    timeframe=timeframe,
                    count=min(estimated_candles, MAX_CANDLES_PER_BACKTEST),
                    force_refresh=True
                )
                
                if data:
                    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
                    filtered_data = [
                        candle for candle in data 
                        if start_ts <= candle.open_time <= end_ts
                    ]
                    if len(filtered_data) >= 20:
                        return filtered_data
            
            # –ï—Å–ª–∏ data_manager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º bybit_client –Ω–∞–ø—Ä—è–º—É—é
            if self.bybit_client:
                return await self._fetch_historical_data_from_api(symbol, timeframe, start_ts, end_ts)
            
            raise BacktestError("No data sources available for historical data")
            
        except Exception as e:
            raise BacktestError(f"Failed to fetch historical data: {e}") from e
    
    async def _fetch_historical_data_from_api(
        self, 
        symbol: str, 
        timeframe: str, 
        start_ts: int, 
        end_ts: int
    ) -> List[CandleData]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–ø—Ä—è–º—É—é –∏–∑ API"""
        
        all_data = []
        current_end = end_ts
        timeframe_ms = parse_timeframe_to_milliseconds(timeframe)
        
        while current_end > start_ts and len(all_data) < MAX_CANDLES_PER_BACKTEST:
            try:
                response = await self.bybit_client.get_kline(
                    symbol=symbol,
                    interval=timeframe,
                    start=max(start_ts, current_end - (200 * timeframe_ms)),
                    end=current_end,
                    limit=200
                )
                
                if not response or 'result' not in response or not response['result']['list']:
                    break
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ CandleData
                batch_data = []
                for kline in response['result']['list']:
                    try:
                        candle = CandleData.from_bybit_response(kline, symbol, timeframe)
                        if start_ts <= candle.open_time <= end_ts:
                            batch_data.append(candle)
                    except Exception as e:
                        self.logger.warning(f"‚ö†Ô∏è Failed to parse candle: {e}")
                        continue
                
                if not batch_data:
                    break
                
                all_data.extend(batch_data)
                current_end = min(candle.open_time for candle in batch_data) - timeframe_ms
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å rate limit
                await asyncio.sleep(0.1)
                
            except Exception as e:
                self.logger.warning(f"‚ö†Ô∏è API fetch error: {e}")
                break
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        all_data.sort(key=lambda x: x.open_time)
        
        return all_data
    
    def _create_strategy(
        self, 
        strategy_name: str, 
        symbol: str, 
        timeframe: str, 
        parameters: Dict[str, Any]
    ) -> BaseStrategy:
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        
        config = StrategyConfig(
            name=strategy_name,
            symbol=symbol,
            timeframe=timeframe,
            parameters=parameters
        )
        
        strategy = StrategyRegistry.create_strategy(strategy_name, config)
        if not strategy:
            raise BacktestError(f"Failed to create strategy '{strategy_name}'")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
        strategy.start()
        
        return strategy
    
    def _calculate_position_size(
        self, 
        portfolio: BacktestPortfolio, 
        signal: StrategyResult, 
        current_price: float
    ) -> float:
        """–†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏"""
        
        # –ë–∞–∑–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç - —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –±–∞–ª–∞–Ω—Å–∞
        base_size_usd = portfolio.current_balance * 0.02  # 2% –æ—Ç –±–∞–ª–∞–Ω—Å–∞
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ —Å–∏–≥–Ω–∞–ª–∞
        confidence_multiplier = signal.confidence
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Å–∏–ª–µ —Å–∏–≥–Ω–∞–ª–∞
        strength_multiplier = 1.0
        if signal.signal_type in [SignalType.STRONG_BUY, SignalType.STRONG_SELL]:
            strength_multiplier = 1.5
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
        position_size_usd = base_size_usd * confidence_multiplier * strength_multiplier
        position_size = position_size_usd / current_price
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º (50% –±–∞–ª–∞–Ω—Å–∞)
        max_size_usd = portfolio.current_balance * 0.5
        max_size = max_size_usd / current_price
        
        return min(position_size, max_size)
    
    def _apply_slippage(self, price: float, is_buy: bool, slippage: float) -> float:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏—è"""
        if is_buy:
            return price * (1 + slippage)  # –ü–æ–∫—É–ø–∞–µ–º –¥–æ—Ä–æ–∂–µ
        else:
            return price * (1 - slippage)  # –ü—Ä–æ–¥–∞–µ–º –¥–µ—à–µ–≤–ª–µ
    
    def _update_positions(self, portfolio: BacktestPortfolio, prices: Dict[str, float]) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö —Ü–µ–Ω –≤ –ø–æ–∑–∏—Ü–∏—è—Ö"""
        for symbol, position in portfolio.positions.items():
            if symbol in prices:
                position.update_pnl(prices[symbol])
    
    def _check_position_exits(
        self,
        portfolio: BacktestPortfolio,
        symbol: str,
        current_price: float,
        current_time: int,
        trade_results: List[Dict[str, Any]],
        commission: float
    ) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø–æ–∑–∏—Ü–∏–π (—Å—Ç–æ–ø-–ª–æ—Å—Å, —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç)"""
        
        if symbol not in portfolio.positions:
            return
        
        position = portfolio.positions[symbol]
        should_close = False
        reason = ""
        
        if position.side == "long":
            # –î–ª—è –ª–æ–Ω–≥–∞: —Å—Ç–æ–ø-–ª–æ—Å—Å –Ω–∏–∂–µ —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞, —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –≤—ã—à–µ
            if position.stop_loss and current_price <= position.stop_loss:
                should_close = True
                reason = "stop_loss"
            elif position.take_profit and current_price >= position.take_profit:
                should_close = True
                reason = "take_profit"
        
        else:  # short
            # –î–ª—è —à–æ—Ä—Ç–∞: —Å—Ç–æ–ø-–ª–æ—Å—Å –≤—ã—à–µ —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞, —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –Ω–∏–∂–µ
            if position.stop_loss and current_price >= position.stop_loss:
                should_close = True
                reason = "stop_loss"
            elif position.take_profit and current_price <= position.take_profit:
                should_close = True
                reason = "take_profit"
        
        if should_close:
            asyncio.create_task(
                self._close_position(
                    portfolio, symbol, current_price, current_time,
                    trade_results, commission, 0.0, reason
                )
            )
    
    def _calculate_metrics(
        self,
        portfolio: BacktestPortfolio,
        equity_curve: List[Tuple[int, float]],
        trade_results: List[Dict[str, Any]],
        start_ts: int,
        end_ts: int,
        initial_balance: float
    ) -> BacktestMetrics:
        """–†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –±—ç–∫—Ç–µ—Å—Ç–∞"""
        
        metrics = BacktestMetrics()
        
        if not trade_results:
            return metrics
        
        # –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        final_balance = portfolio.current_balance
        metrics.total_return = (final_balance - initial_balance) / initial_balance
        
        # –ê–Ω–Ω—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
        duration_days = (end_ts - start_ts) / (24 * 60 * 60 * 1000)
        if duration_days > 0:
            metrics.annualized_return = (final_balance / initial_balance) ** (365.25 / duration_days) - 1
        
        # –¢–æ—Ä–≥–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        trades = [t for t in trade_results if t.get('trade_type') == 'close_position']
        metrics.total_trades = len(trades)
        
        if trades:
            pnls = [t.get('pnl', 0) for t in trades]
            profits = [pnl for pnl in pnls if pnl > 0]
            losses = [pnl for pnl in pnls if pnl < 0]
            
            metrics.winning_trades = len(profits)
            metrics.losing_trades = len(losses)
            metrics.win_rate = metrics.winning_trades / metrics.total_trades if metrics.total_trades > 0 else 0
            
            # PnL –º–µ—Ç—Ä–∏–∫–∏
            metrics.gross_profit = sum(profits)
            metrics.gross_loss = sum(losses)
            metrics.net_profit = sum(pnls)
            metrics.profit_factor = abs(metrics.gross_profit / metrics.gross_loss) if metrics.gross_loss < 0 else float('inf')
            
            # –°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
            metrics.avg_trade = sum(pnls) / len(pnls)
            metrics.avg_winning_trade = sum(profits) / len(profits) if profits else 0
            metrics.avg_losing_trade = sum(losses) / len(losses) if losses else 0
            metrics.largest_winning_trade = max(profits) if profits else 0
            metrics.largest_losing_trade = min(losses) if losses else 0
            
            # –ö–æ–º–∏—Å—Å–∏–∏
            metrics.total_fees = sum(t.get('commission', 0) for t in trade_results)
            
            # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–¥–µ–ª–æ–∫
            durations = [t.get('duration_minutes', 0) for t in trades if t.get('duration_minutes')]
            metrics.avg_trade_duration = sum(durations) / len(durations) / 60 if durations else 0  # –≤ —á–∞—Å–∞—Ö
        
        # –†–∏—Å–∫-–º–µ—Ç—Ä–∏–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ equity curve
        if equity_curve:
            self._calculate_risk_metrics(metrics, equity_curve, initial_balance)
        
        return metrics
    
    def _calculate_risk_metrics(
        self,
        metrics: BacktestMetrics,
        equity_curve: List[Tuple[int, float]],
        initial_balance: float
    ) -> None:
        """–†–∞—Å—á–µ—Ç —Ä–∏—Å–∫-–º–µ—Ç—Ä–∏–∫"""
        
        if len(equity_curve) < 2:
            return
        
        equity_values = [equity for _, equity in equity_curve]
        
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞
        peak = equity_values[0]
        max_drawdown = 0.0
        
        for equity in equity_values:
            if equity > peak:
                peak = equity
            drawdown = (peak - equity) / peak if peak > 0 else 0
            max_drawdown = max(max_drawdown, drawdown)
        
        metrics.max_drawdown = max_drawdown
        
        # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
        if len(equity_values) > 1:
            returns = []
            for i in range(1, len(equity_values)):
                if equity_values[i-1] != 0:
                    daily_return = (equity_values[i] - equity_values[i-1]) / equity_values[i-1]
                    returns.append(daily_return)
            
            if returns:
                metrics.volatility = np.std(returns) * np.sqrt(252) if len(returns) > 1 else 0
                
                # Sharpe Ratio (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º risk-free rate = 0)
                avg_return = np.mean(returns) * 252  # –ê–Ω–Ω—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
                metrics.sharpe_ratio = avg_return / metrics.volatility if metrics.volatility > 0 else 0
                
                # Calmar Ratio
                metrics.calmar_ratio = metrics.annualized_return / max_drawdown if max_drawdown > 0 else 0
    
    def _generate_parameter_combinations(
        self, 
        parameter_ranges: Dict[str, List[Any]], 
        max_combinations: int
    ) -> List[Dict[str, Any]]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        
        import itertools
        
        param_names = list(parameter_ranges.keys())
        param_values = list(parameter_ranges.values())
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
        all_combinations = list(itertools.product(*param_values))
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π
        if len(all_combinations) > max_combinations:
            # –ë–µ—Ä–µ–º —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
            step = len(all_combinations) // max_combinations
            all_combinations = all_combinations[::step][:max_combinations]
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
        combinations = []
        for combo in all_combinations:
            param_dict = dict(zip(param_names, combo))
            combinations.append(param_dict)
        
        return combinations
    
    def _analyze_optimization_results(
        self,
        results: List[Dict[str, Any]],
        param_combinations: List[Dict[str, Any]],
        optimization_metric: str
    ) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        
        valid_results = []
        
        for i, result in enumerate(results):
            if isinstance(result, dict) and 'error' not in result:
                result['parameters'] = param_combinations[i]
                valid_results.append(result)
        
        if not valid_results:
            return {
                'best_result': None,
                'best_metric': None,
                'best_parameters': None,
                'total_combinations': len(param_combinations),
                'successful_combinations': 0,
                'results_summary': []
            }
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –º–µ—Ç—Ä–∏–∫–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        valid_results.sort(key=lambda x: x.get(optimization_metric, 0), reverse=True)
        
        best_result = valid_results[0]
        
        # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        results_summary = []
        for result in valid_results[:10]:  # –¢–æ–ø 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            results_summary.append({
                'parameters': result['parameters'],
                'metric_value': result.get(optimization_metric, 0),
                'total_trades': result.get('total_trades', 0),
                'win_rate': result.get('win_rate', 0),
                'total_return': result.get('total_return', 0)
            })
        
        return {
            'best_result': best_result,
            'best_metric': best_result.get(optimization_metric, 0),
            'best_parameters': best_result['parameters'],
            'total_combinations': len(param_combinations),
            'successful_combinations': len(valid_results),
            'results_summary': results_summary
        }
    
    async def _save_backtest_results(self, result: Dict[str, Any]) -> None:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±—ç–∫—Ç–µ—Å—Ç–∞ –≤ –ë–î"""
        
        if not self.database:
            return
        
        try:
            backtest_data = {
                'strategy_name': result['strategy_name'],
                'symbol': result['symbol'],
                'timeframe': result['timeframe'],
                'start_date': result['start_date'],
                'end_date': result['end_date'],
                'strategy_parameters': result['strategy_parameters'],
                'initial_balance': result['initial_balance'],
                'commission': result['commission'],
                'slippage': result['slippage'],
                'final_balance': result['final_balance'],
                'total_return': result['total_return'],
                'annualized_return': result.get('annualized_return'),
                'sharpe_ratio': result.get('sharpe_ratio'),
                'max_drawdown': result.get('max_drawdown'),
                'total_trades': result['total_trades'],
                'winning_trades': result.get('winning_trades', 0),
                'win_rate': result.get('win_rate'),
                'status': BacktestStatus.COMPLETED,
                'execution_time': result.get('execution_time'),
                'trades_data': result.get('trade_history', [])
            }
            
            await self.database.save_backtest_result(backtest_data)
            self.logger.debug(f"üíæ Backtest results saved to database")
            
        except Exception as e:
            self.logger.error(f"‚ùå Failed to save backtest results: {e}")
    
    async def _save_failed_backtest(
        self, 
        backtest_id: str, 
        strategy_name: str, 
        symbol: str, 
        error_message: str
    ) -> None:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–µ—É–¥–∞—á–Ω–æ–º –±—ç–∫—Ç–µ—Å—Ç–µ"""
        
        if not self.database:
            return
        
        try:
            backtest_data = {
                'strategy_name': strategy_name,
                'symbol': symbol,
                'timeframe': '5m',  # default
                'start_date': datetime.now(timezone.utc),
                'end_date': datetime.now(timezone.utc),
                'strategy_parameters': {},
                'initial_balance': 0.0,
                'status': BacktestStatus.FAILED,
                'error_message': error_message[:500]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
            }
            
            await self.database.save_backtest_result(backtest_data)
            
        except Exception as e:
            self.logger.error(f"‚ùå Failed to save failed backtest info: {e}")
    
    # ========================================================================
    # UTILITY METHODS
    # ========================================================================
    
    def get_active_backtests(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—ç–∫—Ç–µ—Å—Ç–æ–≤"""
        return list(self._active_backtests.keys())
    
    async def cancel_backtest(self, backtest_id: str) -> bool:
        """–û—Ç–º–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±—ç–∫—Ç–µ—Å—Ç–∞"""
        if backtest_id in self._active_backtests:
            task = self._active_backtests[backtest_id]
            task.cancel()
            try:
                await task
            except asyncio.CancelledError:
                pass
            del self._active_backtests[backtest_id]
            self.logger.info(f"üö´ Backtest cancelled: {backtest_id}")
            return True
        return False
    
    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–≤–∏–∂–∫–∞"""
        return {
            **self.stats,
            'active_backtests': len(self._active_backtests),
            'max_concurrent': self.max_concurrent
        }
    
    async def health_check(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –¥–≤–∏–∂–∫–∞"""
        return {
            'status': 'healthy',
            'active_backtests': len(self._active_backtests),
            'executor_running': not self._executor._shutdown,
            'database_available': self.database is not None,
            'data_source_available': (self.data_manager is not None) or (self.bybit_client is not None)
        }
    
    async def cleanup(self) -> None:
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            # –û—Ç–º–µ–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –±—ç–∫—Ç–µ—Å—Ç—ã
            for backtest_id in list(self._active_backtests.keys()):
                await self.cancel_backtest(backtest_id)
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º executor
            self._executor.shutdown(wait=True)
            
            self.logger.info("üßπ Backtest Engine cleanup completed")
            
        except Exception as e:
            self.logger.error(f"‚ùå Cleanup error: {e}")


# ============================================================================
# EXAMPLE USAGE
# ============================================================================

if __name__ == "__main__":
    import asyncio
    
    async def test_backtest_engine():
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Backtest Engine"""
        print("üß™ Testing Backtest Engine")
        print("=" * 50)
        
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫
            engine = BacktestEngine()
            
            # Health check
            health = await engine.health_check()
            print(f"üè• Health: {health['status']}")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            stats = engine.get_stats()
            print(f"üìä Stats: {stats}")
            
            print("‚úÖ Backtest Engine test completed")
            
        except Exception as e:
            print(f"‚ùå Test failed: {e}")
            import traceback
            traceback.print_exc()
        
        finally:
            await engine.cleanup()
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
    asyncio.run(test_backtest_engine())
