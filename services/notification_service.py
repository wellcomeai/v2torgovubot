"""
Trading Bot Notification Service
–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ–º–∏ —Ç–∏–ø–∞–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
"""

import asyncio
import time
import json
import hashlib
from datetime import datetime, timezone, timedelta
from typing import Dict, List, Any, Optional, Union, Callable
from dataclasses import dataclass, field
from enum import Enum
import uuid

from utils.logger import setup_logger
from utils.helpers import (
    get_current_timestamp, safe_float, Timer
)
from app.config.settings import Settings, get_settings
from data.database import Database
from strategies.base_strategy import StrategyResult, SignalType


# ============================================================================
# CONSTANTS AND ENUMS
# ============================================================================

logger = setup_logger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
DEFAULT_COOLDOWN_MINUTES = 5
MAX_NOTIFICATION_HISTORY = 1000
DUPLICATE_CHECK_WINDOW_MINUTES = 15


class NotificationType(str, Enum):
    """–¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    TRADING_SIGNAL = "trading_signal"
    PORTFOLIO_UPDATE = "portfolio_update"
    ERROR_ALERT = "error_alert"
    SYSTEM_STATUS = "system_status"
    MAINTENANCE = "maintenance"
    PERFORMANCE_ALERT = "performance_alert"
    CUSTOM = "custom"


class NotificationChannel(str, Enum):
    """–ö–∞–Ω–∞–ª—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    TELEGRAM = "telegram"
    EMAIL = "email"
    WEBHOOK = "webhook"
    LOG = "log"
    DATABASE = "database"


class NotificationPriority(str, Enum):
    """–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    LOW = "low"
    NORMAL = "normal"
    HIGH = "high"
    URGENT = "urgent"
    CRITICAL = "critical"


class NotificationStatus(str, Enum):
    """–°—Ç–∞—Ç—É—Å—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    PENDING = "pending"
    SENT = "sent"
    FAILED = "failed"
    CANCELLED = "cancelled"
    DUPLICATE = "duplicate"


@dataclass
class Notification:
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏"""
    id: str = field(default_factory=lambda: str(uuid.uuid4()))
    type: NotificationType = NotificationType.CUSTOM
    title: str = ""
    message: str = ""
    priority: NotificationPriority = NotificationPriority.NORMAL
    channels: List[NotificationChannel] = field(default_factory=list)
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    source: str = "system"
    tags: List[str] = field(default_factory=list)
    data: Dict[str, Any] = field(default_factory=dict)
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–æ–π
    max_retries: int = 3
    retry_delay: int = 60  # —Å–µ–∫—É–Ω–¥—ã
    cooldown_minutes: int = DEFAULT_COOLDOWN_MINUTES
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
    created_at: int = field(default_factory=get_current_timestamp)
    scheduled_at: Optional[int] = None
    sent_at: Optional[int] = None
    
    # –°—Ç–∞—Ç—É—Å
    status: NotificationStatus = NotificationStatus.PENDING
    retry_count: int = 0
    error_message: Optional[str] = None
    
    def __post_init__(self):
        if not self.channels:
            self.channels = [NotificationChannel.TELEGRAM]  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é Telegram
        
        if not self.scheduled_at:
            self.scheduled_at = self.created_at
    
    def get_content_hash(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ö–µ—à–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"""
        content = f"{self.type}{self.title}{self.message}{self.source}"
        return hashlib.md5(content.encode()).hexdigest()
    
    def is_ready_to_send(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ"""
        current_time = get_current_timestamp()
        return (
            self.status == NotificationStatus.PENDING and
            current_time >= self.scheduled_at
        )
    
    def can_retry(self) -> bool:
        """–ú–æ–∂–Ω–æ –ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É"""
        return (
            self.status == NotificationStatus.FAILED and
            self.retry_count < self.max_retries
        )
    
    def to_dict(self) -> Dict[str, Any]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å"""
        return {
            'id': self.id,
            'type': self.type.value,
            'title': self.title,
            'message': self.message,
            'priority': self.priority.value,
            'channels': [ch.value for ch in self.channels],
            'source': self.source,
            'tags': self.tags,
            'data': self.data,
            'status': self.status.value,
            'created_at': self.created_at,
            'sent_at': self.sent_at,
            'retry_count': self.retry_count,
            'error_message': self.error_message
        }


@dataclass
class NotificationTemplate:
    """–®–∞–±–ª–æ–Ω —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    name: str
    type: NotificationType
    title_template: str
    message_template: str
    default_priority: NotificationPriority = NotificationPriority.NORMAL
    default_channels: List[NotificationChannel] = field(default_factory=list)
    required_fields: List[str] = field(default_factory=list)
    
    def render(self, data: Dict[str, Any]) -> Tuple[str, str]:
        """–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —à–∞–±–ª–æ–Ω–∞ —Å –¥–∞–Ω–Ω—ã–º–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            for field in self.required_fields:
                if field not in data:
                    raise ValueError(f"Required field '{field}' missing")
            
            # –†–µ–Ω–¥–µ—Ä–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
            title = self.title_template.format(**data)
            message = self.message_template.format(**data)
            
            return title, message
            
        except Exception as e:
            logger.error(f"‚ùå Template rendering failed: {e}")
            return self.title_template, self.message_template


# ============================================================================
# NOTIFICATION SERVICE CLASS
# ============================================================================

class NotificationService:
    """
    –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
    
    –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
    - –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏
    - –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è –∏ –æ—á–µ—Ä–µ–¥–∏
    - –®–∞–±–ª–æ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    - –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    - Retry –º–µ—Ö–∞–Ω–∏–∑–º
    - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    """
    
    def __init__(
        self,
        settings: Optional[Settings] = None,
        database: Optional[Database] = None,
        telegram_service=None,
        openai_service=None
    ):
        self.settings = settings or get_settings()
        self.database = database
        self.telegram_service = telegram_service
        self.openai_service = openai_service
        self.logger = setup_logger(f"{__name__}.NotificationService")
        
        # –û—á–µ—Ä–µ–¥–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º
        self.queues = {
            NotificationPriority.CRITICAL: asyncio.Queue(),
            NotificationPriority.URGENT: asyncio.Queue(),
            NotificationPriority.HIGH: asyncio.Queue(),
            NotificationPriority.NORMAL: asyncio.Queue(),
            NotificationPriority.LOW: asyncio.Queue()
        }
        
        # –ò—Å—Ç–æ—Ä–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        self.notification_history: List[Notification] = []
        
        # –®–∞–±–ª–æ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.templates: Dict[str, NotificationTemplate] = {}
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–∞–Ω–∞–ª–æ–≤
        self.channel_handlers: Dict[NotificationChannel, Callable] = {}
        
        # –§–∏–ª—å—Ç—Ä—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.filters: List[Callable[[Notification], bool]] = []
        
        # –ó–∞–¥–∞—á–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        self.processor_tasks: List[asyncio.Task] = []
        self.running = False
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'total_notifications': 0,
            'sent_notifications': 0,
            'failed_notifications': 0,
            'duplicate_notifications': 0,
            'filtered_notifications': 0,
            'by_type': {},
            'by_channel': {},
            'by_priority': {},
            'avg_delivery_time': 0.0
        }
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self.max_queue_size = 1000
        self.cleanup_interval = 3600  # 1 —á–∞—Å
        self.last_cleanup = get_current_timestamp()
        
        self.logger.info("üì¢ Notification Service initialized")
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞"""
        try:
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–∞–Ω–∞–ª–æ–≤
            self._register_channel_handlers()
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —à–∞–±–ª–æ–Ω—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            self._load_default_templates()
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            self._register_default_filters()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—á–µ—Ä–µ–¥–µ–π
            await self._start_processors()
            
            self.running = True
            
            self.logger.info("‚úÖ Notification Service initialized successfully")
            
        except Exception as e:
            self.logger.error(f"‚ùå Failed to initialize Notification Service: {e}")
            raise
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Ä–≤–∏—Å–∞"""
        try:
            self.running = False
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            await self._stop_processors()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            await self._flush_queues()
            
            self.logger.info("üì¢ Notification Service closed")
            
        except Exception as e:
            self.logger.error(f"‚ùå Error closing Notification Service: {e}")
    
    # ========================================================================
    # PUBLIC API METHODS
    # ========================================================================
    
    async def send_notification(
        self,
        notification: Union[Notification, Dict[str, Any]]
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        
        Args:
            notification: –û–±—ä–µ–∫—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–ª–∏ —Å–ª–æ–≤–∞—Ä—å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            
        Returns:
            True –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å
        """
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –æ–±—ä–µ–∫—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if isinstance(notification, dict):
                notification = self._dict_to_notification(notification)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            if not self._apply_filters(notification):
                self.stats['filtered_notifications'] += 1
                self.logger.debug(f"üö´ Notification filtered: {notification.id}")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            if self._is_duplicate(notification):
                notification.status = NotificationStatus.DUPLICATE
                self.stats['duplicate_notifications'] += 1
                self.logger.debug(f"üîÑ Duplicate notification: {notification.id}")
                return False
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
            await self.queues[notification.priority].put(notification)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.notification_history.append(notification)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.stats['total_notifications'] += 1
            self._update_type_stats(notification.type, 'total')
            self._update_priority_stats(notification.priority, 'total')
            
            self.logger.debug(f"üì¢ Notification queued: {notification.id} ({notification.type.value})")
            
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå Failed to send notification: {e}")
            return False
    
    async def send_from_template(
        self,
        template_name: str,
        data: Dict[str, Any],
        priority: Optional[NotificationPriority] = None,
        channels: Optional[List[NotificationChannel]] = None
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ —à–∞–±–ª–æ–Ω—É
        
        Args:
            template_name: –ò–º—è —à–∞–±–ª–æ–Ω–∞
            data: –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
            priority: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —à–∞–±–ª–æ–Ω)
            channels: –ö–∞–Ω–∞–ª—ã (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è—é—Ç —à–∞–±–ª–æ–Ω)
            
        Returns:
            True –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        """
        try:
            if template_name not in self.templates:
                self.logger.error(f"‚ùå Template not found: {template_name}")
                return False
            
            template = self.templates[template_name]
            
            # –†–µ–Ω–¥–µ—Ä–∏–º —à–∞–±–ª–æ–Ω
            title, message = template.render(data)
            
            # –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            notification = Notification(
                type=template.type,
                title=title,
                message=message,
                priority=priority or template.default_priority,
                channels=channels or template.default_channels,
                source=data.get('source', 'template'),
                data=data
            )
            
            return await self.send_notification(notification)
            
        except Exception as e:
            self.logger.error(f"‚ùå Failed to send template notification: {e}")
            return False
    
    async def send_trading_signal(
        self,
        signal: StrategyResult,
        symbol: str,
        strategy_name: str,
        current_price: float,
        additional_info: Optional[Dict[str, Any]] = None
    ) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
        
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            if signal.confidence >= 0.9:
                priority = NotificationPriority.URGENT
            elif signal.confidence >= 0.8:
                priority = NotificationPriority.HIGH
            else:
                priority = NotificationPriority.NORMAL
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            data = {
                'signal_type': signal.signal_type.value,
                'symbol': symbol,
                'strategy_name': strategy_name,
                'confidence': signal.confidence,
                'current_price': current_price,
                'entry_price': signal.entry_price or current_price,
                'stop_loss': signal.stop_loss,
                'take_profit': signal.take_profit,
                'reasoning': signal.reasoning or 'No reasoning provided',
                'timestamp': datetime.now(timezone.utc).strftime("%Y-%m-%d %H:%M:%S UTC")
            }
            
            if additional_info:
                data.update(additional_info)
            
            return await self.send_from_template(
                'trading_signal',
                data,
                priority=priority
            )
            
        except Exception as e:
            self.logger.error(f"‚ùå Failed to send trading signal notification: {e}")
            return False
    
    async def send_error_alert(
        self,
        error_message: str,
        component: str,
        severity: str = "medium",
        additional_info: Optional[Dict[str, Any]] = None
    ) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
        
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏
            priority_map = {
                'low': NotificationPriority.LOW,
                'medium': NotificationPriority.NORMAL,
                'high': NotificationPriority.HIGH,
                'critical': NotificationPriority.CRITICAL
            }
            
            priority = priority_map.get(severity, NotificationPriority.NORMAL)
            
            data = {
                'error_message': error_message,
                'component': component,
                'severity': severity,
                'timestamp': datetime.now(timezone.utc).strftime("%Y-%m-%d %H:%M:%S UTC")
            }
            
            if additional_info:
                data.update(additional_info)
            
            return await self.send_from_template(
                'error_alert',
                data,
                priority=priority
            )
            
        except Exception as e:
            self.logger.error(f"‚ùå Failed to send error alert: {e}")
            return False
    
    async def send_portfolio_update(
        self,
        balance: float,
        unrealized_pnl: float,
        daily_pnl: float,
        metrics: Optional[Dict[str, Any]] = None
    ) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
        
        try:
            data = {
                'balance': balance,
                'unrealized_pnl': unrealized_pnl,
                'daily_pnl': daily_pnl,
                'timestamp': datetime.now(timezone.utc).strftime("%Y-%m-%d %H:%M:%S UTC")
            }
            
            if metrics:
                data.update(metrics)
            
            return await self.send_from_template(
                'portfolio_update',
                data,
                priority=NotificationPriority.LOW
            )
            
        except Exception as e:
            self.logger.error(f"‚ùå Failed to send portfolio update: {e}")
            return False
    
    async def send_system_status(
        self,
        status: str,
        components: Dict[str, str],
        metrics: Optional[Dict[str, Any]] = None
    ) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        
        try:
            data = {
                'status': status,
                'components': components,
                'timestamp': datetime.now(timezone.utc).strftime("%Y-%m-%d %H:%M:%S UTC")
            }
            
            if metrics:
                data.update(metrics)
            
            return await self.send_from_template(
                'system_status',
                data,
                priority=NotificationPriority.LOW
            )
            
        except Exception as e:
            self.logger.error(f"‚ùå Failed to send system status: {e}")
            return False
    
    # ========================================================================
    # TEMPLATE MANAGEMENT
    # ========================================================================
    
    def register_template(self, template: NotificationTemplate) -> bool:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            self.templates[template.name] = template
            self.logger.info(f"üìù Template registered: {template.name}")
            return True
        except Exception as e:
            self.logger.error(f"‚ùå Failed to register template: {e}")
            return False
    
    def get_template(self, name: str) -> Optional[NotificationTemplate]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –ø–æ –∏–º–µ–Ω–∏"""
        return self.templates.get(name)
    
    def list_templates(self) -> List[str]:
        """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —à–∞–±–ª–æ–Ω–æ–≤"""
        return list(self.templates.keys())
    
    def _load_default_templates(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        
        # –®–∞–±–ª–æ–Ω —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
        trading_signal_template = NotificationTemplate(
            name="trading_signal",
            type=NotificationType.TRADING_SIGNAL,
            title_template="üîî Trading Signal: {signal_type} {symbol}",
            message_template="""üìà **TRADING SIGNAL**

**Symbol:** {symbol}
**Strategy:** {strategy_name}
**Signal:** {signal_type}
**Confidence:** {confidence:.1%}
**Current Price:** ${current_price:.4f}
**Entry Price:** ${entry_price:.4f}

**Analysis:** {reasoning}

üïê {timestamp}""",
            default_priority=NotificationPriority.HIGH,
            default_channels=[NotificationChannel.TELEGRAM],
            required_fields=['signal_type', 'symbol', 'strategy_name', 'confidence', 'current_price']
        )
        
        # –®–∞–±–ª–æ–Ω –æ—à–∏–±–∫–∏
        error_alert_template = NotificationTemplate(
            name="error_alert",
            type=NotificationType.ERROR_ALERT,
            title_template="‚ö†Ô∏è Error Alert: {component}",
            message_template="""üö® **ERROR ALERT**

**Component:** {component}
**Severity:** {severity}
**Error:** {error_message}

üïê {timestamp}""",
            default_priority=NotificationPriority.HIGH,
            default_channels=[NotificationChannel.TELEGRAM],
            required_fields=['error_message', 'component', 'severity']
        )
        
        # –®–∞–±–ª–æ–Ω –ø–æ—Ä—Ç—Ñ–µ–ª—è
        portfolio_update_template = NotificationTemplate(
            name="portfolio_update",
            type=NotificationType.PORTFOLIO_UPDATE,
            title_template="üí∞ Portfolio Update",
            message_template="""üìä **PORTFOLIO UPDATE**

**Balance:** ${balance:.2f}
**Unrealized P&L:** ${unrealized_pnl:+.2f}
**Daily P&L:** ${daily_pnl:+.2f}

üïê {timestamp}""",
            default_priority=NotificationPriority.LOW,
            default_channels=[NotificationChannel.TELEGRAM],
            required_fields=['balance', 'unrealized_pnl', 'daily_pnl']
        )
        
        # –®–∞–±–ª–æ–Ω —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã
        system_status_template = NotificationTemplate(
            name="system_status",
            type=NotificationType.SYSTEM_STATUS,
            title_template="‚öôÔ∏è System Status: {status}",
            message_template="""üîß **SYSTEM STATUS**

**Status:** {status}
**Components:** {components}

üïê {timestamp}""",
            default_priority=NotificationPriority.LOW,
            default_channels=[NotificationChannel.TELEGRAM],
            required_fields=['status', 'components']
        )
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω—ã
        templates = [
            trading_signal_template,
            error_alert_template,
            portfolio_update_template,
            system_status_template
        ]
        
        for template in templates:
            self.register_template(template)
    
    # ========================================================================
    # CHANNEL HANDLERS
    # ========================================================================
    
    def _register_channel_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–æ–≤"""
        self.channel_handlers = {
            NotificationChannel.TELEGRAM: self._handle_telegram_channel,
            NotificationChannel.LOG: self._handle_log_channel,
            NotificationChannel.DATABASE: self._handle_database_channel
        }
    
    async def _handle_telegram_channel(self, notification: Notification) -> bool:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ Telegram –∫–∞–Ω–∞–ª–∞"""
        if not self.telegram_service:
            self.logger.warning("‚ö†Ô∏è Telegram service not available")
            return False
        
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è Telegram
            telegram_priority_map = {
                NotificationPriority.CRITICAL: "urgent",
                NotificationPriority.URGENT: "high", 
                NotificationPriority.HIGH: "high",
                NotificationPriority.NORMAL: "normal",
                NotificationPriority.LOW: "low"
            }
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if notification.title:
                message = f"{notification.title}\n\n{notification.message}"
            else:
                message = notification.message
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Telegram —Å–µ—Ä–≤–∏—Å
            success = await self.telegram_service.send_message(
                text=message,
                priority=telegram_priority_map.get(notification.priority, "normal")
            )
            
            if success:
                self._update_channel_stats(NotificationChannel.TELEGRAM, 'success')
            else:
                self._update_channel_stats(NotificationChannel.TELEGRAM, 'failed')
            
            return success
            
        except Exception as e:
            self.logger.error(f"‚ùå Telegram channel error: {e}")
            self._update_channel_stats(NotificationChannel.TELEGRAM, 'failed')
            return False
    
    async def _handle_log_channel(self, notification: Notification) -> bool:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞–Ω–∞–ª–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
            log_level_map = {
                NotificationPriority.CRITICAL: "error",
                NotificationPriority.URGENT: "error",
                NotificationPriority.HIGH: "warning",
                NotificationPriority.NORMAL: "info",
                NotificationPriority.LOW: "debug"
            }
            
            level = log_level_map.get(notification.priority, "info")
            message = f"[{notification.type.value.upper()}] {notification.title}: {notification.message}"
            
            getattr(self.logger, level)(message)
            
            self._update_channel_stats(NotificationChannel.LOG, 'success')
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå Log channel error: {e}")
            self._update_channel_stats(NotificationChannel.LOG, 'failed')
            return False
    
    async def _handle_database_channel(self, notification: Notification) -> bool:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞–Ω–∞–ª–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        if not self.database:
            return False
        
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –ë–î (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã)
            notification_data = notification.to_dict()
            # await self.database.save_notification(notification_data)  # Implement if needed
            
            self._update_channel_stats(NotificationChannel.DATABASE, 'success')
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå Database channel error: {e}")
            self._update_channel_stats(NotificationChannel.DATABASE, 'failed')
            return False
    
    # ========================================================================
    # FILTERING AND PROCESSING
    # ========================================================================
    
    def _register_default_filters(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        
        # –§–∏–ª—å—Ç—Ä cooldown –ø–µ—Ä–∏–æ–¥–æ–≤
        def cooldown_filter(notification: Notification) -> bool:
            if notification.cooldown_minutes <= 0:
                return True
            
            current_time = get_current_timestamp()
            cooldown_ms = notification.cooldown_minutes * 60 * 1000
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –Ω–∞ –ø–æ—Ö–æ–∂–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            for prev_notification in self.notification_history[-100:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 100
                if (
                    prev_notification.type == notification.type and
                    prev_notification.source == notification.source and
                    prev_notification.status == NotificationStatus.SENT and
                    prev_notification.sent_at and
                    (current_time - prev_notification.sent_at) < cooldown_ms
                ):
                    return False
            
            return True
        
        # –§–∏–ª—å—Ç—Ä —Ä–∞–∑–º–µ—Ä–∞ –æ—á–µ—Ä–µ–¥–µ–π
        def queue_size_filter(notification: Notification) -> bool:
            current_queue_size = sum(q.qsize() for q in self.queues.values())
            return current_queue_size < self.max_queue_size
        
        self.filters = [cooldown_filter, queue_size_filter]
    
    def add_filter(self, filter_func: Callable[[Notification], bool]):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞"""
        self.filters.append(filter_func)
    
    def _apply_filters(self, notification: Notification) -> bool:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        for filter_func in self.filters:
            try:
                if not filter_func(notification):
                    return False
            except Exception as e:
                self.logger.error(f"‚ùå Filter error: {e}")
                continue
        return True
    
    def _is_duplicate(self, notification: Notification) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã"""
        content_hash = notification.get_content_hash()
        current_time = get_current_timestamp()
        window_ms = DUPLICATE_CHECK_WINDOW_MINUTES * 60 * 1000
        
        for prev_notification in self.notification_history[-50:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 50
            if (
                prev_notification.get_content_hash() == content_hash and
                (current_time - prev_notification.created_at) < window_ms and
                prev_notification.status in [NotificationStatus.SENT, NotificationStatus.PENDING]
            ):
                return True
        
        return False
    
    # ========================================================================
    # QUEUE PROCESSING
    # ========================================================================
    
    async def _start_processors(self):
        """–ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ—á–µ—Ä–µ–¥–µ–π"""
        priority_order = [
            NotificationPriority.CRITICAL,
            NotificationPriority.URGENT,
            NotificationPriority.HIGH,
            NotificationPriority.NORMAL,
            NotificationPriority.LOW
        ]
        
        for priority in priority_order:
            task = asyncio.create_task(self._process_queue(priority))
            self.processor_tasks.append(task)
        
        # –ó–∞–¥–∞—á–∞ –æ—á–∏—Å—Ç–∫–∏
        cleanup_task = asyncio.create_task(self._cleanup_history())
        self.processor_tasks.append(cleanup_task)
        
        self.logger.info(f"‚ö° Started {len(self.processor_tasks)} processor tasks")
    
    async def _stop_processors(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        for task in self.processor_tasks:
            task.cancel()
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á
        await asyncio.gather(*self.processor_tasks, return_exceptions=True)
        self.processor_tasks.clear()
        
        self.logger.info("‚èπÔ∏è All processor tasks stopped")
    
    async def _process_queue(self, priority: NotificationPriority):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞"""
        queue = self.queues[priority]
        
        self.logger.info(f"‚ö° Queue processor started for {priority.value} priority")
        
        try:
            while self.running:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                    notification = await asyncio.wait_for(queue.get(), timeout=1.0)
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    await self._process_notification(notification)
                    
                except asyncio.TimeoutError:
                    continue
                except asyncio.CancelledError:
                    break
                except Exception as e:
                    self.logger.error(f"‚ùå Queue processing error ({priority.value}): {e}")
                    await asyncio.sleep(1)
                    
        except asyncio.CancelledError:
            self.logger.info(f"‚èπÔ∏è Queue processor stopped for {priority.value}")
    
    async def _process_notification(self, notification: Notification):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            start_time = time.time()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ
            if not notification.is_ready_to_send():
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –µ—Å–ª–∏ –Ω–µ –≥–æ—Ç–æ–≤–æ
                await self.queues[notification.priority].put(notification)
                return
            
            success_channels = []
            failed_channels = []
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ –≤—Å–µ –∫–∞–Ω–∞–ª—ã
            for channel in notification.channels:
                if channel in self.channel_handlers:
                    try:
                        handler = self.channel_handlers[channel]
                        success = await handler(notification)
                        
                        if success:
                            success_channels.append(channel)
                        else:
                            failed_channels.append(channel)
                            
                    except Exception as e:
                        self.logger.error(f"‚ùå Channel handler error ({channel.value}): {e}")
                        failed_channels.append(channel)
                else:
                    self.logger.warning(f"‚ö†Ô∏è Unknown channel: {channel.value}")
                    failed_channels.append(channel)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            if success_channels and not failed_channels:
                notification.status = NotificationStatus.SENT
                notification.sent_at = get_current_timestamp()
                self.stats['sent_notifications'] += 1
                self._update_type_stats(notification.type, 'sent')
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏
                delivery_time = time.time() - start_time
                if self.stats['sent_notifications'] > 0:
                    current_avg = self.stats['avg_delivery_time']
                    new_avg = (current_avg * (self.stats['sent_notifications'] - 1) + delivery_time) / self.stats['sent_notifications']
                    self.stats['avg_delivery_time'] = new_avg
                
                self.logger.debug(f"‚úÖ Notification sent: {notification.id} via {success_channels}")
                
            elif failed_channels and notification.can_retry():
                # Retry –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
                notification.retry_count += 1
                notification.scheduled_at = get_current_timestamp() + (notification.retry_delay * 1000)
                await self.queues[notification.priority].put(notification)
                
                self.logger.warning(f"üîÑ Notification retry {notification.retry_count}/{notification.max_retries}: {notification.id}")
                
            else:
                # –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ–≤–∞–ª–µ–Ω–æ
                notification.status = NotificationStatus.FAILED
                notification.error_message = f"Failed channels: {failed_channels}"
                self.stats['failed_notifications'] += 1
                self._update_type_stats(notification.type, 'failed')
                
                self.logger.error(f"‚ùå Notification failed: {notification.id}")
            
        except Exception as e:
            notification.status = NotificationStatus.FAILED
            notification.error_message = str(e)
            self.stats['failed_notifications'] += 1
            self.logger.error(f"‚ùå Notification processing error: {e}")
    
    async def _flush_queues(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            total_flushed = 0
            max_flush = 50  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
            
            for priority, queue in self.queues.items():
                flushed_count = 0
                while not queue.empty() and total_flushed < max_flush:
                    try:
                        notification = queue.get_nowait()
                        await self._process_notification(notification)
                        flushed_count += 1
                        total_flushed += 1
                    except asyncio.QueueEmpty:
                        break
                
                if flushed_count > 0:
                    self.logger.info(f"üì§ Flushed {flushed_count} {priority.value} notifications")
            
            if total_flushed > 0:
                self.logger.info(f"üì§ Total flushed: {total_flushed} notifications")
                
        except Exception as e:
            self.logger.error(f"‚ùå Error flushing queues: {e}")
    
    # ========================================================================
    # CLEANUP AND MAINTENANCE
    # ========================================================================
    
    async def _cleanup_history(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏"""
        try:
            while self.running:
                current_time = get_current_timestamp()
                
                if (current_time - self.last_cleanup) > (self.cleanup_interval * 1000):
                    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ (—Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤)
                    cutoff_time = current_time - (24 * 60 * 60 * 1000)
                    
                    old_count = len(self.notification_history)
                    self.notification_history = [
                        n for n in self.notification_history
                        if n.created_at > cutoff_time
                    ]
                    
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
                    if len(self.notification_history) > MAX_NOTIFICATION_HISTORY:
                        self.notification_history = self.notification_history[-MAX_NOTIFICATION_HISTORY:]
                    
                    removed = old_count - len(self.notification_history)
                    if removed > 0:
                        self.logger.info(f"üßπ Cleaned up {removed} old notifications")
                    
                    self.last_cleanup = current_time
                
                await asyncio.sleep(300)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                
        except asyncio.CancelledError:
            pass
    
    # ========================================================================
    # UTILITY METHODS
    # ========================================================================
    
    def _dict_to_notification(self, data: Dict[str, Any]) -> Notification:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å–ª–æ–≤–∞—Ä—è –≤ –æ–±—ä–µ–∫—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        return Notification(
            type=NotificationType(data.get('type', 'custom')),
            title=data.get('title', ''),
            message=data.get('message', ''),
            priority=NotificationPriority(data.get('priority', 'normal')),
            channels=[NotificationChannel(ch) for ch in data.get('channels', ['telegram'])],
            source=data.get('source', 'api'),
            tags=data.get('tags', []),
            data=data.get('data', {}),
            max_retries=data.get('max_retries', 3),
            cooldown_minutes=data.get('cooldown_minutes', DEFAULT_COOLDOWN_MINUTES)
        )
    
    def _update_type_stats(self, notification_type: NotificationType, action: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ç–∏–ø–∞–º"""
        if notification_type.value not in self.stats['by_type']:
            self.stats['by_type'][notification_type.value] = {'total': 0, 'sent': 0, 'failed': 0}
        
        self.stats['by_type'][notification_type.value][action] += 1
    
    def _update_priority_stats(self, priority: NotificationPriority, action: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º"""
        if priority.value not in self.stats['by_priority']:
            self.stats['by_priority'][priority.value] = {'total': 0, 'sent': 0, 'failed': 0}
        
        if action in self.stats['by_priority'][priority.value]:
            self.stats['by_priority'][priority.value][action] += 1
    
    def _update_channel_stats(self, channel: NotificationChannel, result: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–∞–Ω–∞–ª–∞–º"""
        if channel.value not in self.stats['by_channel']:
            self.stats['by_channel'][channel.value] = {'success': 0, 'failed': 0}
        
        if result in self.stats['by_channel'][channel.value]:
            self.stats['by_channel'][channel.value][result] += 1
    
    def get_queue_sizes(self) -> Dict[str, int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –æ—á–µ—Ä–µ–¥–µ–π"""
        return {priority.value: queue.qsize() for priority, queue in self.queues.items()}
    
    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Ä–≤–∏—Å–∞"""
        stats = self.stats.copy()
        stats['queue_sizes'] = self.get_queue_sizes()
        stats['total_queue_size'] = sum(self.get_queue_sizes().values())
        stats['history_size'] = len(self.notification_history)
        stats['running'] = self.running
        stats['registered_templates'] = len(self.templates)
        stats['active_processors'] = len([t for t in self.processor_tasks if not t.done()])
        
        return stats
    
    async def health_check(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
        status = "healthy"
        issues = []
        
        if not self.running:
            status = "unhealthy"
            issues.append("Service not running")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–µ—Ä–µ–¥–∏
        total_queue_size = sum(self.get_queue_sizes().values())
        if total_queue_size > self.max_queue_size * 0.8:
            status = "degraded"
            issues.append("High queue utilization")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        active_processors = len([t for t in self.processor_tasks if not t.done()])
        expected_processors = len(self.queues) + 1  # +1 –¥–ª—è cleanup –∑–∞–¥–∞—á–∏
        
        if active_processors < expected_processors:
            status = "degraded" 
            issues.append("Some processors not running")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–Ω–∞–ª—ã
        channel_health = {}
        for channel in self.channel_handlers:
            if channel == NotificationChannel.TELEGRAM and self.telegram_service:
                tg_health = await self.telegram_service.health_check()
                channel_health['telegram'] = tg_health['status']
            else:
                channel_health[channel.value] = "unknown"
        
        return {
            'status': status,
            'issues': issues,
            'running': self.running,
            'queue_sizes': self.get_queue_sizes(),
            'total_queue_size': total_queue_size,
            'active_processors': active_processors,
            'expected_processors': expected_processors,
            'channel_health': channel_health,
            'templates_loaded': len(self.templates)
        }


# ============================================================================
# EXAMPLE USAGE
# ============================================================================

if __name__ == "__main__":
    import asyncio
    from strategies.base_strategy import create_strategy_result, SignalType
    
    async def test_notification_service():
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Notification Service"""
        print("üß™ Testing Notification Service")
        print("=" * 50)
        
        try:
            service = NotificationService()
            await service.initialize()
            
            # Health check
            health = await service.health_check()
            print(f"üè• Health: {health['status']}")
            
            # –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            print("\nüìù Testing simple notification...")
            success = await service.send_notification({
                'type': 'custom',
                'title': 'Test Notification',
                'message': 'This is a test notification',
                'priority': 'normal',
                'channels': ['log']
            })
            print(f"{'‚úÖ' if success else '‚ùå'} Simple notification: {success}")
            
            # –¢–µ—Å—Ç —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
            print("\nüìà Testing trading signal...")
            test_signal = create_strategy_result(
                SignalType.BUY,
                confidence=0.85,
                entry_price=50000.0,
                reasoning="Strong upward momentum"
            )
            
            success = await service.send_trading_signal(
                signal=test_signal,
                symbol="BTCUSDT",
                strategy_name="TestStrategy",
                current_price=50100.0
            )
            print(f"{'‚úÖ' if success else '‚ùå'} Trading signal: {success}")
            
            # –¢–µ—Å—Ç –æ—à–∏–±–∫–∏
            print("\nüö® Testing error alert...")
            success = await service.send_error_alert(
                error_message="Test error message",
                component="TestComponent",
                severity="medium"
            )
            print(f"{'‚úÖ' if success else '‚ùå'} Error alert: {success}")
            
            # –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
            print("\n‚è≥ Waiting for processing...")
            await asyncio.sleep(2)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            stats = service.get_stats()
            print(f"üìä Stats: {stats}")
            
            print("\n‚úÖ Notification Service test completed!")
            
        except Exception as e:
            print(f"‚ùå Test failed: {e}")
            import traceback
            traceback.print_exc()
        
        finally:
            await service.close()
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
    asyncio.run(test_notification_service())
