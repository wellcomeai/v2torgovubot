"""
Trading Bot OpenAI Service  
AI-powered –∞–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –∏ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
import time
import json
from datetime import datetime, timezone, timedelta
from typing import Dict, List, Any, Optional, Union, Tuple
from dataclasses import dataclass, field
from enum import Enum
import hashlib
from concurrent.futures import ThreadPoolExecutor
import aiohttp

from utils.logger import setup_logger
from utils.helpers import (
    get_current_timestamp, safe_float, Timer, retry_async
)
from app.config.settings import Settings, get_settings
from data.database import Database
from data.historical_data import CandleData
from strategies.base_strategy import StrategyResult, SignalType


# ============================================================================
# CONSTANTS AND ENUMS
# ============================================================================

logger = setup_logger(__name__)

# API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
OPENAI_API_URL = "https://api.openai.com/v1/chat/completions"
DEFAULT_MODEL = "gpt-4"
DEFAULT_MAX_TOKENS = 1000
DEFAULT_TEMPERATURE = 0.7
DEFAULT_TIMEOUT = 30

# –õ–∏–º–∏—Ç—ã –∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
MAX_PROMPT_LENGTH = 4000  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –ø—Ä–æ–º–ø—Ç–∞
CACHE_TTL_SECONDS = 3600  # 1 —á–∞—Å –∫–µ—à–∞ –¥–ª—è –ø–æ—Ö–æ–∂–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
MAX_RETRIES = 3
RETRY_DELAY = 2

# Rate limiting (OpenAI limits)
REQUESTS_PER_MINUTE = 50
REQUESTS_PER_DAY = 1000


class AnalysisType(str, Enum):
    """–¢–∏–ø—ã AI –∞–Ω–∞–ª–∏–∑–∞"""
    TECHNICAL = "technical"           # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
    SENTIMENT = "sentiment"           # –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
    FUNDAMENTAL = "fundamental"       # –§—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    RISK_ASSESSMENT = "risk"          # –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤
    MARKET_OVERVIEW = "market"        # –û–±–∑–æ—Ä —Ä—ã–Ω–∫–∞
    STRATEGY_VALIDATION = "strategy"  # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏


class AnalysisConfidence(str, Enum):
    """–£—Ä–æ–≤–Ω–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ AI –∞–Ω–∞–ª–∏–∑–∞"""
    VERY_LOW = "very_low"      # 0.0-0.3
    LOW = "low"                # 0.3-0.5
    MODERATE = "moderate"      # 0.5-0.7
    HIGH = "high"              # 0.7-0.9
    VERY_HIGH = "very_high"    # 0.9-1.0


@dataclass
class AIAnalysisRequest:
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ AI –∞–Ω–∞–ª–∏–∑"""
    analysis_type: AnalysisType
    symbol: str
    timeframe: str
    market_data: Optional[List[CandleData]] = None
    signal_data: Optional[StrategyResult] = None
    additional_context: Dict[str, Any] = field(default_factory=dict)
    custom_prompt: Optional[str] = None
    max_tokens: int = DEFAULT_MAX_TOKENS
    temperature: float = DEFAULT_TEMPERATURE


@dataclass
class AIAnalysisResponse:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç AI –∞–Ω–∞–ª–∏–∑–∞"""
    analysis_type: AnalysisType
    symbol: str
    analysis_text: str
    confidence: float
    confidence_level: AnalysisConfidence
    key_points: List[str]
    recommendations: List[str]
    risk_factors: List[str]
    timestamp: int = field(default_factory=get_current_timestamp)
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    model_used: str = ""
    tokens_used: int = 0
    processing_time: float = 0.0
    cached: bool = False
    
    def to_dict(self) -> Dict[str, Any]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å"""
        return {
            'analysis_type': self.analysis_type.value,
            'symbol': self.symbol,
            'analysis_text': self.analysis_text,
            'confidence': self.confidence,
            'confidence_level': self.confidence_level.value,
            'key_points': self.key_points,
            'recommendations': self.recommendations,
            'risk_factors': self.risk_factors,
            'timestamp': self.timestamp,
            'model_used': self.model_used,
            'tokens_used': self.tokens_used,
            'processing_time': self.processing_time,
            'cached': self.cached
        }


# ============================================================================
# OPENAI SERVICE CLASS
# ============================================================================

class OpenAIService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è AI-–∞–Ω–∞–ª–∏–∑–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–º–æ—â—å—é OpenAI API
    
    –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
    - –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    - –ê–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
    - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    - –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤
    - –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    - Rate limiting
    """
    
    def __init__(
        self,
        settings: Optional[Settings] = None,
        database: Optional[Database] = None
    ):
        self.settings = settings or get_settings()
        self.database = database
        self.logger = setup_logger(f"{__name__}.OpenAIService")
        
        # API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.api_key = self.settings.OPENAI_API_KEY
        self.model = self.settings.OPENAI_MODEL
        self.max_tokens = self.settings.OPENAI_MAX_TOKENS
        self.temperature = self.settings.OPENAI_TEMPERATURE
        self.timeout = self.settings.OPENAI_TIMEOUT
        
        # HTTP —Å–µ—Å—Å–∏—è
        self._session: Optional[aiohttp.ClientSession] = None
        
        # Rate limiting
        self._request_times = []
        self._daily_requests = 0
        self._last_reset_date = datetime.now(timezone.utc).date()
        
        # –ö–µ—à –∞–Ω–∞–ª–∏–∑–æ–≤
        self._analysis_cache: Dict[str, AIAnalysisResponse] = {}
        self._cache_timestamps: Dict[str, int] = {}
        
        # Executor –¥–ª—è CPU-intensive –æ–ø–µ—Ä–∞—Ü–∏–π
        self._executor = ThreadPoolExecutor(max_workers=2, thread_name_prefix="OpenAI")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'total_requests': 0,
            'successful_requests': 0,
            'failed_requests': 0,
            'cache_hits': 0,
            'total_tokens_used': 0,
            'avg_response_time': 0.0
        }
        
        if not self.api_key:
            self.logger.warning("‚ö†Ô∏è OpenAI API key not configured")
        else:
            self.logger.info("ü§ñ OpenAI Service initialized")
    
    async def __aenter__(self):
        """Async context manager entry"""
        await self._create_session()
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """Async context manager exit"""
        await self.close()
    
    async def _create_session(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ HTTP —Å–µ—Å—Å–∏–∏"""
        if self._session is None:
            timeout = aiohttp.ClientTimeout(total=self.timeout)
            
            self._session = aiohttp.ClientSession(
                timeout=timeout,
                headers={
                    'Authorization': f'Bearer {self.api_key}',
                    'Content-Type': 'application/json',
                    'User-Agent': 'TradingBot/1.0.0'
                }
            )
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        if self._session:
            await self._session.close()
            self._session = None
        
        self._executor.shutdown(wait=True)
        self.logger.info("ü§ñ OpenAI Service closed")
    
    # ========================================================================
    # PUBLIC API METHODS
    # ========================================================================
    
    async def analyze_signal(
        self,
        signal: StrategyResult,
        symbol: str,
        timeframe: str,
        market_data: Optional[List[CandleData]] = None,
        additional_context: Optional[Dict[str, Any]] = None
    ) -> Optional[AIAnalysisResponse]:
        """
        –ê–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ —Å –ø–æ–º–æ—â—å—é AI
        
        Args:
            signal: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –æ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            timeframe: –¢–∞–π–º—Ñ—Ä–µ–π–º
            market_data: –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            additional_context: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç AI –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        if not self.api_key:
            self.logger.warning("‚ö†Ô∏è OpenAI API key not configured")
            return None
        
        try:
            request = AIAnalysisRequest(
                analysis_type=AnalysisType.STRATEGY_VALIDATION,
                symbol=symbol,
                timeframe=timeframe,
                market_data=market_data,
                signal_data=signal,
                additional_context=additional_context or {}
            )
            
            return await self._process_analysis_request(request)
            
        except Exception as e:
            self.logger.error(f"‚ùå Signal analysis failed: {e}")
            return None
    
    async def analyze_market_data(
        self,
        symbol: str,
        timeframe: str,
        market_data: List[CandleData],
        analysis_type: AnalysisType = AnalysisType.TECHNICAL,
        additional_context: Optional[Dict[str, Any]] = None
    ) -> Optional[AIAnalysisResponse]:
        """
        –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            timeframe: –¢–∞–π–º—Ñ—Ä–µ–π–º
            market_data: –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            analysis_type: –¢–∏–ø –∞–Ω–∞–ª–∏–∑–∞
            additional_context: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç AI –∞–Ω–∞–ª–∏–∑–∞
        """
        if not self.api_key:
            return None
        
        try:
            request = AIAnalysisRequest(
                analysis_type=analysis_type,
                symbol=symbol,
                timeframe=timeframe,
                market_data=market_data,
                additional_context=additional_context or {}
            )
            
            return await self._process_analysis_request(request)
            
        except Exception as e:
            self.logger.error(f"‚ùå Market data analysis failed: {e}")
            return None
    
    async def get_trading_recommendation(
        self,
        symbol: str,
        current_price: float,
        market_data: Optional[List[CandleData]] = None,
        portfolio_context: Optional[Dict[str, Any]] = None
    ) -> Optional[AIAnalysisResponse]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            current_price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
            market_data: –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            portfolio_context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Ä—Ç—Ñ–µ–ª—è
            
        Returns:
            –¢–æ—Ä–≥–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        """
        if not self.api_key:
            return None
        
        try:
            context = portfolio_context or {}
            context.update({
                'current_price': current_price,
                'analysis_focus': 'trading_recommendation'
            })
            
            request = AIAnalysisRequest(
                analysis_type=AnalysisType.TECHNICAL,
                symbol=symbol,
                timeframe="1h",  # Default –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
                market_data=market_data,
                additional_context=context,
                custom_prompt=self._get_recommendation_prompt()
            )
            
            return await self._process_analysis_request(request)
            
        except Exception as e:
            self.logger.error(f"‚ùå Trading recommendation failed: {e}")
            return None
    
    async def assess_risk(
        self,
        symbol: str,
        signal: Optional[StrategyResult] = None,
        market_data: Optional[List[CandleData]] = None,
        portfolio_context: Optional[Dict[str, Any]] = None
    ) -> Optional[AIAnalysisResponse]:
        """
        –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤ —Ç–æ—Ä–≥–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            signal: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            market_data: –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            portfolio_context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Ä—Ç—Ñ–µ–ª—è
            
        Returns:
            –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤
        """
        if not self.api_key:
            return None
        
        try:
            request = AIAnalysisRequest(
                analysis_type=AnalysisType.RISK_ASSESSMENT,
                symbol=symbol,
                timeframe="4h",  # –ë–æ–ª–µ–µ —à–∏—Ä–æ–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–æ–≤
                market_data=market_data,
                signal_data=signal,
                additional_context=portfolio_context or {}
            )
            
            return await self._process_analysis_request(request)
            
        except Exception as e:
            self.logger.error(f"‚ùå Risk assessment failed: {e}")
            return None
    
    async def analyze_market_sentiment(
        self,
        symbol: str,
        news_data: Optional[List[Dict[str, Any]]] = None,
        social_data: Optional[List[Dict[str, Any]]] = None
    ) -> Optional[AIAnalysisResponse]:
        """
        –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            news_data: –ù–æ–≤–æ—Å—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            social_data: –î–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Ü—Å–µ—Ç–µ–π
            
        Returns:
            –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
        """
        if not self.api_key:
            return None
        
        try:
            context = {}
            if news_data:
                context['news'] = news_data[:10]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            if social_data:
                context['social'] = social_data[:20]
            
            request = AIAnalysisRequest(
                analysis_type=AnalysisType.SENTIMENT,
                symbol=symbol,
                timeframe="1d",
                additional_context=context
            )
            
            return await self._process_analysis_request(request)
            
        except Exception as e:
            self.logger.error(f"‚ùå Sentiment analysis failed: {e}")
            return None
    
    # ========================================================================
    # CORE PROCESSING METHODS
    # ========================================================================
    
    async def _process_analysis_request(self, request: AIAnalysisRequest) -> Optional[AIAnalysisResponse]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∞–Ω–∞–ª–∏–∑"""
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
            cache_key = self._generate_cache_key(request)
            cached_result = self._get_from_cache(cache_key)
            
            if cached_result:
                self.stats['cache_hits'] += 1
                cached_result.cached = True
                self.logger.debug(f"üéØ Cache hit for {request.analysis_type.value} analysis")
                return cached_result
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limits
            if not await self._check_rate_limits():
                self.logger.warning("‚ö†Ô∏è Rate limit exceeded")
                return None
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
            prompt = await self._generate_prompt(request)
            
            if not prompt:
                self.logger.error("‚ùå Failed to generate prompt")
                return None
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI
            with Timer(f"openai_request_{request.analysis_type.value}"):
                response = await self._send_openai_request(prompt, request)
            
            if response:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
                self._save_to_cache(cache_key, response)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
                if self.database:
                    await self._save_analysis_to_db(request, response)
                
                self.stats['successful_requests'] += 1
                return response
            else:
                self.stats['failed_requests'] += 1
                return None
                
        except Exception as e:
            self.stats['failed_requests'] += 1
            self.logger.error(f"‚ùå Analysis request processing failed: {e}")
            return None
    
    async def _send_openai_request(
        self, 
        prompt: str, 
        request: AIAnalysisRequest
    ) -> Optional[AIAnalysisResponse]:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenAI API"""
        
        if not self._session:
            await self._create_session()
        
        try:
            payload = {
                "model": self.model,
                "messages": [
                    {
                        "role": "system",
                        "content": self._get_system_prompt(request.analysis_type)
                    },
                    {
                        "role": "user", 
                        "content": prompt
                    }
                ],
                "max_tokens": request.max_tokens,
                "temperature": request.temperature,
                "response_format": {"type": "json_object"}  # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º JSON –æ—Ç–≤–µ—Ç
            }
            
            start_time = time.time()
            
            async with self._session.post(OPENAI_API_URL, json=payload) as response:
                
                processing_time = time.time() - start_time
                
                if response.status == 200:
                    data = await response.json()
                    return await self._parse_openai_response(data, request, processing_time)
                    
                elif response.status == 429:  # Rate limit
                    self.logger.warning("‚ö†Ô∏è OpenAI rate limit hit")
                    return None
                    
                else:
                    error_text = await response.text()
                    self.logger.error(f"‚ùå OpenAI API error {response.status}: {error_text}")
                    return None
                    
        except asyncio.TimeoutError:
            self.logger.error("‚ùå OpenAI request timeout")
            return None
            
        except Exception as e:
            self.logger.error(f"‚ùå OpenAI request failed: {e}")
            return None
    
    async def _parse_openai_response(
        self, 
        data: Dict[str, Any], 
        request: AIAnalysisRequest,
        processing_time: float
    ) -> Optional[AIAnalysisResponse]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenAI"""
        
        try:
            if 'choices' not in data or not data['choices']:
                self.logger.error("‚ùå No choices in OpenAI response")
                return None
            
            content = data['choices'][0]['message']['content']
            usage = data.get('usage', {})
            tokens_used = usage.get('total_tokens', 0)
            
            # –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
            try:
                parsed_content = json.loads(content)
            except json.JSONDecodeError:
                # Fallback –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ
                parsed_content = {
                    'analysis': content,
                    'confidence': 0.5,
                    'key_points': [],
                    'recommendations': [],
                    'risk_factors': []
                }
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            confidence = float(parsed_content.get('confidence', 0.5))
            confidence_level = self._determine_confidence_level(confidence)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.stats['total_tokens_used'] += tokens_used
            self.stats['total_requests'] += 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
            if self.stats['successful_requests'] > 0:
                self.stats['avg_response_time'] = (
                    (self.stats['avg_response_time'] * (self.stats['successful_requests'] - 1) + processing_time) /
                    self.stats['successful_requests']
                )
            else:
                self.stats['avg_response_time'] = processing_time
            
            response = AIAnalysisResponse(
                analysis_type=request.analysis_type,
                symbol=request.symbol,
                analysis_text=parsed_content.get('analysis', ''),
                confidence=confidence,
                confidence_level=confidence_level,
                key_points=parsed_content.get('key_points', []),
                recommendations=parsed_content.get('recommendations', []),
                risk_factors=parsed_content.get('risk_factors', []),
                model_used=self.model,
                tokens_used=tokens_used,
                processing_time=processing_time
            )
            
            return response
            
        except Exception as e:
            self.logger.error(f"‚ùå Failed to parse OpenAI response: {e}")
            return None
    
    # ========================================================================
    # PROMPT GENERATION
    # ========================================================================
    
    def _get_system_prompt(self, analysis_type: AnalysisType) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∞–Ω–∞–ª–∏–∑–∞"""
        
        base_prompt = """You are an expert cryptocurrency trading analyst with deep knowledge of technical analysis, market psychology, and risk management. 

Your responses must be in JSON format with the following structure:
{
  "analysis": "detailed analysis text",
  "confidence": 0.85,
  "key_points": ["point1", "point2", "point3"],
  "recommendations": ["recommendation1", "recommendation2"],
  "risk_factors": ["risk1", "risk2"]
}

Confidence should be a float between 0.0 and 1.0."""
        
        type_specific_prompts = {
            AnalysisType.TECHNICAL: """
Focus on technical analysis including:
- Price action and trend analysis
- Support and resistance levels
- Volume patterns
- Technical indicators interpretation
- Chart patterns recognition
""",
            AnalysisType.STRATEGY_VALIDATION: """
Focus on validating trading signals:
- Signal quality assessment
- Entry/exit point optimization
- Risk-reward ratio evaluation
- Market context appropriateness
- Timing considerations
""",
            AnalysisType.RISK_ASSESSMENT: """
Focus on risk evaluation:
- Position sizing recommendations
- Stop-loss placement
- Market volatility assessment
- Correlation risks
- Maximum drawdown potential
""",
            AnalysisType.SENTIMENT: """
Focus on market sentiment:
- News impact analysis
- Social media sentiment
- Market fear/greed indicators
- Institutional vs retail sentiment
- Contrarian opportunities
""",
            AnalysisType.FUNDAMENTAL: """
Focus on fundamental analysis:
- Project fundamentals
- Token economics
- Development activity
- Adoption metrics
- Competitive positioning
""",
            AnalysisType.MARKET_OVERVIEW: """
Focus on broader market context:
- Overall market conditions
- Sector performance
- Macro economic factors
- Market cycles
- Correlation with traditional assets
"""
        }
        
        return base_prompt + type_specific_prompts.get(analysis_type, "")
    
    async def _generate_prompt(self, request: AIAnalysisRequest) -> Optional[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        
        try:
            if request.custom_prompt:
                return request.custom_prompt[:MAX_PROMPT_LENGTH]
            
            prompt_parts = []
            
            # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            prompt_parts.append(f"Symbol: {request.symbol}")
            prompt_parts.append(f"Timeframe: {request.timeframe}")
            prompt_parts.append(f"Analysis Type: {request.analysis_type.value}")
            
            # –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if request.market_data and len(request.market_data) > 0:
                market_summary = await self._summarize_market_data(request.market_data)
                prompt_parts.append(f"Market Data Summary:\n{market_summary}")
            
            # –î–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª–∞
            if request.signal_data:
                signal_summary = self._summarize_signal_data(request.signal_data)
                prompt_parts.append(f"Trading Signal:\n{signal_summary}")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            if request.additional_context:
                context_summary = self._summarize_additional_context(request.additional_context)
                if context_summary:
                    prompt_parts.append(f"Additional Context:\n{context_summary}")
            
            # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ç–∏–ø—É –∞–Ω–∞–ª–∏–∑–∞
            type_instructions = self._get_type_specific_instructions(request.analysis_type)
            prompt_parts.append(type_instructions)
            
            full_prompt = "\n\n".join(prompt_parts)
            
            # –û–±—Ä–µ–∑–∞–µ–º –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
            if len(full_prompt) > MAX_PROMPT_LENGTH:
                full_prompt = full_prompt[:MAX_PROMPT_LENGTH] + "..."
            
            return full_prompt
            
        except Exception as e:
            self.logger.error(f"‚ùå Prompt generation failed: {e}")
            return None
    
    async def _summarize_market_data(self, market_data: List[CandleData]) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–∫–∏ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        
        if not market_data:
            return "No market data available"
        
        try:
            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å–≤–µ—á–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            recent_data = market_data[-50:] if len(market_data) > 50 else market_data
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            current_price = recent_data[-1].close_price
            open_price = recent_data[0].open_price
            high_price = max(candle.high_price for candle in recent_data)
            low_price = min(candle.low_price for candle in recent_data)
            
            # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã
            price_change = (current_price - open_price) / open_price * 100
            
            # –û–±—ä–µ–º
            total_volume = sum(candle.volume for candle in recent_data)
            avg_volume = total_volume / len(recent_data)
            
            # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è)
            price_changes = []
            for i in range(1, len(recent_data)):
                change = (recent_data[i].close_price - recent_data[i-1].close_price) / recent_data[i-1].close_price
                price_changes.append(abs(change))
            
            volatility = sum(price_changes) / len(price_changes) * 100 if price_changes else 0
            
            summary = f"""Current Price: ${current_price:.4f}
Price Change: {price_change:+.2f}%
Price Range: ${low_price:.4f} - ${high_price:.4f}
Average Volume: {avg_volume:.2f}
Recent Volatility: {volatility:.2f}%
Data Points: {len(recent_data)} candles"""
            
            return summary
            
        except Exception as e:
            self.logger.error(f"‚ùå Market data summarization failed: {e}")
            return "Error summarizing market data"
    
    def _summarize_signal_data(self, signal: StrategyResult) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–∫–∏ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
        
        try:
            summary = f"""Signal Type: {signal.signal_type.value}
Confidence: {signal.confidence:.2f}
Strength: {signal.strength.value}"""
            
            if signal.entry_price:
                summary += f"\nEntry Price: ${signal.entry_price:.4f}"
            
            if signal.stop_loss:
                summary += f"\nStop Loss: ${signal.stop_loss:.4f}"
            
            if signal.take_profit:
                summary += f"\nTake Profit: ${signal.take_profit:.4f}"
            
            if signal.reasoning:
                summary += f"\nReasoning: {signal.reasoning}"
            
            if signal.indicators_data:
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
                indicators = []
                for key, value in signal.indicators_data.items():
                    if isinstance(value, (int, float)):
                        indicators.append(f"{key}: {value:.4f}")
                
                if indicators:
                    summary += f"\nKey Indicators: {', '.join(indicators[:5])}"  # –ü–µ—Ä–≤—ã–µ 5
            
            return summary
            
        except Exception as e:
            self.logger.error(f"‚ùå Signal data summarization failed: {e}")
            return "Error summarizing signal data"
    
    def _summarize_additional_context(self, context: Dict[str, Any]) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        
        try:
            summary_parts = []
            
            if 'current_price' in context:
                summary_parts.append(f"Current Price: ${context['current_price']:.4f}")
            
            if 'portfolio_balance' in context:
                summary_parts.append(f"Portfolio Balance: ${context['portfolio_balance']:.2f}")
            
            if 'open_positions' in context:
                summary_parts.append(f"Open Positions: {context['open_positions']}")
            
            if 'market_trend' in context:
                summary_parts.append(f"Market Trend: {context['market_trend']}")
            
            if 'news' in context:
                news_count = len(context['news']) if isinstance(context['news'], list) else 1
                summary_parts.append(f"Recent News Items: {news_count}")
            
            if 'social' in context:
                social_count = len(context['social']) if isinstance(context['social'], list) else 1
                summary_parts.append(f"Social Mentions: {social_count}")
            
            return "\n".join(summary_parts) if summary_parts else ""
            
        except Exception as e:
            self.logger.error(f"‚ùå Context summarization failed: {e}")
            return ""
    
    def _get_type_specific_instructions(self, analysis_type: AnalysisType) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ —Ç–∏–ø—É –∞–Ω–∞–ª–∏–∑–∞"""
        
        instructions = {
            AnalysisType.TECHNICAL: """
Provide technical analysis focusing on:
1. Trend direction and strength
2. Key support/resistance levels  
3. Entry and exit points
4. Risk management suggestions
5. Price targets

Include confidence level based on technical pattern clarity.
""",
            AnalysisType.STRATEGY_VALIDATION: """
Evaluate the trading signal considering:
1. Signal quality and reliability
2. Market conditions suitability
3. Risk-reward ratio
4. Timing appropriateness
5. Alternative scenarios

Rate confidence based on signal strength and market context.
""",
            AnalysisType.RISK_ASSESSMENT: """
Focus on risk factors:
1. Position size recommendations
2. Stop-loss placement strategy
3. Potential loss scenarios
4. Correlation risks
5. Market volatility impact

Confidence should reflect certainty of risk assessment.
""",
            AnalysisType.SENTIMENT: """
Analyze market sentiment through:
1. News sentiment impact
2. Social media trends
3. Fear/greed indicators
4. Institutional activity
5. Contrarian opportunities

Base confidence on sentiment data quality and clarity.
""",
            AnalysisType.MARKET_OVERVIEW: """
Provide market overview covering:
1. Overall market direction
2. Key support/resistance for the market
3. Sector rotation trends
4. Macro factors influence
5. Short/medium term outlook

Confidence based on market signal consistency.
"""
        }
        
        return instructions.get(analysis_type, "Provide thorough analysis with clear reasoning.")
    
    def _get_recommendation_prompt(self) -> str:
        """–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
        
        return """Based on the provided market data and context, provide specific trading recommendations including:

1. Suggested action (BUY/SELL/HOLD)
2. Entry price range
3. Stop-loss level
4. Take-profit targets
5. Position sizing recommendation
6. Time horizon
7. Key risks to monitor

Format your response as JSON with the structure provided in the system prompt.
Focus on actionable advice with clear risk management."""
    
    # ========================================================================
    # CACHING AND RATE LIMITING
    # ========================================================================
    
    def _generate_cache_key(self, request: AIAnalysisRequest) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –∫–µ—à–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞"""
        
        # –°–æ–∑–¥–∞–µ–º —Ö–µ—à –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        key_data = {
            'analysis_type': request.analysis_type.value,
            'symbol': request.symbol,
            'timeframe': request.timeframe,
            'model': self.model
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ö–µ—à —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –µ—Å—Ç—å
        if request.market_data:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–≤–µ—á–µ–π –¥–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
            last_candles = request.market_data[-10:]
            market_hash = hashlib.md5(
                str([(c.open_time, c.close_price) for c in last_candles]).encode()
            ).hexdigest()[:8]
            key_data['market_hash'] = market_hash
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ö–µ—à —Å–∏–≥–Ω–∞–ª–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
        if request.signal_data:
            signal_hash = hashlib.md5(
                f"{request.signal_data.signal_type}{request.signal_data.confidence}".encode()
            ).hexdigest()[:8]
            key_data['signal_hash'] = signal_hash
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∫–ª—é—á
        key_string = json.dumps(key_data, sort_keys=True)
        return hashlib.sha256(key_string.encode()).hexdigest()[:16]
    
    def _get_from_cache(self, cache_key: str) -> Optional[AIAnalysisResponse]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–∑ –∫–µ—à–∞"""
        
        if cache_key not in self._analysis_cache:
            return None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º TTL
        cache_time = self._cache_timestamps.get(cache_key, 0)
        current_time = get_current_timestamp()
        
        if (current_time - cache_time) > (CACHE_TTL_SECONDS * 1000):
            # –ö–µ—à —É—Å—Ç–∞—Ä–µ–ª
            del self._analysis_cache[cache_key]
            del self._cache_timestamps[cache_key]
            return None
        
        return self._analysis_cache[cache_key]
    
    def _save_to_cache(self, cache_key: str, response: AIAnalysisResponse) -> None:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –∫–µ—à"""
        
        self._analysis_cache[cache_key] = response
        self._cache_timestamps[cache_key] = get_current_timestamp()
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –µ—Å–ª–∏ –∫–µ—à —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π
        if len(self._analysis_cache) > 100:
            self._cleanup_cache()
    
    def _cleanup_cache(self) -> None:
        """–û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –∫–µ—à–∞"""
        
        current_time = get_current_timestamp()
        keys_to_remove = []
        
        for key, timestamp in self._cache_timestamps.items():
            if (current_time - timestamp) > (CACHE_TTL_SECONDS * 1000):
                keys_to_remove.append(key)
        
        for key in keys_to_remove:
            if key in self._analysis_cache:
                del self._analysis_cache[key]
            if key in self._cache_timestamps:
                del self._cache_timestamps[key]
        
        if keys_to_remove:
            self.logger.debug(f"üßπ Cleaned up {len(keys_to_remove)} cache entries")
    
    async def _check_rate_limits(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤"""
        
        current_time = time.time()
        current_date = datetime.now(timezone.utc).date()
        
        # –°–±—Ä–æ—Å –¥–Ω–µ–≤–Ω–æ–≥–æ —Å—á–µ—Ç—á–∏–∫–∞
        if current_date != self._last_reset_date:
            self._daily_requests = 0
            self._last_reset_date = current_date
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞
        if self._daily_requests >= REQUESTS_PER_DAY:
            self.logger.warning(f"‚ö†Ô∏è Daily request limit exceeded: {self._daily_requests}")
            return False
        
        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (—Å—Ç–∞—Ä—à–µ 1 –º–∏–Ω—É—Ç—ã)
        self._request_times = [t for t in self._request_times if current_time - t < 60]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω—É—Ç–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞
        if len(self._request_times) >= REQUESTS_PER_MINUTE:
            self.logger.warning(f"‚ö†Ô∏è Per-minute request limit exceeded: {len(self._request_times)}")
            return False
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å
        self._request_times.append(current_time)
        self._daily_requests += 1
        
        return True
    
    # ========================================================================
    # HELPER METHODS
    # ========================================================================
    
    def _determine_confidence_level(self, confidence: float) -> AnalysisConfidence:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏"""
        
        if confidence >= 0.9:
            return AnalysisConfidence.VERY_HIGH
        elif confidence >= 0.7:
            return AnalysisConfidence.HIGH
        elif confidence >= 0.5:
            return AnalysisConfidence.MODERATE
        elif confidence >= 0.3:
            return AnalysisConfidence.LOW
        else:
            return AnalysisConfidence.VERY_LOW
    
    async def _save_analysis_to_db(
        self, 
        request: AIAnalysisRequest, 
        response: AIAnalysisResponse
    ) -> None:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        
        try:
            # –ú–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É AI –∞–Ω–∞–ª–∏–∑–æ–≤
            # –ü–æ–∫–∞ –ª–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            self.logger.debug(f"üíæ AI analysis completed: {request.analysis_type.value} for {request.symbol}")
            
        except Exception as e:
            self.logger.error(f"‚ùå Failed to save analysis to DB: {e}")
    
    def clear_cache(self) -> None:
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–≥–æ –∫–µ—à–∞"""
        self._analysis_cache.clear()
        self._cache_timestamps.clear()
        self.logger.info("üßπ AI analysis cache cleared")
    
    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Ä–≤–∏—Å–∞"""
        return {
            **self.stats,
            'cache_size': len(self._analysis_cache),
            'daily_requests': self._daily_requests,
            'requests_this_minute': len([t for t in self._request_times if time.time() - t < 60]),
            'api_key_configured': bool(self.api_key)
        }
    
    async def health_check(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
        
        status = "healthy"
        issues = []
        
        if not self.api_key:
            status = "unhealthy"
            issues.append("API key not configured")
        
        if self._daily_requests >= REQUESTS_PER_DAY:
            status = "degraded"
            issues.append("Daily rate limit reached")
        
        return {
            'status': status,
            'issues': issues,
            'api_configured': bool(self.api_key),
            'daily_requests': self._daily_requests,
            'cache_size': len(self._analysis_cache),
            'session_active': self._session is not None
        }


# ============================================================================
# EXAMPLE USAGE
# ============================================================================

if __name__ == "__main__":
    import asyncio
    from strategies.base_strategy import create_strategy_result
    
    async def test_openai_service():
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OpenAI Service"""
        print("üß™ Testing OpenAI Service")
        print("=" * 50)
        
        try:
            async with OpenAIService() as service:
                
                # Health check
                health = await service.health_check()
                print(f"üè• Health: {health['status']}")
                
                if not health['api_configured']:
                    print("‚ö†Ô∏è API key not configured, skipping API tests")
                    return
                
                # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
                test_signal = create_strategy_result(
                    SignalType.BUY,
                    confidence=0.85,
                    entry_price=50000.0,
                    reasoning="Strong upward momentum with volume confirmation"
                )
                
                # –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ —Å–∏–≥–Ω–∞–ª–∞
                print("\nüìù Testing signal analysis...")
                analysis = await service.analyze_signal(
                    signal=test_signal,
                    symbol="BTCUSDT",
                    timeframe="5m"
                )
                
                if analysis:
                    print(f"‚úÖ Analysis completed: confidence={analysis.confidence:.2f}")
                    print(f"Key points: {analysis.key_points[:2]}...")
                else:
                    print("‚ùå Analysis failed")
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                stats = service.get_stats()
                print(f"üìä Stats: {stats}")
                
                print("\n‚úÖ OpenAI Service test completed!")
                
        except Exception as e:
            print(f"‚ùå Test failed: {e}")
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
    asyncio.run(test_openai_service())
