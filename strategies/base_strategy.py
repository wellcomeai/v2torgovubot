"""
Trading Bot Base Strategy
–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
"""

from abc import ABC, abstractmethod
from typing import Dict, List, Any, Optional, Tuple, Union
from dataclasses import dataclass, field
from enum import Enum
from datetime import datetime, timezone
import pandas as pd
import numpy as np

from utils.logger import setup_logger
from utils.helpers import safe_float, get_current_timestamp, validate_symbol, validate_timeframe
from utils.indicators import IndicatorResult, IndicatorType
from data.historical_data import CandleData
from app.config.settings import get_settings


# ============================================================================
# ENUMS AND TYPES
# ============================================================================

class SignalType(str, Enum):
    """–¢–∏–ø—ã —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
    BUY = "BUY"
    SELL = "SELL"
    HOLD = "HOLD"
    STRONG_BUY = "STRONG_BUY"
    STRONG_SELL = "STRONG_SELL"


class SignalStrength(str, Enum):
    """–°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞"""
    WEAK = "WEAK"           # 0.5-0.6
    MODERATE = "MODERATE"   # 0.6-0.75
    STRONG = "STRONG"       # 0.75-0.9
    VERY_STRONG = "VERY_STRONG"  # 0.9+


class StrategyState(str, Enum):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    INACTIVE = "INACTIVE"
    ACTIVE = "ACTIVE"
    PAUSED = "PAUSED"
    ERROR = "ERROR"


# ============================================================================
# DATACLASSES
# ============================================================================

@dataclass
class StrategyResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    signal_type: SignalType
    confidence: float  # 0.0 - 1.0
    strength: SignalStrength
    entry_price: Optional[float] = None
    stop_loss: Optional[float] = None
    take_profit: Optional[float] = None
    reasoning: str = ""
    indicators_data: Dict[str, Any] = field(default_factory=dict)
    metadata: Dict[str, Any] = field(default_factory=dict)
    timestamp: int = field(default_factory=get_current_timestamp)
    
    def __post_init__(self):
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–ª—É —Å–∏–≥–Ω–∞–ª–∞ –ø–æ confidence
        if self.strength is None:
            if self.confidence >= 0.9:
                self.strength = SignalStrength.VERY_STRONG
            elif self.confidence >= 0.75:
                self.strength = SignalStrength.STRONG
            elif self.confidence >= 0.6:
                self.strength = SignalStrength.MODERATE
            else:
                self.strength = SignalStrength.WEAK
    
    def to_dict(self) -> Dict[str, Any]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î"""
        return {
            'signal_type': self.signal_type.value,
            'confidence': self.confidence,
            'strength': self.strength.value,
            'entry_price': self.entry_price,
            'stop_loss': self.stop_loss,
            'take_profit': self.take_profit,
            'reasoning': self.reasoning,
            'indicators_data': self.indicators_data,
            'metadata': self.metadata,
            'timestamp': self.timestamp
        }


@dataclass
class StrategyConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    name: str
    symbol: str
    timeframe: str
    parameters: Dict[str, Any]
    enabled: bool = True
    
    # Risk management
    max_position_size: float = 1000.0
    stop_loss_pct: float = 0.02  # 2%
    take_profit_pct: float = 0.04  # 4%
    
    # Signal filtering
    min_confidence: float = 0.7
    cooldown_minutes: int = 5
    max_signals_per_hour: int = 10
    
    def __post_init__(self):
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        if not validate_symbol(self.symbol):
            raise ValueError(f"Invalid symbol: {self.symbol}")
        
        if not validate_timeframe(self.timeframe):
            raise ValueError(f"Invalid timeframe: {self.timeframe}")
        
        if not (0 < self.min_confidence <= 1):
            raise ValueError("min_confidence must be between 0 and 1")


@dataclass  
class StrategyPerformance:
    """–ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    total_signals: int = 0
    profitable_signals: int = 0
    total_pnl: float = 0.0
    win_rate: float = 0.0
    avg_profit_per_trade: float = 0.0
    max_drawdown: float = 0.0
    sharpe_ratio: float = 0.0
    last_signal_time: Optional[int] = None
    
    def update_metrics(self, pnl: float) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏"""
        self.total_signals += 1
        self.total_pnl += pnl
        
        if pnl > 0:
            self.profitable_signals += 1
        
        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
        if self.total_signals > 0:
            self.win_rate = self.profitable_signals / self.total_signals
            self.avg_profit_per_trade = self.total_pnl / self.total_signals


# ============================================================================
# BASE STRATEGY CLASS
# ============================================================================

class BaseStrategy(ABC):
    """
    –ë–∞–∑–æ–≤—ã–π –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
    
    –í—Å–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–æ–ª–∂–Ω—ã –Ω–∞—Å–ª–µ–¥–æ–≤–∞—Ç—å –æ—Ç —ç—Ç–æ–≥–æ –∫–ª–∞—Å—Å–∞ –∏ —Ä–µ–∞–ª–∏–∑–æ–≤—ã–≤–∞—Ç—å
    –º–µ—Ç–æ–¥ analyze() –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
    """
    
    def __init__(self, config: StrategyConfig):
        self.config = config
        self.settings = get_settings()
        self.logger = setup_logger(f"strategies.{self.__class__.__name__}")
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        self.state = StrategyState.INACTIVE
        self.last_signal_time = 0
        self.signals_this_hour = 0
        self.hour_start = 0
        
        # –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self.performance = StrategyPerformance()
        
        # –ö–µ—à –¥–∞–Ω–Ω—ã—Ö –∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        self._data_cache: List[CandleData] = []
        self._indicators_cache: Dict[str, IndicatorResult] = {}
        self._cache_timestamp = 0
        self._cache_ttl = 60000  # 1 –º–∏–Ω—É—Ç–∞
        
        # –ò—Å—Ç–æ—Ä–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ (–¥–ª—è –∞–Ω–∞–ª–∏–∑–∞)
        self.signal_history: List[StrategyResult] = []
        self.max_history_size = 1000
        
        self.logger.info(f"üéØ Strategy initialized: {self.name} for {config.symbol}")
    
    # ========================================================================
    # PROPERTIES
    # ========================================================================
    
    @property 
    def name(self) -> str:
        """–ò–º—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        return self.__class__.__name__
    
    @property
    def symbol(self) -> str:
        """–¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª"""
        return self.config.symbol
    
    @property
    def timeframe(self) -> str:
        """–¢–∞–π–º—Ñ—Ä–µ–π–º"""
        return self.config.timeframe
    
    @property
    def is_active(self) -> bool:
        """–ê–∫—Ç–∏–≤–Ω–∞ –ª–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è"""
        return self.state == StrategyState.ACTIVE and self.config.enabled
    
    @property
    def parameters(self) -> Dict[str, Any]:
        """–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        return self.config.parameters
    
    # ========================================================================
    # ABSTRACT METHODS
    # ========================================================================
    
    @abstractmethod
    async def analyze(self, data: List[CandleData]) -> StrategyResult:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        
        Args:
            data: –°–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–≤–µ—á–µ–π (–æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º)
            
        Returns:
            StrategyResult —Å —Å–∏–≥–Ω–∞–ª–æ–º –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        """
        pass
    
    @abstractmethod
    def get_required_history_length(self) -> int:
        """
        –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–≤–µ—á–µ–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π
        """
        pass
    
    @abstractmethod
    def validate_parameters(self) -> Tuple[bool, List[str]]:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        
        Returns:
            (is_valid, errors_list)
        """
        pass
    
    # ========================================================================
    # PUBLIC METHODS
    # ========================================================================
    
    async def process_market_data(self, data: List[CandleData]) -> Optional[StrategyResult]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞
        
        Args:
            data: –°–ø–∏—Å–æ–∫ —Å–≤–µ—á–µ–π
            
        Returns:
            StrategyResult –µ—Å–ª–∏ –µ—Å—Ç—å —Å–∏–≥–Ω–∞–ª, –∏–Ω–∞—á–µ None
        """
        try:
            if not self.is_active:
                return None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –¥–∞–Ω–Ω—ã—Ö
            if len(data) < self.get_required_history_length():
                self.logger.debug(f"üìä Not enough data: {len(data)} < {self.get_required_history_length()}")
                return None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º cooldown –ø–µ—Ä–∏–æ–¥
            if not self._check_cooldown():
                return None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ —á–∞—Å
            if not self._check_hourly_limit():
                return None
            
            # –ö–µ—à–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            self._update_data_cache(data)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            with self._performance_timer():
                result = await self.analyze(data)
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if not self._validate_result(result):
                return None
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ confidence
            if result.confidence < self.config.min_confidence:
                self.logger.debug(f"üìä Signal confidence too low: {result.confidence} < {self.config.min_confidence}")
                return None
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            result.metadata.update({
                'strategy_name': self.name,
                'symbol': self.symbol,
                'timeframe': self.timeframe,
                'data_length': len(data),
                'last_price': data[-1].close_price if data else None
            })
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self._update_signal_stats(result)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            self._add_to_history(result)
            
            self.logger.info(
                f"üéØ Signal generated: {result.signal_type} "
                f"(confidence: {result.confidence:.2f}, price: {result.entry_price})"
            )
            
            return result
            
        except Exception as e:
            self.state = StrategyState.ERROR
            self.logger.error(f"‚ùå Strategy processing error: {e}")
            raise
    
    def start(self) -> None:
        """–ó–∞–ø—É—Å–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        try:
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            is_valid, errors = self.validate_parameters()
            if not is_valid:
                raise ValueError(f"Invalid parameters: {errors}")
            
            self.state = StrategyState.ACTIVE
            self.logger.info(f"‚ñ∂Ô∏è Strategy started: {self.name}")
            
        except Exception as e:
            self.state = StrategyState.ERROR
            self.logger.error(f"‚ùå Failed to start strategy: {e}")
            raise
    
    def stop(self) -> None:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        self.state = StrategyState.INACTIVE
        self.logger.info(f"‚èπÔ∏è Strategy stopped: {self.name}")
    
    def pause(self) -> None:
        """–ü–∞—É–∑–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        self.state = StrategyState.PAUSED
        self.logger.info(f"‚è∏Ô∏è Strategy paused: {self.name}")
    
    def resume(self) -> None:
        """–í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        self.state = StrategyState.ACTIVE
        self.logger.info(f"‚ñ∂Ô∏è Strategy resumed: {self.name}")
    
    def update_parameters(self, new_params: Dict[str, Any]) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        try:
            old_params = self.config.parameters.copy()
            self.config.parameters.update(new_params)
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            is_valid, errors = self.validate_parameters()
            if not is_valid:
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                self.config.parameters = old_params
                raise ValueError(f"Invalid parameters: {errors}")
            
            # –û—á–∏—â–∞–µ–º –∫–µ—à –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            self.clear_cache()
            
            self.logger.info(f"üîÑ Parameters updated: {new_params}")
            
        except Exception as e:
            self.logger.error(f"‚ùå Failed to update parameters: {e}")
            raise
    
    def clear_cache(self) -> None:
        """–û—á–∏—Å—Ç–∫–∞ –∫–µ—à–µ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        self._data_cache.clear()
        self._indicators_cache.clear()
        self._cache_timestamp = 0
        self.logger.debug("üßπ Strategy cache cleared")
    
    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        return {
            'name': self.name,
            'symbol': self.symbol,
            'timeframe': self.timeframe,
            'state': self.state.value,
            'enabled': self.config.enabled,
            'last_signal_time': self.last_signal_time,
            'signals_this_hour': self.signals_this_hour,
            'performance': {
                'total_signals': self.performance.total_signals,
                'win_rate': round(self.performance.win_rate * 100, 2),
                'total_pnl': round(self.performance.total_pnl, 2),
                'avg_profit_per_trade': round(self.performance.avg_profit_per_trade, 2)
            },
            'parameters': self.parameters
        }
    
    def get_recent_signals(self, count: int = 10) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        recent_signals = self.signal_history[-count:] if self.signal_history else []
        return [signal.to_dict() for signal in recent_signals]
    
    # ========================================================================
    # HELPER METHODS
    # ========================================================================
    
    def calculate_stop_loss(self, entry_price: float, signal_type: SignalType) -> float:
        """–†–∞—Å—á–µ—Ç —Å—Ç–æ–ø-–ª–æ—Å—Å–∞"""
        if signal_type in [SignalType.BUY, SignalType.STRONG_BUY]:
            return entry_price * (1 - self.config.stop_loss_pct)
        else:  # SELL signals
            return entry_price * (1 + self.config.stop_loss_pct)
    
    def calculate_take_profit(self, entry_price: float, signal_type: SignalType) -> float:
        """–†–∞—Å—á–µ—Ç —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞"""
        if signal_type in [SignalType.BUY, SignalType.STRONG_BUY]:
            return entry_price * (1 + self.config.take_profit_pct)
        else:  # SELL signals
            return entry_price * (1 - self.config.take_profit_pct)
    
    def get_latest_price(self, data: List[CandleData]) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ü–µ–Ω—ã"""
        if not data:
            raise ValueError("No data available")
        return data[-1].close_price
    
    def calculate_price_change_pct(self, data: List[CandleData], periods: int = 1) -> float:
        """–†–∞—Å—á–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö"""
        if len(data) <= periods:
            return 0.0
        
        current_price = data[-1].close_price
        old_price = data[-periods - 1].close_price
        
        if old_price == 0:
            return 0.0
        
        return ((current_price - old_price) / old_price) * 100
    
    def data_to_dataframe(self, data: List[CandleData]) -> pd.DataFrame:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ DataFrame –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        if not data:
            return pd.DataFrame()
        
        df_data = []
        for candle in data:
            df_data.append({
                'timestamp': candle.open_time,
                'open': candle.open_price,
                'high': candle.high_price,
                'low': candle.low_price,
                'close': candle.close_price,
                'volume': candle.volume
            })
        
        df = pd.DataFrame(df_data)
        df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
        df.set_index('timestamp', inplace=True)
        df.sort_index(inplace=True)
        
        return df
    
    # ========================================================================
    # PRIVATE METHODS
    # ========================================================================
    
    def _check_cooldown(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ cooldown –ø–µ—Ä–∏–æ–¥–∞ –º–µ–∂–¥—É —Å–∏–≥–Ω–∞–ª–∞–º–∏"""
        if self.last_signal_time == 0:
            return True
        
        current_time = get_current_timestamp()
        cooldown_ms = self.config.cooldown_minutes * 60 * 1000
        
        return (current_time - self.last_signal_time) >= cooldown_ms
    
    def _check_hourly_limit(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ —á–∞—Å"""
        current_time = get_current_timestamp()
        current_hour = current_time // (60 * 60 * 1000)
        
        if current_hour != self.hour_start:
            # –ù–æ–≤—ã–π —á–∞—Å - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
            self.hour_start = current_hour
            self.signals_this_hour = 0
        
        return self.signals_this_hour < self.config.max_signals_per_hour
    
    def _update_data_cache(self, data: List[CandleData]) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–µ—à–∞ –¥–∞–Ω–Ω—ã—Ö"""
        self._data_cache = data[-self.get_required_history_length():]
        self._cache_timestamp = get_current_timestamp()
    
    def _validate_result(self, result: StrategyResult) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        if not isinstance(result, StrategyResult):
            self.logger.error("‚ùå Result must be StrategyResult instance")
            return False
        
        if not (0 <= result.confidence <= 1):
            self.logger.error(f"‚ùå Invalid confidence: {result.confidence}")
            return False
        
        if result.signal_type not in SignalType:
            self.logger.error(f"‚ùå Invalid signal type: {result.signal_type}")
            return False
        
        return True
    
    def _update_signal_stats(self, result: StrategyResult) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        current_time = get_current_timestamp()
        self.last_signal_time = current_time
        self.signals_this_hour += 1
        self.performance.last_signal_time = current_time
    
    def _add_to_history(self, result: StrategyResult) -> None:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        self.signal_history.append(result)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
        if len(self.signal_history) > self.max_history_size:
            self.signal_history = self.signal_history[-self.max_history_size:]
    
    def _performance_timer(self):
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        from contextlib import contextmanager
        import time
        
        @contextmanager
        def timer():
            start = time.perf_counter()
            try:
                yield
            finally:
                duration = time.perf_counter() - start
                self.logger.debug(f"‚è±Ô∏è Analysis took {duration:.4f}s")
        
        return timer()
    
    def __str__(self) -> str:
        return f"{self.name}({self.symbol}, {self.timeframe})"
    
    def __repr__(self) -> str:
        return (f"{self.__class__.__name__}(symbol='{self.symbol}', "
                f"timeframe='{self.timeframe}', state='{self.state.value}')")


# ============================================================================
# UTILITY FUNCTIONS FOR STRATEGIES
# ============================================================================

def create_strategy_result(
    signal_type: Union[str, SignalType],
    confidence: float,
    entry_price: float = None,
    reasoning: str = "",
    **kwargs
) -> StrategyResult:
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è StrategyResult"""
    
    if isinstance(signal_type, str):
        signal_type = SignalType(signal_type.upper())
    
    return StrategyResult(
        signal_type=signal_type,
        confidence=confidence,
        entry_price=entry_price,
        reasoning=reasoning,
        **kwargs
    )


def combine_signals(signals: List[StrategyResult]) -> StrategyResult:
    """
    –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –æ–¥–∏–Ω
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –º—É–ª—å—Ç–∏-–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
    """
    if not signals:
        return create_strategy_result(SignalType.HOLD, 0.0, reasoning="No signals to combine")
    
    if len(signals) == 1:
        return signals[0]
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –ø–æ —Ç–∏–ø–∞–º
    signal_counts = {signal_type: 0 for signal_type in SignalType}
    total_confidence = 0.0
    
    for signal in signals:
        signal_counts[signal.signal_type] += 1
        total_confidence += signal.confidence
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π —Å–∏–≥–Ω–∞–ª
    max_count = max(signal_counts.values())
    dominant_signals = [st for st, count in signal_counts.items() if count == max_count]
    
    # –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–≤–Ω—ã—Ö –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–∏–≥–Ω–∞–ª–æ–≤, –±–µ—Ä–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
    signal_priority = [SignalType.STRONG_BUY, SignalType.BUY, SignalType.STRONG_SELL, 
                      SignalType.SELL, SignalType.HOLD]
    
    for signal_type in signal_priority:
        if signal_type in dominant_signals:
            combined_signal = signal_type
            break
    else:
        combined_signal = SignalType.HOLD
    
    # –°—Ä–µ–¥–Ω—è—è confidence
    avg_confidence = total_confidence / len(signals)
    
    # –ë–µ—Ä–µ–º —Ü–µ–Ω—É –æ—Ç –ø–µ—Ä–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ —Å entry_price
    entry_price = None
    for signal in signals:
        if signal.entry_price is not None:
            entry_price = signal.entry_price
            break
    
    return create_strategy_result(
        signal_type=combined_signal,
        confidence=avg_confidence,
        entry_price=entry_price,
        reasoning=f"Combined {len(signals)} signals: {[s.signal_type.value for s in signals]}",
        metadata={'combined_signals': [s.to_dict() for s in signals]}
    )


# ============================================================================
# EXAMPLE USAGE
# ============================================================================

if __name__ == "__main__":
    # –ü—Ä–∏–º–µ—Ä –ø—Ä–æ—Å—Ç–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    
    class ExampleStrategy(BaseStrategy):
        """–ü—Ä–∏–º–µ—Ä –ø—Ä–æ—Å—Ç–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        
        async def analyze(self, data: List[CandleData]) -> StrategyResult:
            """–ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã"""
            if len(data) < 2:
                return create_strategy_result(SignalType.HOLD, 0.0)
            
            # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞: –µ—Å–ª–∏ —Ü–µ–Ω–∞ –≤—ã—Ä–æ—Å–ª–∞ –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 1%, —Å–∏–≥–Ω–∞–ª SELL
            # –µ—Å–ª–∏ —É–ø–∞–ª–∞ –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 1%, —Å–∏–≥–Ω–∞–ª BUY
            price_change = self.calculate_price_change_pct(data, 1)
            current_price = self.get_latest_price(data)
            
            if price_change > 1.0:
                return create_strategy_result(
                    SignalType.SELL,
                    confidence=min(0.8, abs(price_change) / 5.0),
                    entry_price=current_price,
                    reasoning=f"Price increased by {price_change:.2f}%"
                )
            elif price_change < -1.0:
                return create_strategy_result(
                    SignalType.BUY,
                    confidence=min(0.8, abs(price_change) / 5.0),
                    entry_price=current_price,
                    reasoning=f"Price decreased by {price_change:.2f}%"
                )
            else:
                return create_strategy_result(
                    SignalType.HOLD,
                    confidence=0.5,
                    reasoning=f"Price change too small: {price_change:.2f}%"
                )
        
        def get_required_history_length(self) -> int:
            return 2  # –ù—É–∂–Ω—ã –º–∏–Ω–∏–º—É–º 2 —Å–≤–µ—á–∏
        
        def validate_parameters(self) -> Tuple[bool, List[str]]:
            return True, []  # –ü—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    print("üß™ Testing Base Strategy")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = StrategyConfig(
        name="example_strategy",
        symbol="BTCUSDT",
        timeframe="5m",
        parameters={}
    )
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
    strategy = ExampleStrategy(config)
    print(f"‚úÖ Strategy created: {strategy}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º
    strategy.start()
    print(f"‚úÖ Strategy started, state: {strategy.state}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å
    status = strategy.get_status()
    print(f"‚úÖ Strategy status: {status}")
    
    print("\n‚úÖ Base strategy test completed!")
