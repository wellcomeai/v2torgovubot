"""
Moving Average Crossover Strategy
–°—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è —Å–∫–æ–ª—å–∑—è—â–∏—Ö —Å—Ä–µ–¥–Ω–∏—Ö
"""

from typing import List, Dict, Any, Tuple
import numpy as np

from .base_strategy import BaseStrategy, StrategyResult, SignalType, create_strategy_result
from .strategy_registry import register_strategy
from data.historical_data import CandleData
from utils.indicators import sma, ema, detect_crossover, IndicatorResult
from utils.helpers import safe_float


# ============================================================================
# MOVING AVERAGE STRATEGY
# ============================================================================

@register_strategy(
    name="moving_average",
    description="Classic moving average crossover strategy with configurable periods and MA types",
    version="1.2.0", 
    author="Trading Bot Team",
    category="Trend Following",
    parameters_schema={
        "fast_period": {
            "type": "integer",
            "description": "Period for fast moving average",
            "default": 10,
            "min": 2,
            "max": 100
        },
        "slow_period": {
            "type": "integer", 
            "description": "Period for slow moving average",
            "default": 20,
            "min": 5,
            "max": 200
        },
        "ma_type": {
            "type": "string",
            "description": "Type of moving average (sma, ema)",
            "default": "sma",
            "choices": ["sma", "ema"]
        },
        "source": {
            "type": "string",
            "description": "Price source (close, open, high, low)",
            "default": "close",
            "choices": ["close", "open", "high", "low"]
        },
        "signal_smoothing": {
            "type": "boolean",
            "description": "Enable signal smoothing to reduce noise",
            "default": True
        },
        "trend_filter": {
            "type": "boolean",
            "description": "Only trade in direction of longer trend",
            "default": False
        },
        "trend_period": {
            "type": "integer",
            "description": "Period for trend filter MA",
            "default": 50,
            "min": 10,
            "max": 500
        }
    },
    supported_timeframes=["1m", "5m", "15m", "30m", "1h", "4h", "1d"]
)
class MovingAverageStrategy(BaseStrategy):
    """
    –°—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è —Å–∫–æ–ª—å–∑—è—â–∏—Ö —Å—Ä–µ–¥–Ω–∏—Ö
    
    –õ–æ–≥–∏–∫–∞:
    - BUY —Å–∏–≥–Ω–∞–ª: –∫–æ–≥–¥–∞ –±—ã—Å—Ç—Ä–∞—è MA –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç –º–µ–¥–ª–µ–Ω–Ω—É—é MA —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö
    - SELL —Å–∏–≥–Ω–∞–ª: –∫–æ–≥–¥–∞ –±—ã—Å—Ç—Ä–∞—è MA –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç –º–µ–¥–ª–µ–Ω–Ω—É—é MA —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑
    
    –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã:
    - –°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —à—É–º–∞
    - –§–∏–ª—å—Ç—Ä –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ç—Ä–µ–Ω–¥–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    - –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–±—ä–µ–º–æ–º (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    """
    
    def __init__(self, config):
        super().__init__(config)
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        self.fast_period = self.parameters.get("fast_period", 10)
        self.slow_period = self.parameters.get("slow_period", 20)
        self.ma_type = self.parameters.get("ma_type", "sma").lower()
        self.source = self.parameters.get("source", "close").lower()
        self.signal_smoothing = self.parameters.get("signal_smoothing", True)
        self.trend_filter = self.parameters.get("trend_filter", False)
        self.trend_period = self.parameters.get("trend_period", 50)
        
        # –í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.last_crossover_bar = -1  # –ò–Ω–¥–µ–∫—Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
        self.previous_fast_ma = None
        self.previous_slow_ma = None
        
        # –ö–µ—à –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        self._ma_cache = {}
        
        self.logger.info(
            f"üéØ MA Strategy initialized: {self.fast_period}/{self.slow_period} {self.ma_type.upper()} "
            f"on {self.source}, smoothing: {self.signal_smoothing}"
        )
    
    async def analyze(self, data: List[CandleData]) -> StrategyResult:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        
        Args:
            data: –°–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–≤–µ—á–µ–π
            
        Returns:
            StrategyResult —Å —Ç–æ—Ä–≥–æ–≤—ã–º —Å–∏–≥–Ω–∞–ª–æ–º
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
            if len(data) < self.get_required_history_length():
                return create_strategy_result(
                    SignalType.HOLD,
                    0.0,
                    reasoning=f"Not enough data: {len(data)} < {self.get_required_history_length()}"
                )
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—ã
            prices = self._extract_price_data(data)
            current_price = prices[-1]
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Å–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ
            fast_ma_result = self._calculate_moving_average(prices, self.fast_period)
            slow_ma_result = self._calculate_moving_average(prices, self.slow_period)
            
            if not fast_ma_result.values or not slow_ma_result.values:
                return create_strategy_result(
                    SignalType.HOLD,
                    0.0,
                    reasoning="Failed to calculate moving averages"
                )
            
            fast_ma_values = fast_ma_result.values
            slow_ma_values = slow_ma_result.values
            
            # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–ª–∏–Ω—ã –º–∞—Å—Å–∏–≤–æ–≤
            min_length = min(len(fast_ma_values), len(slow_ma_values))
            fast_ma_values = fast_ma_values[-min_length:]
            slow_ma_values = slow_ma_values[-min_length:]
            
            if min_length < 2:
                return create_strategy_result(
                    SignalType.HOLD,
                    0.0,
                    reasoning="Not enough MA values for crossover detection"
                )
            
            # –¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è MA
            current_fast_ma = fast_ma_values[-1]
            current_slow_ma = slow_ma_values[-1]
            
            # –ü—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è MA
            prev_fast_ma = fast_ma_values[-2]
            prev_slow_ma = slow_ma_values[-2]
            
            # –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π
            crossover_info = self._detect_ma_crossover(
                fast_ma_values, slow_ma_values, 
                prev_fast_ma, prev_slow_ma,
                current_fast_ma, current_slow_ma
            )
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
            base_signal = crossover_info['signal_type']
            base_confidence = crossover_info['confidence']
            
            if base_signal == SignalType.HOLD:
                return create_strategy_result(
                    SignalType.HOLD,
                    base_confidence,
                    entry_price=current_price,
                    reasoning=crossover_info['reasoning']
                )
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            filtered_result = await self._apply_filters(
                data, base_signal, base_confidence, 
                current_price, current_fast_ma, current_slow_ma
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º stop loss –∏ take profit
            if filtered_result.signal_type != SignalType.HOLD:
                filtered_result.stop_loss = self.calculate_stop_loss(current_price, filtered_result.signal_type)
                filtered_result.take_profit = self.calculate_take_profit(current_price, filtered_result.signal_type)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            filtered_result.indicators_data = {
                'fast_ma': current_fast_ma,
                'slow_ma': current_slow_ma,
                'fast_period': self.fast_period,
                'slow_period': self.slow_period,
                'ma_type': self.ma_type,
                'crossover_strength': crossover_info['strength'],
                'trend_alignment': crossover_info.get('trend_aligned', True)
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            self.previous_fast_ma = current_fast_ma
            self.previous_slow_ma = current_slow_ma
            
            self.logger.debug(
                f"üìä MA Analysis: Fast MA={current_fast_ma:.2f}, Slow MA={current_slow_ma:.2f}, "
                f"Signal={filtered_result.signal_type}, Confidence={filtered_result.confidence:.2f}"
            )
            
            return filtered_result
            
        except Exception as e:
            self.logger.error(f"‚ùå MA Strategy analysis failed: {e}")
            return create_strategy_result(
                SignalType.HOLD,
                0.0,
                reasoning=f"Analysis error: {str(e)}"
            )
    
    def _extract_price_data(self, data: List[CandleData]) -> List[float]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ü–µ–Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –∏—Å—Ç–æ—á–Ω–∏–∫—É"""
        if self.source == "close":
            return [candle.close_price for candle in data]
        elif self.source == "open":
            return [candle.open_price for candle in data]
        elif self.source == "high":
            return [candle.high_price for candle in data]
        elif self.source == "low":
            return [candle.low_price for candle in data]
        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é close
            return [candle.close_price for candle in data]
    
    def _calculate_moving_average(self, prices: List[float], period: int) -> IndicatorResult:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å–∫–æ–ª—å–∑—è—â–µ–π —Å—Ä–µ–¥–Ω–µ–π"""
        cache_key = f"{self.ma_type}_{period}_{len(prices)}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
        if cache_key in self._ma_cache:
            return self._ma_cache[cache_key]
        
        try:
            if self.ma_type == "sma":
                result = sma(prices, period)
            elif self.ma_type == "ema":
                result = ema(prices, period)
            else:
                # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é SMA
                result = sma(prices, period)
            
            # –ö–µ—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self._ma_cache[cache_key] = result
            return result
            
        except Exception as e:
            self.logger.error(f"‚ùå Failed to calculate {self.ma_type.upper()} {period}: {e}")
            return IndicatorResult(
                name=f"{self.ma_type.upper()}_{period}",
                type="trend",
                values=[]
            )
    
    def _detect_ma_crossover(
        self, 
        fast_values: List[float], 
        slow_values: List[float],
        prev_fast: float,
        prev_slow: float, 
        curr_fast: float,
        curr_slow: float
    ) -> Dict[str, Any]:
        """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è —Å–∫–æ–ª—å–∑—è—â–∏—Ö —Å—Ä–µ–¥–Ω–∏—Ö"""
        
        crossover_info = {
            'signal_type': SignalType.HOLD,
            'confidence': 0.5,
            'strength': 0.0,
            'reasoning': "No crossover detected"
        }
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π
            crossovers = detect_crossover(fast_values, slow_values)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
            recent_bullish = crossovers['bullish'][-5:] if crossovers['bullish'] else []
            recent_bearish = crossovers['bearish'][-5:] if crossovers['bearish'] else []
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ
            bullish_crossover = (prev_fast <= prev_slow and curr_fast > curr_slow)
            bearish_crossover = (prev_fast >= prev_slow and curr_fast < curr_slow)
            
            if bullish_crossover:
                # –ë—ã—á—å–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ (–±—ã—Å—Ç—Ä–∞—è –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç –º–µ–¥–ª–µ–Ω–Ω—É—é —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö)
                strength = self._calculate_crossover_strength(curr_fast, curr_slow, "bullish")
                confidence = min(0.9, 0.6 + strength * 0.3)
                
                crossover_info.update({
                    'signal_type': SignalType.BUY,
                    'confidence': confidence,
                    'strength': strength,
                    'reasoning': f"Bullish MA crossover: Fast MA ({curr_fast:.2f}) > Slow MA ({curr_slow:.2f})"
                })
                
            elif bearish_crossover:
                # –ú–µ–¥–≤–µ–∂—å–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ (–±—ã—Å—Ç—Ä–∞—è –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç –º–µ–¥–ª–µ–Ω–Ω—É—é —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑)
                strength = self._calculate_crossover_strength(curr_fast, curr_slow, "bearish")
                confidence = min(0.9, 0.6 + strength * 0.3)
                
                crossover_info.update({
                    'signal_type': SignalType.SELL,
                    'confidence': confidence,
                    'strength': strength,
                    'reasoning': f"Bearish MA crossover: Fast MA ({curr_fast:.2f}) < Slow MA ({curr_slow:.2f})"
                })
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–∏–ª—ã —Ç—Ä–µ–Ω–¥–∞
            if crossover_info['signal_type'] != SignalType.HOLD:
                # –ß–µ–º –±–æ–ª—å—à–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É MA, —Ç–µ–º —Å–∏–ª—å–Ω–µ–µ —Å–∏–≥–Ω–∞–ª
                ma_distance = abs(curr_fast - curr_slow) / curr_slow
                if ma_distance > 0.01:  # –ë–æ–ª—å—à–µ 1% —Ä–∞–∑–Ω–∏—Ü—ã
                    crossover_info['confidence'] *= 1.2  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º confidence
                    crossover_info['confidence'] = min(crossover_info['confidence'], 0.95)
            
            return crossover_info
            
        except Exception as e:
            self.logger.error(f"‚ùå Crossover detection failed: {e}")
            return crossover_info
    
    def _calculate_crossover_strength(self, fast_ma: float, slow_ma: float, direction: str) -> float:
        """–†–∞—Å—á–µ—Ç —Å–∏–ª—ã –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è"""
        try:
            # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É MA –∫–∞–∫ –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç —Ü–µ–Ω—ã
            distance_pct = abs(fast_ma - slow_ma) / max(fast_ma, slow_ma)
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å–∏–ª—É –æ—Ç 0 –¥–æ 1
            strength = min(1.0, distance_pct * 50)  # 2% —Ä–∞–∑–Ω–∏—Ü—ã = —Å–∏–ª–∞ 1.0
            
            return strength
            
        except Exception:
            return 0.5
    
    async def _apply_filters(
        self,
        data: List[CandleData],
        signal: SignalType,
        confidence: float,
        current_price: float,
        fast_ma: float,
        slow_ma: float
    ) -> StrategyResult:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∫ —Å–∏–≥–Ω–∞–ª—É"""
        
        filtered_confidence = confidence
        reasoning_parts = []
        
        try:
            # –§–∏–ª—å—Ç—Ä —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
            if self.signal_smoothing:
                smoothing_factor = self._apply_signal_smoothing(data)
                filtered_confidence *= smoothing_factor
                reasoning_parts.append(f"smoothing_factor={smoothing_factor:.2f}")
            
            # –§–∏–ª—å—Ç—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞
            if self.trend_filter:
                trend_alignment = await self._check_trend_alignment(data, signal)
                if not trend_alignment['aligned']:
                    filtered_confidence *= 0.5  # –°–Ω–∏–∂–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
                    reasoning_parts.append("against_trend")
                else:
                    reasoning_parts.append("with_trend")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            volatility_factor = self._check_volatility(data)
            filtered_confidence *= volatility_factor
            reasoning_parts.append(f"volatility_factor={volatility_factor:.2f}")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π reasoning
            base_reasoning = f"MA crossover: fast={fast_ma:.2f}, slow={slow_ma:.2f}"
            if reasoning_parts:
                full_reasoning = f"{base_reasoning}, filters: {', '.join(reasoning_parts)}"
            else:
                full_reasoning = base_reasoning
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª
            if filtered_confidence < self.config.min_confidence:
                final_signal = SignalType.HOLD
                full_reasoning += f" (confidence {filtered_confidence:.2f} < threshold {self.config.min_confidence})"
            else:
                final_signal = signal
            
            return create_strategy_result(
                signal_type=final_signal,
                confidence=min(filtered_confidence, 0.95),  # –ú–∞–∫—Å–∏–º—É–º 95%
                entry_price=current_price,
                reasoning=full_reasoning
            )
            
        except Exception as e:
            self.logger.error(f"‚ùå Filter application failed: {e}")
            return create_strategy_result(
                SignalType.HOLD,
                0.0,
                reasoning=f"Filter error: {str(e)}"
            )
    
    def _apply_signal_smoothing(self, data: List[CandleData]) -> float:
        """–°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —à—É–º–∞"""
        try:
            if len(data) < 5:
                return 1.0
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–≤–µ—á–µ–π –Ω–∞ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è
            recent_prices = [candle.close_price for candle in data[-5:]]
            
            # –°—á–∏—Ç–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è
            up_moves = 0
            down_moves = 0
            
            for i in range(1, len(recent_prices)):
                if recent_prices[i] > recent_prices[i-1]:
                    up_moves += 1
                elif recent_prices[i] < recent_prices[i-1]:
                    down_moves += 1
            
            # –ï—Å–ª–∏ –¥–≤–∏–∂–µ–Ω–∏–µ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–µ, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
            total_moves = up_moves + down_moves
            if total_moves > 0:
                consistency = max(up_moves, down_moves) / total_moves
                return 0.8 + (consistency * 0.4)  # –û—Ç 0.8 –¥–æ 1.2
            
            return 1.0
            
        except Exception:
            return 1.0
    
    async def _check_trend_alignment(self, data: List[CandleData], signal: SignalType) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ —Å –æ–±—â–∏–º —Ç—Ä–µ–Ω–¥–æ–º"""
        try:
            if len(data) < self.trend_period:
                return {'aligned': True, 'trend_direction': 'unknown'}
            
            # –í—ã—á–∏—Å–ª—è–µ–º –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—É—é MA –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞
            prices = self._extract_price_data(data)
            trend_ma_result = self._calculate_moving_average(prices, self.trend_period)
            
            if not trend_ma_result.values or len(trend_ma_result.values) < 2:
                return {'aligned': True, 'trend_direction': 'unknown'}
            
            trend_ma_values = trend_ma_result.values
            current_trend_ma = trend_ma_values[-1]
            prev_trend_ma = trend_ma_values[-2]
            current_price = prices[-1]
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞
            if current_trend_ma > prev_trend_ma and current_price > current_trend_ma:
                trend_direction = 'up'
            elif current_trend_ma < prev_trend_ma and current_price < current_trend_ma:
                trend_direction = 'down'
            else:
                trend_direction = 'sideways'
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ
            aligned = False
            if signal in [SignalType.BUY, SignalType.STRONG_BUY] and trend_direction == 'up':
                aligned = True
            elif signal in [SignalType.SELL, SignalType.STRONG_SELL] and trend_direction == 'down':
                aligned = True
            elif trend_direction == 'sideways':
                aligned = True  # –í –±–æ–∫–æ–≤–æ–º —Ç—Ä–µ–Ω–¥–µ —Ä–∞–∑—Ä–µ—à–∞–µ–º –ª—é–±—ã–µ —Å–∏–≥–Ω–∞–ª—ã
            
            return {
                'aligned': aligned,
                'trend_direction': trend_direction,
                'trend_ma': current_trend_ma
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå Trend alignment check failed: {e}")
            return {'aligned': True, 'trend_direction': 'unknown'}
    
    def _check_volatility(self, data: List[CandleData]) -> float:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ —Ä—ã–Ω–∫–∞"""
        try:
            if len(data) < 10:
                return 1.0
            
            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–≤–µ—á–µ–π
            recent_data = data[-10:]
            price_changes = []
            
            for i in range(1, len(recent_data)):
                change = abs(recent_data[i].close_price - recent_data[i-1].close_price) / recent_data[i-1].close_price
                price_changes.append(change)
            
            if not price_changes:
                return 1.0
            
            # –°—Ä–µ–¥–Ω—è—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            avg_volatility = np.mean(price_changes)
            
            # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            if avg_volatility > 0.03:  # –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (>3%)
                return 0.8  # –°–Ω–∏–∂–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            elif avg_volatility < 0.005:  # –ù–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (<0.5%)
                return 0.9  # –ù–µ–±–æ–ª—å—à–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            else:
                return 1.0  # –ù–æ—Ä–º–∞–ª—å–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
                
        except Exception:
            return 1.0
    
    def get_required_history_length(self) -> int:
        """–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        # –ù—É–∂–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∞–º–æ–π –º–µ–¥–ª–µ–Ω–Ω–æ–π MA –ø–ª—é—Å –∑–∞–ø–∞—Å –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
        base_requirement = max(self.slow_period, 20)
        
        if self.trend_filter:
            base_requirement = max(base_requirement, self.trend_period)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤
        return base_requirement + 10
    
    def validate_parameters(self) -> Tuple[bool, List[str]]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        errors = []
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–∏–æ–¥–æ–≤
            if not isinstance(self.fast_period, int) or self.fast_period < 1:
                errors.append("fast_period must be a positive integer")
            
            if not isinstance(self.slow_period, int) or self.slow_period < 1:
                errors.append("slow_period must be a positive integer")
            
            if self.fast_period >= self.slow_period:
                errors.append("fast_period must be less than slow_period")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ MA
            if self.ma_type not in ["sma", "ema"]:
                errors.append("ma_type must be 'sma' or 'ema'")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —Ü–µ–Ω—ã
            if self.source not in ["close", "open", "high", "low"]:
                errors.append("source must be one of: close, open, high, low")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–Ω–¥ —Ñ–∏–ª—å—Ç—Ä–∞
            if self.trend_filter:
                if not isinstance(self.trend_period, int) or self.trend_period < 1:
                    errors.append("trend_period must be a positive integer")
                
                if self.trend_period <= self.slow_period:
                    errors.append("trend_period should be greater than slow_period")
            
            return len(errors) == 0, errors
            
        except Exception as e:
            errors.append(f"Parameter validation error: {str(e)}")
            return False, errors
    
    def get_parameter_info(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö"""
        return {
            'fast_period': self.fast_period,
            'slow_period': self.slow_period,
            'ma_type': self.ma_type,
            'source': self.source,
            'signal_smoothing': self.signal_smoothing,
            'trend_filter': self.trend_filter,
            'trend_period': self.trend_period if self.trend_filter else None,
            'required_history': self.get_required_history_length()
        }
    
    def __str__(self) -> str:
        return f"MovingAverageStrategy({self.fast_period}/{self.slow_period} {self.ma_type.upper()})"


# ============================================================================
# EXAMPLE USAGE
# ============================================================================

if __name__ == "__main__":
    import asyncio
    from .base_strategy import StrategyConfig
    from data.historical_data import CandleData
    from utils.helpers import get_current_timestamp
    
    async def test_moving_average_strategy():
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å–∫–æ–ª—å–∑—è—â–∏—Ö —Å—Ä–µ–¥–Ω–∏—Ö"""
        print("üß™ Testing Moving Average Strategy")
        print("=" * 50)
        
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            config = StrategyConfig(
                name="moving_average",
                symbol="BTCUSDT",
                timeframe="5m",
                parameters={
                    "fast_period": 10,
                    "slow_period": 20,
                    "ma_type": "sma",
                    "source": "close",
                    "signal_smoothing": True,
                    "trend_filter": False
                }
            )
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
            strategy = MovingAverageStrategy(config)
            print(f"‚úÖ Strategy created: {strategy}")
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            is_valid, errors = strategy.validate_parameters()
            if is_valid:
                print("‚úÖ Parameters are valid")
            else:
                print(f"‚ùå Parameter errors: {errors}")
                return
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            test_data = []
            base_price = 50000.0
            timestamp = get_current_timestamp() - (100 * 5 * 60 * 1000)  # 100 —Å–≤–µ—á–µ–π –ø–æ 5 –º–∏–Ω—É—Ç
            
            for i in range(100):
                # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–¥ —Å —à—É–º–æ–º
                trend = i * 50  # –í–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥
                noise = (i % 10 - 5) * 100  # –°–ª—É—á–∞–π–Ω—ã–π —à—É–º
                price = base_price + trend + noise
                
                candle = CandleData(
                    symbol="BTCUSDT",
                    timeframe="5m",
                    open_time=timestamp + i * 5 * 60 * 1000,
                    close_time=timestamp + (i + 1) * 5 * 60 * 1000 - 1,
                    open_price=price,
                    high_price=price * 1.01,
                    low_price=price * 0.99,
                    close_price=price,
                    volume=1000.0
                )
                test_data.append(candle)
            
            print(f"üìä Created {len(test_data)} test candles")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
            strategy.start()
            print("‚ñ∂Ô∏è Strategy started")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            result = await strategy.process_market_data(test_data)
            
            if result:
                print(f"üéØ Signal generated:")
                print(f"   Type: {result.signal_type}")
                print(f"   Confidence: {result.confidence:.2f}")
                print(f"   Entry Price: {result.entry_price}")
                print(f"   Stop Loss: {result.stop_loss}")
                print(f"   Take Profit: {result.take_profit}")
                print(f"   Reasoning: {result.reasoning}")
                print(f"   Indicators: {result.indicators_data}")
            else:
                print("üìä No signal generated")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            status = strategy.get_status()
            print(f"\nüìà Strategy Status:")
            print(f"   State: {status['state']}")
            print(f"   Total Signals: {status['performance']['total_signals']}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            print(f"\nüîÑ Testing parameter update...")
            strategy.update_parameters({"fast_period": 5, "slow_period": 15})
            print(f"‚úÖ Parameters updated: {strategy.get_parameter_info()}")
            
            print("\n‚úÖ Moving Average Strategy test completed!")
            
        except Exception as e:
            print(f"‚ùå Test failed: {e}")
            import traceback
            traceback.print_exc()
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    asyncio.run(test_moving_average_strategy())
