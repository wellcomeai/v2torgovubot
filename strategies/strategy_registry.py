"""
Trading Bot Strategy Registry
–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ä–µ–µ—Å—Ç—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏
"""

from typing import Dict, List, Type, Optional, Any, Callable
from dataclasses import dataclass
import importlib
import inspect
from pathlib import Path
import sys

from utils.logger import setup_logger
from .base_strategy import BaseStrategy, StrategyConfig


# ============================================================================
# TYPES AND DATACLASSES
# ============================================================================

@dataclass
class StrategyInfo:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    name: str
    strategy_class: Type[BaseStrategy]
    description: str
    version: str
    author: str
    category: str
    parameters_schema: Dict[str, Any]
    min_history_length: int
    supported_timeframes: List[str]
    is_active: bool = True
    
    def to_dict(self) -> Dict[str, Any]:
        return {
            'name': self.name,
            'class_name': self.strategy_class.__name__,
            'module': self.strategy_class.__module__,
            'description': self.description,
            'version': self.version,
            'author': self.author,
            'category': self.category,
            'parameters_schema': self.parameters_schema,
            'min_history_length': self.min_history_length,
            'supported_timeframes': self.supported_timeframes,
            'is_active': self.is_active
        }


# ============================================================================
# STRATEGY REGISTRY CLASS
# ============================================================================

class StrategyRegistry:
    """
    –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ä–µ–µ—Å—Ç—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
    
    –ü–æ–∑–≤–æ–ª—è–µ—Ç:
    - –†–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    - –ü–æ–ª—É—á–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π  
    - –°–æ–∑–¥–∞–≤–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –ø–æ –∏–º–µ–Ω–∏
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    """
    
    _strategies: Dict[str, StrategyInfo] = {}
    _logger = setup_logger(__name__ + ".StrategyRegistry")
    
    @classmethod
    def register(
        cls,
        name: str,
        strategy_class: Type[BaseStrategy],
        description: str = "",
        version: str = "1.0.0",
        author: str = "Unknown",
        category: str = "General",
        parameters_schema: Optional[Dict[str, Any]] = None,
        supported_timeframes: Optional[List[str]] = None,
        override: bool = False
    ) -> None:
        """
        –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤ —Ä–µ–µ—Å—Ç—Ä–µ
        
        Args:
            name: –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            strategy_class: –ö–ª–∞—Å—Å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (–Ω–∞—Å–ª–µ–¥–Ω–∏–∫ BaseStrategy)
            description: –û–ø–∏—Å–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            version: –í–µ—Ä—Å–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏  
            author: –ê–≤—Ç–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            category: –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            parameters_schema: –°—Ö–µ–º–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            supported_timeframes: –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã
            override: –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
        """
        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è
            if not name:
                raise ValueError("Strategy name cannot be empty")
            
            if not inspect.isclass(strategy_class):
                raise ValueError("strategy_class must be a class")
            
            if not issubclass(strategy_class, BaseStrategy):
                raise ValueError("strategy_class must inherit from BaseStrategy")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
            if name in cls._strategies and not override:
                raise ValueError(f"Strategy '{name}' already registered. Use override=True to replace.")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            min_history_length = 20  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                temp_config = StrategyConfig(
                    name=name,
                    symbol="BTCUSDT", 
                    timeframe="5m",
                    parameters={}
                )
                temp_instance = strategy_class(temp_config)
                min_history_length = temp_instance.get_required_history_length()
            except Exception as e:
                cls._logger.warning(f"‚ö†Ô∏è Could not get min_history_length from {strategy_class.__name__}: {e}")
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            strategy_info = StrategyInfo(
                name=name,
                strategy_class=strategy_class,
                description=description or f"Strategy {name}",
                version=version,
                author=author,
                category=category,
                parameters_schema=parameters_schema or {},
                min_history_length=min_history_length,
                supported_timeframes=supported_timeframes or ['1m', '5m', '15m', '30m', '1h', '4h', '1d']
            )
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º
            cls._strategies[name] = strategy_info
            
            cls._logger.info(f"‚úÖ Registered strategy: {name} ({strategy_class.__name__})")
            
        except Exception as e:
            cls._logger.error(f"‚ùå Failed to register strategy '{name}': {e}")
            raise
    
    @classmethod
    def unregister(cls, name: str) -> bool:
        """
        –û—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        
        Args:
            name: –ò–º—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            
        Returns:
            True –µ—Å–ª–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞
        """
        if name in cls._strategies:
            del cls._strategies[name]
            cls._logger.info(f"üóëÔ∏è Unregistered strategy: {name}")
            return True
        else:
            cls._logger.warning(f"‚ö†Ô∏è Strategy '{name}' not found for unregistration")
            return False
    
    @classmethod
    def get_strategy_class(cls, name: str) -> Optional[Type[BaseStrategy]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ –∏–º–µ–Ω–∏
        
        Args:
            name: –ò–º—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            
        Returns:
            –ö–ª–∞—Å—Å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        """
        strategy_info = cls._strategies.get(name)
        return strategy_info.strategy_class if strategy_info else None
    
    @classmethod
    def create_strategy(cls, name: str, config: StrategyConfig) -> Optional[BaseStrategy]:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        
        Args:
            name: –ò–º—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            
        Returns:
            –≠–∫–∑–µ–º–ø–ª—è—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å
        """
        try:
            strategy_class = cls.get_strategy_class(name)
            
            if not strategy_class:
                cls._logger.error(f"‚ùå Strategy '{name}' not found in registry")
                return None
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            strategy_info = cls._strategies[name]
            if config.timeframe not in strategy_info.supported_timeframes:
                cls._logger.warning(f"‚ö†Ô∏è Timeframe '{config.timeframe}' not officially supported by '{name}'")
            
            # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä
            strategy_instance = strategy_class(config)
            
            cls._logger.info(f"üéØ Created strategy instance: {name} for {config.symbol}")
            return strategy_instance
            
        except Exception as e:
            cls._logger.error(f"‚ùå Failed to create strategy '{name}': {e}")
            return None
    
    @classmethod
    def list_strategies(cls, category: Optional[str] = None, active_only: bool = True) -> List[str]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        
        Args:
            category: –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            active_only: –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            
        Returns:
            –°–ø–∏—Å–æ–∫ –∏–º–µ–Ω —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        """
        strategies = []
        
        for name, info in cls._strategies.items():
            # –§–∏–ª—å—Ç—Ä –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            if active_only and not info.is_active:
                continue
            
            # –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if category and info.category != category:
                continue
            
            strategies.append(name)
        
        return sorted(strategies)
    
    @classmethod
    def get_strategy_info(cls, name: str) -> Optional[StrategyInfo]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        
        Args:
            name: –ò–º—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            
        Returns:
            StrategyInfo –∏–ª–∏ None
        """
        return cls._strategies.get(name)
    
    @classmethod
    def get_all_strategies_info(cls) -> Dict[str, Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—Å–µ—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏—è—Ö
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è—Ö
        """
        return {name: info.to_dict() for name, info in cls._strategies.items()}
    
    @classmethod
    def get_categories(cls) -> List[str]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        
        Returns:
            –°–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        """
        categories = set()
        for info in cls._strategies.values():
            categories.add(info.category)
        return sorted(list(categories))
    
    @classmethod
    def search_strategies(cls, query: str) -> List[str]:
        """
        –ü–æ–∏—Å–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏—é
        
        Args:
            query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            
        Returns:
            –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        """
        query = query.lower()
        found_strategies = []
        
        for name, info in cls._strategies.items():
            # –ü–æ–∏—Å–∫ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
            if query in name.lower():
                found_strategies.append(name)
                continue
            
            # –ü–æ–∏—Å–∫ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏
            if query in info.description.lower():
                found_strategies.append(name)
                continue
            
            # –ü–æ–∏—Å–∫ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if query in info.category.lower():
                found_strategies.append(name)
                continue
        
        return sorted(found_strategies)
    
    @classmethod
    def validate_strategy_class(cls, strategy_class: Type[BaseStrategy]) -> Tuple[bool, List[str]]:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–ª–∞—Å—Å–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–µ—Ä–µ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π
        
        Args:
            strategy_class: –ö–ª–∞—Å—Å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            
        Returns:
            (is_valid, errors_list)
        """
        errors = []
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –∫–ª–∞—Å—Å
            if not inspect.isclass(strategy_class):
                errors.append("Must be a class")
                return False, errors
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –æ—Ç BaseStrategy
            if not issubclass(strategy_class, BaseStrategy):
                errors.append("Must inherit from BaseStrategy")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
            required_methods = ['analyze', 'get_required_history_length', 'validate_parameters']
            
            for method_name in required_methods:
                if not hasattr(strategy_class, method_name):
                    errors.append(f"Missing required method: {method_name}")
                else:
                    method = getattr(strategy_class, method_name)
                    if not callable(method):
                        errors.append(f"'{method_name}' must be callable")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ analyze - async –º–µ—Ç–æ–¥
            if hasattr(strategy_class, 'analyze'):
                analyze_method = getattr(strategy_class, 'analyze')
                if not inspect.iscoroutinefunction(analyze_method):
                    errors.append("'analyze' method must be async")
            
            return len(errors) == 0, errors
            
        except Exception as e:
            errors.append(f"Validation error: {str(e)}")
            return False, errors
    
    @classmethod
    def auto_discover_strategies(cls, strategies_path: Optional[str] = None) -> int:
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        
        Args:
            strategies_path: –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏
            
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        """
        discovered = 0
        
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º
            if strategies_path is None:
                current_file = Path(__file__)
                strategies_path = current_file.parent
            else:
                strategies_path = Path(strategies_path)
            
            if not strategies_path.exists():
                cls._logger.warning(f"‚ö†Ô∏è Strategies path does not exist: {strategies_path}")
                return 0
            
            cls._logger.info(f"üîç Auto-discovering strategies in: {strategies_path}")
            
            # –ò—â–µ–º Python —Ñ–∞–π–ª—ã
            for strategy_file in strategies_path.glob("*.py"):
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã
                if strategy_file.name.startswith(('__', 'base_', 'strategy_registry')):
                    continue
                
                try:
                    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å
                    module_name = f"strategies.{strategy_file.stem}"
                    
                    if module_name in sys.modules:
                        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –µ—Å–ª–∏ —É–∂–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω
                        module = importlib.reload(sys.modules[module_name])
                    else:
                        module = importlib.import_module(module_name)
                    
                    # –ò—â–µ–º –∫–ª–∞—Å—Å—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –≤ –º–æ–¥—É–ª–µ
                    for attr_name in dir(module):
                        attr = getattr(module, attr_name)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –∫–ª–∞—Å—Å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                        if (inspect.isclass(attr) and 
                            issubclass(attr, BaseStrategy) and 
                            attr != BaseStrategy):
                            
                            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–ª–∞—Å—Å
                            is_valid, errors = cls.validate_strategy_class(attr)
                            
                            if is_valid:
                                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º
                                strategy_name = attr_name.lower().replace('strategy', '')
                                if strategy_name.endswith('_'):
                                    strategy_name = strategy_name[:-1]
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ —É–∂–µ
                                if strategy_name not in cls._strategies:
                                    cls.register(
                                        name=strategy_name,
                                        strategy_class=attr,
                                        description=f"Auto-discovered {attr.__name__}",
                                        category="Auto-discovered"
                                    )
                                    discovered += 1
                            else:
                                cls._logger.warning(f"‚ö†Ô∏è Invalid strategy class {attr_name}: {errors}")
                
                except Exception as e:
                    cls._logger.error(f"‚ùå Failed to process {strategy_file.name}: {e}")
                    continue
            
            cls._logger.info(f"üéØ Auto-discovered {discovered} strategies")
            return discovered
            
        except Exception as e:
            cls._logger.error(f"‚ùå Auto-discovery failed: {e}")
            return 0
    
    @classmethod
    def activate_strategy(cls, name: str) -> bool:
        """–ê–∫—Ç–∏–≤–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        if name in cls._strategies:
            cls._strategies[name].is_active = True
            cls._logger.info(f"‚úÖ Activated strategy: {name}")
            return True
        return False
    
    @classmethod
    def deactivate_strategy(cls, name: str) -> bool:
        """–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        if name in cls._strategies:
            cls._strategies[name].is_active = False
            cls._logger.info(f"‚è∏Ô∏è Deactivated strategy: {name}")
            return True
        return False
    
    @classmethod
    def clear_registry(cls) -> None:
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ–µ—Å—Ç—Ä–∞ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
        cls._strategies.clear()
        cls._logger.info("üßπ Strategy registry cleared")
    
    @classmethod
    def get_registry_stats(cls) -> Dict[str, Any]:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–µ—Å—Ç—Ä–∞"""
        total_strategies = len(cls._strategies)
        active_strategies = sum(1 for info in cls._strategies.values() if info.is_active)
        categories = cls.get_categories()
        
        category_counts = {}
        for info in cls._strategies.values():
            category_counts[info.category] = category_counts.get(info.category, 0) + 1
        
        return {
            'total_strategies': total_strategies,
            'active_strategies': active_strategies,
            'inactive_strategies': total_strategies - active_strategies,
            'categories': categories,
            'strategies_by_category': category_counts
        }


# ============================================================================
# DECORATORS
# ============================================================================

def register_strategy(
    name: Optional[str] = None,
    description: str = "",
    version: str = "1.0.0",
    author: str = "Unknown",
    category: str = "General",
    parameters_schema: Optional[Dict[str, Any]] = None,
    supported_timeframes: Optional[List[str]] = None
):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
    
    Usage:
        @register_strategy(name="my_strategy", category="Trend")
        class MyStrategy(BaseStrategy):
            ...
    """
    def decorator(strategy_class: Type[BaseStrategy]) -> Type[BaseStrategy]:
        strategy_name = name or strategy_class.__name__.lower().replace('strategy', '')
        if strategy_name.endswith('_'):
            strategy_name = strategy_name[:-1]
        
        StrategyRegistry.register(
            name=strategy_name,
            strategy_class=strategy_class,
            description=description,
            version=version,
            author=author,
            category=category,
            parameters_schema=parameters_schema,
            supported_timeframes=supported_timeframes
        )
        
        return strategy_class
    
    return decorator


# ============================================================================
# CONVENIENCE FUNCTIONS
# ============================================================================

def get_strategy_class(name: str) -> Optional[Type[BaseStrategy]]:
    """–ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    return StrategyRegistry.get_strategy_class(name)


def create_strategy(name: str, symbol: str, timeframe: str, parameters: Dict[str, Any] = None) -> Optional[BaseStrategy]:
    """–ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    config = StrategyConfig(
        name=name,
        symbol=symbol,
        timeframe=timeframe,
        parameters=parameters or {}
    )
    return StrategyRegistry.create_strategy(name, config)


def list_available_strategies() -> List[str]:
    """–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
    return StrategyRegistry.list_strategies()


# ============================================================================
# EXAMPLE USAGE AND TESTING
# ============================================================================

if __name__ == "__main__":
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ–µ—Å—Ç—Ä–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
    
    print("üß™ Testing Strategy Registry")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
    from .base_strategy import BaseStrategy, StrategyConfig, StrategyResult, SignalType
    from data.historical_data import CandleData
    from typing import Tuple
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
    class TestStrategy(BaseStrategy):
        """–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
        
        async def analyze(self, data: List[CandleData]) -> StrategyResult:
            # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞
            current_price = self.get_latest_price(data)
            return StrategyResult(
                signal_type=SignalType.BUY,
                confidence=0.8,
                entry_price=current_price,
                reasoning="Test strategy signal"
            )
        
        def get_required_history_length(self) -> int:
            return 10
        
        def validate_parameters(self) -> Tuple[bool, List[str]]:
            return True, []
    
    try:
        # –¢–µ—Å—Ç 1: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        print("üìù Test 1: Registering strategy...")
        StrategyRegistry.register(
            name="test_strategy",
            strategy_class=TestStrategy,
            description="Simple test strategy",
            category="Test"
        )
        print("‚úÖ Strategy registered")
        
        # –¢–µ—Å—Ç 2: –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        print("\nüìù Test 2: Listing strategies...")
        strategies = StrategyRegistry.list_strategies()
        print(f"‚úÖ Found strategies: {strategies}")
        
        # –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
        print("\nüìù Test 3: Creating strategy instance...")
        config = StrategyConfig(
            name="test_strategy",
            symbol="BTCUSDT",
            timeframe="5m",
            parameters={}
        )
        strategy_instance = StrategyRegistry.create_strategy("test_strategy", config)
        print(f"‚úÖ Created instance: {strategy_instance}")
        
        # –¢–µ—Å—Ç 4: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        print("\nüìù Test 4: Getting strategy info...")
        info = StrategyRegistry.get_strategy_info("test_strategy")
        print(f"‚úÖ Strategy info: {info.name}, category: {info.category}")
        
        # –¢–µ—Å—Ç 5: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–µ—Å—Ç—Ä–∞
        print("\nüìù Test 5: Registry stats...")
        stats = StrategyRegistry.get_registry_stats()
        print(f"‚úÖ Registry stats: {stats}")
        
        # –¢–µ—Å—Ç 6: –î–µ–∫–æ—Ä–∞—Ç–æ—Ä —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        print("\nüìù Test 6: Testing decorator...")
        
        @register_strategy(name="decorated_strategy", category="Decorated")
        class DecoratedStrategy(BaseStrategy):
            async def analyze(self, data):
                return StrategyResult(SignalType.HOLD, 0.5)
            
            def get_required_history_length(self):
                return 5
            
            def validate_parameters(self):
                return True, []
        
        decorated_strategies = StrategyRegistry.list_strategies()
        print(f"‚úÖ Strategies after decoration: {decorated_strategies}")
        
        print("\n‚úÖ All strategy registry tests completed!")
        
    except Exception as e:
        print(f"‚ùå Test failed: {e}")
        import traceback
        traceback.print_exc()
