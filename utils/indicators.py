"""
Trading Bot Technical Indicators
–ù–∞–±–æ—Ä —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
"""

import numpy as np
import pandas as pd
from typing import Union, List, Dict, Tuple, Optional, Any
from dataclasses import dataclass
from enum import Enum
import warnings
warnings.filterwarnings('ignore')

from utils.logger import setup_logger
from utils.helpers import safe_float, validate_price


# ============================================================================
# TYPES AND CONSTANTS
# ============================================================================

logger = setup_logger(__name__)

# –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
PriceData = Union[List[float], np.ndarray, pd.Series]
OHLCData = Union[pd.DataFrame, Dict[str, List[float]]]


class IndicatorType(str, Enum):
    """–¢–∏–ø—ã –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
    TREND = "trend"
    MOMENTUM = "momentum"
    VOLATILITY = "volatility"
    VOLUME = "volume"
    SUPPORT_RESISTANCE = "support_resistance"


@dataclass
class IndicatorResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞"""
    name: str
    type: IndicatorType
    values: Union[float, List[float], Dict[str, float]]
    timestamp: Optional[int] = None
    parameters: Optional[Dict[str, Any]] = None
    
    def to_dict(self) -> Dict[str, Any]:
        return {
            'name': self.name,
            'type': self.type.value,
            'values': self.values,
            'timestamp': self.timestamp,
            'parameters': self.parameters or {}
        }


# ============================================================================
# UTILITY FUNCTIONS
# ============================================================================

def _validate_data(data: PriceData, min_length: int = 1) -> np.ndarray:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    if data is None:
        raise ValueError("Data cannot be None")
    
    if isinstance(data, (list, tuple)):
        arr = np.array([safe_float(x) for x in data])
    elif isinstance(data, pd.Series):
        arr = data.values
    elif isinstance(data, np.ndarray):
        arr = data.copy()
    else:
        raise ValueError(f"Unsupported data type: {type(data)}")
    
    if len(arr) < min_length:
        raise ValueError(f"Not enough data points. Need at least {min_length}, got {len(arr)}")
    
    # –£–¥–∞–ª—è–µ–º NaN –∏ inf
    arr = arr[~np.isnan(arr)]
    arr = arr[~np.isinf(arr)]
    
    if len(arr) < min_length:
        raise ValueError(f"Not enough valid data points after cleaning")
    
    return arr


def _prepare_ohlc_data(data: OHLCData) -> Dict[str, np.ndarray]:
    """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ OHLC –¥–∞–Ω–Ω—ã—Ö"""
    if isinstance(data, pd.DataFrame):
        # –ü—Ä–æ–±—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∏–º–µ–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
        column_mapping = {
            'open': ['open', 'Open', 'OPEN', 'o'],
            'high': ['high', 'High', 'HIGH', 'h'],
            'low': ['low', 'Low', 'LOW', 'l'],
            'close': ['close', 'Close', 'CLOSE', 'c'],
            'volume': ['volume', 'Volume', 'VOLUME', 'vol', 'v']
        }
        
        ohlc = {}
        for key, possible_names in column_mapping.items():
            for name in possible_names:
                if name in data.columns:
                    ohlc[key] = _validate_data(data[name])
                    break
            if key not in ohlc and key != 'volume':  # volume –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π
                raise ValueError(f"Column '{key}' not found in DataFrame")
        
        return ohlc
        
    elif isinstance(data, dict):
        ohlc = {}
        required_keys = ['open', 'high', 'low', 'close']
        
        for key in required_keys:
            if key not in data:
                raise ValueError(f"Key '{key}' not found in data dictionary")
            ohlc[key] = _validate_data(data[key])
        
        if 'volume' in data:
            ohlc['volume'] = _validate_data(data['volume'])
        
        return ohlc
    
    else:
        raise ValueError("OHLC data must be DataFrame or dictionary")


# ============================================================================
# TREND INDICATORS
# ============================================================================

def sma(data: PriceData, period: int = 20) -> IndicatorResult:
    """
    Simple Moving Average (SMA)
    –ü—Ä–æ—Å—Ç–∞—è —Å–∫–æ–ª—å–∑—è—â–∞—è —Å—Ä–µ–¥–Ω—è—è
    """
    try:
        arr = _validate_data(data, period)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º pandas –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
        series = pd.Series(arr)
        sma_values = series.rolling(window=period).mean().dropna()
        
        result = IndicatorResult(
            name='SMA',
            type=IndicatorType.TREND,
            values=sma_values.tolist(),
            parameters={'period': period}
        )
        
        logger.debug(f"üìä SMA calculated with period={period}, got {len(sma_values)} values")
        return result
        
    except Exception as e:
        logger.error(f"‚ùå SMA calculation failed: {e}")
        raise


def ema(data: PriceData, period: int = 20, alpha: float = None) -> IndicatorResult:
    """
    Exponential Moving Average (EMA)
    –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —Å–∫–æ–ª—å–∑—è—â–∞—è —Å—Ä–µ–¥–Ω—è—è
    """
    try:
        arr = _validate_data(data, period)
        
        if alpha is None:
            alpha = 2.0 / (period + 1)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º pandas ewm –¥–ª—è EMA
        series = pd.Series(arr)
        ema_values = series.ewm(alpha=alpha, adjust=False).mean()
        
        result = IndicatorResult(
            name='EMA',
            type=IndicatorType.TREND,
            values=ema_values.tolist(),
            parameters={'period': period, 'alpha': alpha}
        )
        
        logger.debug(f"üìä EMA calculated with period={period}, alpha={alpha}")
        return result
        
    except Exception as e:
        logger.error(f"‚ùå EMA calculation failed: {e}")
        raise


def wma(data: PriceData, period: int = 20) -> IndicatorResult:
    """
    Weighted Moving Average (WMA)
    –í–∑–≤–µ—à–µ–Ω–Ω–∞—è —Å–∫–æ–ª—å–∑—è—â–∞—è —Å—Ä–µ–¥–Ω—è—è
    """
    try:
        arr = _validate_data(data, period)
        
        weights = np.arange(1, period + 1)
        wma_values = []
        
        for i in range(period - 1, len(arr)):
            window = arr[i - period + 1:i + 1]
            wma_value = np.dot(window, weights) / weights.sum()
            wma_values.append(wma_value)
        
        result = IndicatorResult(
            name='WMA',
            type=IndicatorType.TREND,
            values=wma_values,
            parameters={'period': period}
        )
        
        logger.debug(f"üìä WMA calculated with period={period}")
        return result
        
    except Exception as e:
        logger.error(f"‚ùå WMA calculation failed: {e}")
        raise


def macd(
    data: PriceData,
    fast_period: int = 12,
    slow_period: int = 26,
    signal_period: int = 9
) -> IndicatorResult:
    """
    Moving Average Convergence Divergence (MACD)
    """
    try:
        arr = _validate_data(data, slow_period + signal_period)
        
        # –í—ã—á–∏—Å–ª—è–µ–º EMA –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∏ –º–µ–¥–ª–µ–Ω–Ω–æ–π –ª–∏–Ω–∏–π
        fast_ema = ema(arr, fast_period).values
        slow_ema = ema(arr, slow_period).values
        
        # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–ª–∏–Ω—ã –º–∞—Å—Å–∏–≤–æ–≤
        min_len = min(len(fast_ema), len(slow_ema))
        fast_ema = fast_ema[-min_len:]
        slow_ema = slow_ema[-min_len:]
        
        # MACD –ª–∏–Ω–∏—è
        macd_line = np.array(fast_ema) - np.array(slow_ema)
        
        # –°–∏–≥–Ω–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
        signal_line = ema(macd_line, signal_period).values
        
        # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–ª—è –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã
        min_len = min(len(macd_line), len(signal_line))
        macd_line = macd_line[-min_len:]
        signal_line = signal_line[-min_len:]
        
        # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞
        histogram = macd_line - signal_line
        
        result = IndicatorResult(
            name='MACD',
            type=IndicatorType.MOMENTUM,
            values={
                'macd': macd_line.tolist(),
                'signal': signal_line,
                'histogram': histogram.tolist()
            },
            parameters={
                'fast_period': fast_period,
                'slow_period': slow_period,
                'signal_period': signal_period
            }
        )
        
        logger.debug(f"üìä MACD calculated with periods {fast_period}/{slow_period}/{signal_period}")
        return result
        
    except Exception as e:
        logger.error(f"‚ùå MACD calculation failed: {e}")
        raise


# ============================================================================
# MOMENTUM INDICATORS
# ============================================================================

def rsi(data: PriceData, period: int = 14) -> IndicatorResult:
    """
    Relative Strength Index (RSI)
    –ò–Ω–¥–µ–∫—Å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–ª—ã
    """
    try:
        arr = _validate_data(data, period + 1)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω
        deltas = np.diff(arr)
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –ø—Ä–∏–±—ã–ª–∏ –∏ —É–±—ã—Ç–∫–∏
        gains = np.where(deltas > 0, deltas, 0)
        losses = np.where(deltas < 0, -deltas, 0)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º pandas –¥–ª—è —Å–∫–æ–ª—å–∑—è—â–∏—Ö —Å—Ä–µ–¥–Ω–∏—Ö
        gains_series = pd.Series(gains)
        losses_series = pd.Series(losses)
        
        avg_gains = gains_series.rolling(window=period).mean()
        avg_losses = losses_series.rolling(window=period).mean()
        
        # –í—ã—á–∏—Å–ª—è–µ–º RSI
        rs = avg_gains / avg_losses
        rsi_values = 100 - (100 / (1 + rs))
        
        # –£–¥–∞–ª—è–µ–º NaN –∑–Ω–∞—á–µ–Ω–∏—è
        rsi_values = rsi_values.dropna().tolist()
        
        result = IndicatorResult(
            name='RSI',
            type=IndicatorType.MOMENTUM,
            values=rsi_values,
            parameters={'period': period}
        )
        
        logger.debug(f"üìä RSI calculated with period={period}")
        return result
        
    except Exception as e:
        logger.error(f"‚ùå RSI calculation failed: {e}")
        raise


def stochastic(
    ohlc_data: OHLCData,
    k_period: int = 14,
    d_period: int = 3
) -> IndicatorResult:
    """
    Stochastic Oscillator
    –°—Ç–æ—Ö–∞—Å—Ç–∏—á–µ—Å–∫–∏–π –æ—Å—Ü–∏–ª–ª—è—Ç–æ—Ä
    """
    try:
        ohlc = _prepare_ohlc_data(ohlc_data)
        min_len = max(k_period, len(ohlc['high']))
        
        high = ohlc['high']
        low = ohlc['low'] 
        close = ohlc['close']
        
        # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –≤—Å–µ –º–∞—Å—Å–∏–≤—ã –æ–¥–Ω–æ–π –¥–ª–∏–Ω—ã
        min_length = min(len(high), len(low), len(close))
        high = high[:min_length]
        low = low[:min_length]
        close = close[:min_length]
        
        k_values = []
        
        for i in range(k_period - 1, len(close)):
            # –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º—É–º –∏ –º–∏–Ω–∏–º—É–º –∑–∞ –ø–µ—Ä–∏–æ–¥
            period_high = np.max(high[i - k_period + 1:i + 1])
            period_low = np.min(low[i - k_period + 1:i + 1])
            
            if period_high == period_low:
                k_percent = 50  # –ò–∑–±–µ–≥–∞–µ–º –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
            else:
                k_percent = 100 * (close[i] - period_low) / (period_high - period_low)
            
            k_values.append(k_percent)
        
        # %D - —Å–∫–æ–ª—å–∑—è—â–∞—è —Å—Ä–µ–¥–Ω—è—è –æ—Ç %K
        if len(k_values) >= d_period:
            k_series = pd.Series(k_values)
            d_values = k_series.rolling(window=d_period).mean().dropna().tolist()
        else:
            d_values = []
        
        result = IndicatorResult(
            name='STOCHASTIC',
            type=IndicatorType.MOMENTUM,
            values={
                'k': k_values,
                'd': d_values
            },
            parameters={
                'k_period': k_period,
                'd_period': d_period
            }
        )
        
        logger.debug(f"üìä Stochastic calculated with periods K={k_period}, D={d_period}")
        return result
        
    except Exception as e:
        logger.error(f"‚ùå Stochastic calculation failed: {e}")
        raise


def williams_r(ohlc_data: OHLCData, period: int = 14) -> IndicatorResult:
    """
    Williams %R
    –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –í–∏–ª—å—è–º—Å–∞
    """
    try:
        ohlc = _prepare_ohlc_data(ohlc_data)
        
        high = ohlc['high']
        low = ohlc['low']
        close = ohlc['close']
        
        # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –≤—Å–µ –º–∞—Å—Å–∏–≤—ã –æ–¥–Ω–æ–π –¥–ª–∏–Ω—ã
        min_length = min(len(high), len(low), len(close))
        high = high[:min_length]
        low = low[:min_length]
        close = close[:min_length]
        
        williams_values = []
        
        for i in range(period - 1, len(close)):
            period_high = np.max(high[i - period + 1:i + 1])
            period_low = np.min(low[i - period + 1:i + 1])
            
            if period_high == period_low:
                williams_value = -50  # –ò–∑–±–µ–≥–∞–µ–º –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
            else:
                williams_value = -100 * (period_high - close[i]) / (period_high - period_low)
            
            williams_values.append(williams_value)
        
        result = IndicatorResult(
            name='WILLIAMS_R',
            type=IndicatorType.MOMENTUM,
            values=williams_values,
            parameters={'period': period}
        )
        
        logger.debug(f"üìä Williams %R calculated with period={period}")
        return result
        
    except Exception as e:
        logger.error(f"‚ùå Williams %R calculation failed: {e}")
        raise


# ============================================================================
# VOLATILITY INDICATORS
# ============================================================================

def bollinger_bands(
    data: PriceData,
    period: int = 20,
    std_multiplier: float = 2.0
) -> IndicatorResult:
    """
    Bollinger Bands
    –ü–æ–ª–æ—Å—ã –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞
    """
    try:
        arr = _validate_data(data, period)
        
        series = pd.Series(arr)
        
        # –°—Ä–µ–¥–Ω—è—è –ª–∏–Ω–∏—è (SMA)
        middle = series.rolling(window=period).mean()
        
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
        std = series.rolling(window=period).std()
        
        # –í–µ—Ä—Ö–Ω—è—è –∏ –Ω–∏–∂–Ω—è—è –ø–æ–ª–æ—Å—ã
        upper = middle + (std * std_multiplier)
        lower = middle - (std * std_multiplier)
        
        # –£–¥–∞–ª—è–µ–º NaN
        valid_indices = ~pd.isna(middle)
        
        result = IndicatorResult(
            name='BOLLINGER_BANDS',
            type=IndicatorType.VOLATILITY,
            values={
                'upper': upper[valid_indices].tolist(),
                'middle': middle[valid_indices].tolist(),
                'lower': lower[valid_indices].tolist()
            },
            parameters={
                'period': period,
                'std_multiplier': std_multiplier
            }
        )
        
        logger.debug(f"üìä Bollinger Bands calculated with period={period}, multiplier={std_multiplier}")
        return result
        
    except Exception as e:
        logger.error(f"‚ùå Bollinger Bands calculation failed: {e}")
        raise


def atr(ohlc_data: OHLCData, period: int = 14) -> IndicatorResult:
    """
    Average True Range (ATR)
    –°—Ä–µ–¥–Ω–∏–π –∏—Å—Ç–∏–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
    """
    try:
        ohlc = _prepare_ohlc_data(ohlc_data)
        
        high = ohlc['high']
        low = ohlc['low']
        close = ohlc['close']
        
        # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –≤—Å–µ –º–∞—Å—Å–∏–≤—ã –æ–¥–Ω–æ–π –¥–ª–∏–Ω—ã
        min_length = min(len(high), len(low), len(close))
        high = high[:min_length]
        low = low[:min_length] 
        close = close[:min_length]
        
        true_ranges = []
        
        for i in range(1, len(close)):
            tr1 = high[i] - low[i]
            tr2 = abs(high[i] - close[i-1])
            tr3 = abs(low[i] - close[i-1])
            
            true_range = max(tr1, tr2, tr3)
            true_ranges.append(true_range)
        
        # –í—ã—á–∏—Å–ª—è–µ–º ATR –∫–∞–∫ EMA –æ—Ç True Range
        tr_series = pd.Series(true_ranges)
        atr_values = tr_series.rolling(window=period).mean().dropna().tolist()
        
        result = IndicatorResult(
            name='ATR',
            type=IndicatorType.VOLATILITY,
            values=atr_values,
            parameters={'period': period}
        )
        
        logger.debug(f"üìä ATR calculated with period={period}")
        return result
        
    except Exception as e:
        logger.error(f"‚ùå ATR calculation failed: {e}")
        raise


def keltner_channels(
    ohlc_data: OHLCData,
    period: int = 20,
    atr_period: int = 10,
    multiplier: float = 2.0
) -> IndicatorResult:
    """
    Keltner Channels
    –ö–∞–Ω–∞–ª—ã –ö–µ–ª—å—Ç–Ω–µ—Ä–∞
    """
    try:
        ohlc = _prepare_ohlc_data(ohlc_data)
        
        # –¢–∏–ø–∏—á–Ω–∞—è —Ü–µ–Ω–∞
        typical_price = (ohlc['high'] + ohlc['low'] + ohlc['close']) / 3
        
        # –°—Ä–µ–¥–Ω—è—è –ª–∏–Ω–∏—è
        middle_line = ema(typical_price, period).values
        
        # ATR
        atr_values = atr(ohlc_data, atr_period).values
        
        # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–ª–∏–Ω—ã
        min_len = min(len(middle_line), len(atr_values))
        middle_line = middle_line[-min_len:]
        atr_values = atr_values[-min_len:]
        
        # –í–µ—Ä—Ö–Ω–∏–π –∏ –Ω–∏–∂–Ω–∏–π –∫–∞–Ω–∞–ª—ã
        upper_channel = np.array(middle_line) + (np.array(atr_values) * multiplier)
        lower_channel = np.array(middle_line) - (np.array(atr_values) * multiplier)
        
        result = IndicatorResult(
            name='KELTNER_CHANNELS',
            type=IndicatorType.VOLATILITY,
            values={
                'upper': upper_channel.tolist(),
                'middle': middle_line,
                'lower': lower_channel.tolist()
            },
            parameters={
                'period': period,
                'atr_period': atr_period,
                'multiplier': multiplier
            }
        )
        
        logger.debug(f"üìä Keltner Channels calculated")
        return result
        
    except Exception as e:
        logger.error(f"‚ùå Keltner Channels calculation failed: {e}")
        raise


# ============================================================================
# VOLUME INDICATORS
# ============================================================================

def volume_sma(volume_data: PriceData, period: int = 20) -> IndicatorResult:
    """
    Volume Simple Moving Average
    –ü—Ä–æ—Å—Ç–∞—è —Å–∫–æ–ª—å–∑—è—â–∞—è —Å—Ä–µ–¥–Ω—è—è –æ–±—ä–µ–º–æ–≤
    """
    try:
        vol_arr = _validate_data(volume_data, period)
        
        series = pd.Series(vol_arr)
        vol_sma = series.rolling(window=period).mean().dropna()
        
        result = IndicatorResult(
            name='VOLUME_SMA',
            type=IndicatorType.VOLUME,
            values=vol_sma.tolist(),
            parameters={'period': period}
        )
        
        logger.debug(f"üìä Volume SMA calculated with period={period}")
        return result
        
    except Exception as e:
        logger.error(f"‚ùå Volume SMA calculation failed: {e}")
        raise


def obv(ohlc_data: OHLCData) -> IndicatorResult:
    """
    On-Balance Volume (OBV)
    –ë–∞–ª–∞–Ω—Å–æ–≤—ã–π –æ–±—ä–µ–º
    """
    try:
        ohlc = _prepare_ohlc_data(ohlc_data)
        
        if 'volume' not in ohlc:
            raise ValueError("Volume data is required for OBV calculation")
        
        close = ohlc['close']
        volume = ohlc['volume']
        
        # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –º–∞—Å—Å–∏–≤—ã –æ–¥–Ω–æ–π –¥–ª–∏–Ω—ã
        min_length = min(len(close), len(volume))
        close = close[:min_length]
        volume = volume[:min_length]
        
        obv_values = [volume[0]]  # –ù–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        
        for i in range(1, len(close)):
            if close[i] > close[i-1]:
                # –¶–µ–Ω–∞ –≤—ã—Ä–æ—Å–ª–∞ - –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—ä–µ–º
                obv_values.append(obv_values[-1] + volume[i])
            elif close[i] < close[i-1]:
                # –¶–µ–Ω–∞ —É–ø–∞–ª–∞ - –≤—ã—á–∏—Ç–∞–µ–º –æ–±—ä–µ–º
                obv_values.append(obv_values[-1] - volume[i])
            else:
                # –¶–µ–Ω–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
                obv_values.append(obv_values[-1])
        
        result = IndicatorResult(
            name='OBV',
            type=IndicatorType.VOLUME,
            values=obv_values,
            parameters={}
        )
        
        logger.debug(f"üìä OBV calculated")
        return result
        
    except Exception as e:
        logger.error(f"‚ùå OBV calculation failed: {e}")
        raise


def vwap(ohlc_data: OHLCData) -> IndicatorResult:
    """
    Volume Weighted Average Price (VWAP)
    –°—Ä–µ–¥–Ω–µ–≤–∑–≤–µ—à–µ–Ω–Ω–∞—è –ø–æ –æ–±—ä–µ–º—É —Ü–µ–Ω–∞
    """
    try:
        ohlc = _prepare_ohlc_data(ohlc_data)
        
        if 'volume' not in ohlc:
            raise ValueError("Volume data is required for VWAP calculation")
        
        # –¢–∏–ø–∏—á–Ω–∞—è —Ü–µ–Ω–∞
        typical_price = (ohlc['high'] + ohlc['low'] + ohlc['close']) / 3
        volume = ohlc['volume']
        
        # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –º–∞—Å—Å–∏–≤—ã –æ–¥–Ω–æ–π –¥–ª–∏–Ω—ã
        min_length = min(len(typical_price), len(volume))
        typical_price = typical_price[:min_length]
        volume = volume[:min_length]
        
        # –ö—É–º—É–ª—è—Ç–∏–≤–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        cum_volume = np.cumsum(volume)
        cum_price_volume = np.cumsum(typical_price * volume)
        
        # VWAP
        vwap_values = cum_price_volume / cum_volume
        
        result = IndicatorResult(
            name='VWAP',
            type=IndicatorType.VOLUME,
            values=vwap_values.tolist(),
            parameters={}
        )
        
        logger.debug(f"üìä VWAP calculated")
        return result
        
    except Exception as e:
        logger.error(f"‚ùå VWAP calculation failed: {e}")
        raise


# ============================================================================
# SUPPORT & RESISTANCE
# ============================================================================

def pivot_points(ohlc_data: OHLCData) -> IndicatorResult:
    """
    Pivot Points
    –û–ø–æ—Ä–Ω—ã–µ —Ç–æ—á–∫–∏
    """
    try:
        ohlc = _prepare_ohlc_data(ohlc_data)
        
        high = ohlc['high'][-1]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        low = ohlc['low'][-1]
        close = ohlc['close'][-1]
        
        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –æ–ø–æ—Ä–Ω–∞—è —Ç–æ—á–∫–∞
        pivot = (high + low + close) / 3
        
        # –£—Ä–æ–≤–Ω–∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
        r1 = 2 * pivot - low
        r2 = pivot + (high - low)
        r3 = high + 2 * (pivot - low)
        
        # –£—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        s1 = 2 * pivot - high
        s2 = pivot - (high - low)
        s3 = low - 2 * (high - pivot)
        
        result = IndicatorResult(
            name='PIVOT_POINTS',
            type=IndicatorType.SUPPORT_RESISTANCE,
            values={
                'pivot': pivot,
                'r1': r1,
                'r2': r2,
                'r3': r3,
                's1': s1,
                's2': s2,
                's3': s3
            },
            parameters={}
        )
        
        logger.debug(f"üìä Pivot Points calculated: P={pivot:.2f}")
        return result
        
    except Exception as e:
        logger.error(f"‚ùå Pivot Points calculation failed: {e}")
        raise


def fibonacci_retracement(high_price: float, low_price: float) -> IndicatorResult:
    """
    Fibonacci Retracement Levels
    –£—Ä–æ–≤–Ω–∏ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –§–∏–±–æ–Ω–∞—á—á–∏
    """
    try:
        if not validate_price(high_price) or not validate_price(low_price):
            raise ValueError("Invalid high or low price")
        
        if high_price <= low_price:
            raise ValueError("High price must be greater than low price")
        
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –§–∏–±–æ–Ω–∞—á—á–∏
        fib_levels = [0.0, 0.236, 0.382, 0.5, 0.618, 0.786, 1.0]
        
        price_diff = high_price - low_price
        levels = {}
        
        for level in fib_levels:
            retracement_price = high_price - (price_diff * level)
            levels[f"fib_{level}"] = retracement_price
        
        result = IndicatorResult(
            name='FIBONACCI_RETRACEMENT',
            type=IndicatorType.SUPPORT_RESISTANCE,
            values=levels,
            parameters={
                'high_price': high_price,
                'low_price': low_price
            }
        )
        
        logger.debug(f"üìä Fibonacci retracement calculated for range {low_price}-{high_price}")
        return result
        
    except Exception as e:
        logger.error(f"‚ùå Fibonacci retracement calculation failed: {e}")
        raise


# ============================================================================
# COMPOSITE INDICATORS
# ============================================================================

def ichimoku_cloud(
    ohlc_data: OHLCData,
    tenkan_period: int = 9,
    kijun_period: int = 26,
    senkou_span_b_period: int = 52,
    displacement: int = 26
) -> IndicatorResult:
    """
    Ichimoku Kinko Hyo (Ichimoku Cloud)
    –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ò—à–∏–º–æ–∫—É
    """
    try:
        ohlc = _prepare_ohlc_data(ohlc_data)
        
        high = ohlc['high']
        low = ohlc['low']
        close = ohlc['close']
        
        def calculate_line(period):
            """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ª–∏–Ω–∏–π"""
            line_values = []
            for i in range(period - 1, len(high)):
                period_high = np.max(high[i - period + 1:i + 1])
                period_low = np.min(low[i - period + 1:i + 1])
                line_values.append((period_high + period_low) / 2)
            return line_values
        
        # Tenkan-sen (Conversion Line)
        tenkan_sen = calculate_line(tenkan_period)
        
        # Kijun-sen (Base Line)
        kijun_sen = calculate_line(kijun_period)
        
        # Senkou Span A (Leading Span A)
        min_len = min(len(tenkan_sen), len(kijun_sen))
        tenkan_aligned = tenkan_sen[-min_len:]
        kijun_aligned = kijun_sen[-min_len:]
        
        senkou_span_a = [(t + k) / 2 for t, k in zip(tenkan_aligned, kijun_aligned)]
        
        # Senkou Span B (Leading Span B)
        senkou_span_b = calculate_line(senkou_span_b_period)
        
        # Chikou Span (Lagging Span) - –ø—Ä–æ—Å—Ç–æ —Å–º–µ—â–µ–Ω–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        chikou_span = close[:-displacement].tolist() if len(close) > displacement else []
        
        result = IndicatorResult(
            name='ICHIMOKU_CLOUD',
            type=IndicatorType.TREND,
            values={
                'tenkan_sen': tenkan_sen,
                'kijun_sen': kijun_sen,
                'senkou_span_a': senkou_span_a,
                'senkou_span_b': senkou_span_b,
                'chikou_span': chikou_span
            },
            parameters={
                'tenkan_period': tenkan_period,
                'kijun_period': kijun_period,
                'senkou_span_b_period': senkou_span_b_period,
                'displacement': displacement
            }
        )
        
        logger.debug(f"üìä Ichimoku Cloud calculated")
        return result
        
    except Exception as e:
        logger.error(f"‚ùå Ichimoku Cloud calculation failed: {e}")
        raise


# ============================================================================
# HELPER FUNCTIONS FOR STRATEGIES
# ============================================================================

def detect_crossover(fast_line: List[float], slow_line: List[float]) -> Dict[str, List[int]]:
    """
    –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π –¥–≤—É—Ö –ª–∏–Ω–∏–π
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–¥–µ–∫—Å—ã –≥–¥–µ –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
    """
    try:
        if len(fast_line) != len(slow_line):
            min_len = min(len(fast_line), len(slow_line))
            fast_line = fast_line[-min_len:]
            slow_line = slow_line[-min_len:]
        
        crossovers = {'bullish': [], 'bearish': []}
        
        for i in range(1, len(fast_line)):
            # –ë—ã—á—å–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ: –±—ã—Å—Ç—Ä–∞—è –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç –º–µ–¥–ª–µ–Ω–Ω—É—é —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö
            if fast_line[i-1] <= slow_line[i-1] and fast_line[i] > slow_line[i]:
                crossovers['bullish'].append(i)
            
            # –ú–µ–¥–≤–µ–∂—å–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ: –±—ã—Å—Ç—Ä–∞—è –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç –º–µ–¥–ª–µ–Ω–Ω—É—é —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑
            elif fast_line[i-1] >= slow_line[i-1] and fast_line[i] < slow_line[i]:
                crossovers['bearish'].append(i)
        
        logger.debug(f"üìä Detected {len(crossovers['bullish'])} bullish and {len(crossovers['bearish'])} bearish crossovers")
        return crossovers
        
    except Exception as e:
        logger.error(f"‚ùå Crossover detection failed: {e}")
        return {'bullish': [], 'bearish': []}


def detect_divergence(
    price_data: PriceData,
    indicator_data: PriceData,
    lookback: int = 5
) -> Dict[str, List[int]]:
    """
    –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏–∏ –º–µ–∂–¥—É —Ü–µ–Ω–æ–π –∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º
    """
    try:
        prices = _validate_data(price_data)
        indicator = _validate_data(indicator_data)
        
        if len(prices) != len(indicator):
            min_len = min(len(prices), len(indicator))
            prices = prices[-min_len:]
            indicator = indicator[-min_len:]
        
        divergences = {'bullish': [], 'bearish': []}
        
        for i in range(lookback, len(prices) - lookback):
            # –ò—â–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–∞–∫—Å–∏–º—É–º—ã –∏ –º–∏–Ω–∏–º—É–º—ã
            price_window = prices[i-lookback:i+lookback+1]
            indicator_window = indicator[i-lookback:i+lookback+1]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∞—è —Ç–æ—á–∫–∞ —ç–∫—Å—Ç—Ä–µ–º—É–º–æ–º
            if prices[i] == np.max(price_window):  # –õ–æ–∫–∞–ª—å–Ω—ã–π –º–∞–∫—Å–∏–º—É–º —Ü–µ–Ω—ã
                if indicator[i] < np.max(indicator_window):  # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–µ –Ω–∞ –º–∞–∫—Å–∏–º—É–º–µ
                    divergences['bearish'].append(i)
            
            elif prices[i] == np.min(price_window):  # –õ–æ–∫–∞–ª—å–Ω—ã–π –º–∏–Ω–∏–º—É–º —Ü–µ–Ω—ã
                if indicator[i] > np.min(indicator_window):  # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–µ –Ω–∞ –º–∏–Ω–∏–º—É–º–µ
                    divergences['bullish'].append(i)
        
        logger.debug(f"üìä Detected {len(divergences['bullish'])} bullish and {len(divergences['bearish'])} bearish divergences")
        return divergences
        
    except Exception as e:
        logger.error(f"‚ùå Divergence detection failed: {e}")
        return {'bullish': [], 'bearish': []}


def calculate_indicator_signals(
    indicator_result: IndicatorResult,
    overbought_level: float = 70,
    oversold_level: float = 30
) -> Dict[str, List[int]]:
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
    """
    try:
        signals = {'buy': [], 'sell': []}
        
        if indicator_result.name == 'RSI':
            rsi_values = indicator_result.values
            
            for i, rsi in enumerate(rsi_values):
                if rsi < oversold_level:
                    signals['buy'].append(i)
                elif rsi > overbought_level:
                    signals['sell'].append(i)
        
        elif indicator_result.name == 'STOCHASTIC':
            k_values = indicator_result.values.get('k', [])
            d_values = indicator_result.values.get('d', [])
            
            if k_values and d_values:
                crossovers = detect_crossover(k_values, d_values)
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —É—Ä–æ–≤–Ω—è–º –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç–∏/–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç–∏
                for idx in crossovers['bullish']:
                    if idx < len(k_values) and k_values[idx] < oversold_level:
                        signals['buy'].append(idx)
                
                for idx in crossovers['bearish']:
                    if idx < len(k_values) and k_values[idx] > overbought_level:
                        signals['sell'].append(idx)
        
        elif indicator_result.name == 'MACD':
            macd_line = indicator_result.values.get('macd', [])
            signal_line = indicator_result.values.get('signal', [])
            
            if macd_line and signal_line:
                crossovers = detect_crossover(macd_line, signal_line)
                signals['buy'] = crossovers['bullish']
                signals['sell'] = crossovers['bearish']
        
        logger.debug(f"üìä Generated {len(signals['buy'])} buy and {len(signals['sell'])} sell signals for {indicator_result.name}")
        return signals
        
    except Exception as e:
        logger.error(f"‚ùå Signal generation failed: {e}")
        return {'buy': [], 'sell': []}


# ============================================================================
# MULTI-INDICATOR ANALYSIS
# ============================================================================

def analyze_multiple_indicators(
    ohlc_data: OHLCData,
    indicators_config: Dict[str, Dict[str, Any]]
) -> Dict[str, IndicatorResult]:
    """
    –ê–Ω–∞–ª–∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    
    indicators_config example:
    {
        'rsi': {'period': 14},
        'macd': {'fast_period': 12, 'slow_period': 26, 'signal_period': 9},
        'bollinger': {'period': 20, 'std_multiplier': 2.0}
    }
    """
    try:
        ohlc = _prepare_ohlc_data(ohlc_data)
        close_prices = ohlc['close']
        
        results = {}
        
        for indicator_name, params in indicators_config.items():
            try:
                if indicator_name.lower() == 'rsi':
                    result = rsi(close_prices, **params)
                
                elif indicator_name.lower() == 'macd':
                    result = macd(close_prices, **params)
                
                elif indicator_name.lower() in ['bollinger', 'bollinger_bands']:
                    result = bollinger_bands(close_prices, **params)
                
                elif indicator_name.lower() == 'sma':
                    result = sma(close_prices, **params)
                
                elif indicator_name.lower() == 'ema':
                    result = ema(close_prices, **params)
                
                elif indicator_name.lower() == 'atr':
                    result = atr(ohlc_data, **params)
                
                elif indicator_name.lower() == 'stochastic':
                    result = stochastic(ohlc_data, **params)
                
                else:
                    logger.warning(f"‚ö†Ô∏è Unknown indicator: {indicator_name}")
                    continue
                
                results[indicator_name] = result
                
            except Exception as e:
                logger.error(f"‚ùå Failed to calculate {indicator_name}: {e}")
                continue
        
        logger.info(f"üìä Calculated {len(results)} indicators successfully")
        return results
        
    except Exception as e:
        logger.error(f"‚ùå Multi-indicator analysis failed: {e}")
        return {}


def create_trading_summary(
    indicators_results: Dict[str, IndicatorResult],
    current_price: float
) -> Dict[str, Any]:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∞–º–º–∞—Ä–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    """
    try:
        summary = {
            'timestamp': int(pd.Timestamp.now().timestamp() * 1000),
            'current_price': current_price,
            'indicators': {},
            'signals': {'buy': 0, 'sell': 0, 'neutral': 0},
            'overall_sentiment': 'NEUTRAL',
            'confidence': 0.0
        }
        
        total_signals = 0
        buy_signals = 0
        sell_signals = 0
        
        for name, result in indicators_results.items():
            indicator_info = {
                'type': result.type.value,
                'current_value': None,
                'signal': 'NEUTRAL'
            }
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
            if isinstance(result.values, list) and result.values:
                indicator_info['current_value'] = result.values[-1]
            elif isinstance(result.values, dict):
                # –î–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –±–µ—Ä–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                if name.upper() == 'MACD':
                    indicator_info['current_value'] = result.values.get('macd', [])[-1] if result.values.get('macd') else None
                elif name.upper() == 'BOLLINGER_BANDS':
                    indicator_info['current_value'] = {
                        'upper': result.values.get('upper', [])[-1] if result.values.get('upper') else None,
                        'middle': result.values.get('middle', [])[-1] if result.values.get('middle') else None,
                        'lower': result.values.get('lower', [])[-1] if result.values.get('lower') else None
                    }
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã
            signals = calculate_indicator_signals(result)
            
            if signals['buy']:
                indicator_info['signal'] = 'BUY'
                buy_signals += 1
            elif signals['sell']:
                indicator_info['signal'] = 'SELL'
                sell_signals += 1
            
            summary['indicators'][name] = indicator_info
            total_signals += 1
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç
        if total_signals > 0:
            buy_ratio = buy_signals / total_signals
            sell_ratio = sell_signals / total_signals
            
            if buy_ratio > 0.6:
                summary['overall_sentiment'] = 'BULLISH'
                summary['confidence'] = buy_ratio
            elif sell_ratio > 0.6:
                summary['overall_sentiment'] = 'BEARISH'
                summary['confidence'] = sell_ratio
            else:
                summary['overall_sentiment'] = 'NEUTRAL'
                summary['confidence'] = max(buy_ratio, sell_ratio)
        
        summary['signals'] = {
            'buy': buy_signals,
            'sell': sell_signals,
            'neutral': total_signals - buy_signals - sell_signals
        }
        
        logger.info(f"üìä Trading summary created: {summary['overall_sentiment']} (confidence: {summary['confidence']:.2f})")
        return summary
        
    except Exception as e:
        logger.error(f"‚ùå Trading summary creation failed: {e}")
        return {}


# ============================================================================
# EXAMPLE USAGE AND TESTING
# ============================================================================

if __name__ == "__main__":
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    
    print("üß™ Testing Technical Indicators")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    np.random.seed(42)
    n_points = 100
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ OHLC –¥–∞–Ω–Ω—ã–µ
    base_price = 50000
    price_changes = np.random.normal(0, 0.02, n_points)  # 2% –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
    close_prices = [base_price]
    
    for change in price_changes[1:]:
        new_price = close_prices[-1] * (1 + change)
        close_prices.append(new_price)
    
    # –°–æ–∑–¥–∞–µ–º OHLC –¥–∞–Ω–Ω—ã–µ
    ohlc_data = {
        'open': [p * (1 + np.random.uniform(-0.01, 0.01)) for p in close_prices],
        'high': [p * (1 + np.random.uniform(0.001, 0.02)) for p in close_prices],
        'low': [p * (1 + np.random.uniform(-0.02, -0.001)) for p in close_prices],
        'close': close_prices,
        'volume': [np.random.uniform(100, 1000) for _ in range(n_points)]
    }
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        print("üìä Testing SMA...")
        sma_result = sma(close_prices, 20)
        print(f"‚úÖ SMA: {len(sma_result.values)} values calculated")
        
        print("üìä Testing EMA...")
        ema_result = ema(close_prices, 20)
        print(f"‚úÖ EMA: {len(ema_result.values)} values calculated")
        
        print("üìä Testing RSI...")
        rsi_result = rsi(close_prices, 14)
        print(f"‚úÖ RSI: {len(rsi_result.values)} values, last value: {rsi_result.values[-1]:.2f}")
        
        print("üìä Testing MACD...")
        macd_result = macd(close_prices)
        print(f"‚úÖ MACD: MACD line has {len(macd_result.values['macd'])} values")
        
        print("üìä Testing Bollinger Bands...")
        bb_result = bollinger_bands(close_prices)
        print(f"‚úÖ Bollinger Bands: {len(bb_result.values['middle'])} values calculated")
        
        print("üìä Testing ATR...")
        atr_result = atr(ohlc_data)
        print(f"‚úÖ ATR: {len(atr_result.values)} values, last ATR: {atr_result.values[-1]:.2f}")
        
        print("üìä Testing multiple indicators...")
        indicators_config = {
            'rsi': {'period': 14},
            'macd': {'fast_period': 12, 'slow_period': 26, 'signal_period': 9},
            'bollinger': {'period': 20, 'std_multiplier': 2.0}
        }
        
        multi_results = analyze_multiple_indicators(ohlc_data, indicators_config)
        print(f"‚úÖ Multi-indicator analysis: {len(multi_results)} indicators calculated")
        
        print("üìä Creating trading summary...")
        summary = create_trading_summary(multi_results, close_prices[-1])
        print(f"‚úÖ Trading Summary: {summary['overall_sentiment']} (confidence: {summary['confidence']:.2f})")
        
        print("\n‚úÖ All indicator tests completed successfully!")
        
    except Exception as e:
        print(f"‚ùå Test failed: {e}")
